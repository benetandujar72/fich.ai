<!DOCTYPE html>
<html lang="ca">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Control Horari Pro V4.0 - DEBUG</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 300;
        }

        .version {
            background: rgba(255,255,255,0.2);
            padding: 5px 15px;
            border-radius: 20px;
            display: inline-block;
            font-size: 0.9rem;
            margin-top: 10px;
        }

        .main-content {
            padding: 40px;
        }

        .debug-panel {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
            font-family: 'Courier New', monospace;
            max-height: 300px;
            overflow-y: auto;
        }

        .debug-title {
            color: #f39c12;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .debug-log {
            font-size: 12px;
            line-height: 1.4;
            white-space: pre-wrap;
        }

        .controls {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 30px;
            margin-bottom: 40px;
        }

        .control-group {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 12px;
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .control-group:hover {
            border-color: #3498db;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(52, 152, 219, 0.15);
        }

        .control-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 10px;
            color: #2c3e50;
            font-size: 1rem;
        }

        select, input {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: white;
        }

        select:focus, input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        .date-buttons {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            flex-wrap: wrap;
        }

        .date-btn, .debug-btn {
            background: #e9ecef;
            border: none;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            color: #495057;
        }

        .date-btn:hover, .debug-btn:hover {
            background: #3498db;
            color: white;
            transform: translateY(-1px);
        }

        .debug-btn {
            background: #f39c12;
            color: white;
        }

        .debug-btn:hover {
            background: #e67e22;
        }

        .analyze-btn {
            background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: block;
            margin: 30px auto;
            min-width: 200px;
        }

        .analyze-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(46, 204, 113, 0.3);
        }

        .analyze-btn:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .results {
            display: none;
            margin-top: 40px;
        }

        .results.show {
            display: block;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .summary-card {
            background: white;
            border: 2px solid #f1f2f6;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
        }

        .summary-card:hover {
            border-color: #3498db;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

        .card-value {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 5px;
            color: #2c3e50;
        }

        .card-label {
            color: #7f8c8d;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 40px;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .error {
            background: #fadbd8;
            color: #e74c3c;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 4px solid #e74c3c;
            display: none;
        }

        .error.show {
            display: block;
            animation: fadeIn 0.5s ease;
        }

        .employee-info {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 30px;
            text-align: center;
        }

        .employee-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .employee-code {
            opacity: 0.9;
            font-size: 1rem;
        }

        @media (max-width: 768px) {
            .controls {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .summary-cards {
                grid-template-columns: repeat(2, 1fr);
            }
            
            body {
                padding: 10px;
            }
            
            .main-content {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîß Control Horari Pro DEBUG</h1>
            <div class="version">Versi√≥ 4.0 - Mode Diagn√≤stic</div>
        </div>

        <div class="main-content">
            <div class="debug-panel">
                <div class="debug-title">üîç LOG DE DIAGN√íSTIC</div>
                <div class="debug-log" id="debug-log">Sistema carregant...</div>
            </div>

            <div class="controls">
                <div class="control-group">
                    <label for="employee-select">üë§ Seleccionar Empleat</label>
                    <select id="employee-select">
                        <option value="">Carregant empleats...</option>
                    </select>
                    <div class="date-buttons">
                        <button class="debug-btn" onclick="testEmployee()">üîç Diagn√≤stic Empleat</button>
                    </div>
                </div>

                <div class="control-group">
                    <label for="start-date">üìÖ Data Inici</label>
                    <input type="date" id="start-date">
                </div>

                <div class="control-group">
                    <label for="end-date">üìÖ Data Fi</label>
                    <input type="date" id="end-date">
                    <div class="date-buttons">
                        <button class="date-btn" onclick="setDateRange(7)">√öltima setmana</button>
                        <button class="date-btn" onclick="setDateRange(14)">√öltimes 2 setmanes</button>
                        <button class="debug-btn" onclick="testSystem()">üîß Test Sistema</button>
                    </div>
                </div>
            </div>

            <button class="analyze-btn" onclick="performAnalysis()">
                üìä Analitzar amb Debug
            </button>

            <div class="loading">
                <div class="spinner"></div>
                <p>Analitzant amb informaci√≥ de debug...</p>
            </div>

            <div class="error">
                <strong>Error:</strong> <span class="error-message"></span>
            </div>

            <div class="results">
                <div class="employee-info">
                    <div class="employee-name"></div>
                    <div class="employee-code"></div>
                </div>

                <div class="summary-cards">
                    <div class="summary-card">
                        <div class="card-value" id="total-days">-</div>
                        <div class="card-label">Dies Analitzats</div>
                    </div>
                    <div class="summary-card">
                        <div class="card-value" id="attendance-rate">-</div>
                        <div class="card-label">Taxa d'Assist√®ncia</div>
                    </div>
                    <div class="summary-card">
                        <div class="card-value" id="present-days">-</div>
                        <div class="card-label">Dies Presents</div>
                    </div>
                    <div class="summary-card">
                        <div class="card-value" id="absent-days">-</div>
                        <div class="card-label">Dies Absents</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        class ControlHorariV4DashboardDebug {
            constructor() {
                this.employees = [];
                this.debugLog = [];
                this.init();
            }

            init() {
                this.log('üöÄ Inicializando dashboard debug V4.0...');
                this.loadEmployees();
                this.setupEventListeners();
                this.setDefaultDates();
            }

            log(message) {
                const timestamp = new Date().toLocaleTimeString('ca-ES');
                const logMessage = `[${timestamp}] ${message}`;
                this.debugLog.push(logMessage);
                
                // Mantener solo los √∫ltimos 50 logs
                if (this.debugLog.length > 50) {
                    this.debugLog.shift();
                }
                
                const debugLogElement = document.getElementById('debug-log');
                debugLogElement.textContent = this.debugLog.join('\n');
                debugLogElement.scrollTop = debugLogElement.scrollHeight;
                
                console.log(logMessage);
            }

            setDefaultDates() {
                const today = new Date();
                const weekAgo = new Date(today.getTime() - (7 * 24 * 60 * 60 * 1000));
                
                document.getElementById('end-date').valueAsDate = today;
                document.getElementById('start-date').valueAsDate = weekAgo;
            }

            setupEventListeners() {
                document.getElementById('employee-select').addEventListener('change', (e) => {
                    this.hideError();
                    if (e.target.value) {
                        this.log(`‚úÖ Empleado seleccionado: ${e.target.value}`);
                    }
                });
            }

            async loadEmployees() {
                try {
                    this.log('üîç Cargando empleados...');
                    
                    const employees = await this.callServer('obtenerListaEmpleados');
                    this.employees = employees;
                    
                    const select = document.getElementById('employee-select');
                    select.innerHTML = '<option value="">Selecciona un empleat...</option>';
                    
                    if (!employees || employees.length === 0) {
                        this.log('‚ùå No se encontraron empleados');
                        select.innerHTML = '<option value="">No hi ha empleats disponibles</option>';
                        return;
                    }
                    
                    employees.forEach(emp => {
                        const option = document.createElement('option');
                        option.value = emp.codigo;
                        option.textContent = `${emp.codigo} - ${emp.nombre} ${emp.apellidos}`;
                        select.appendChild(option);
                    });
                    
                    this.log(`‚úÖ ${employees.length} empleados cargados correctamente`);
                    
                } catch (error) {
                    this.log(`‚ùå Error cargando empleados: ${error.message}`);
                    this.showError('No s\'han pogut carregar els empleats: ' + error.message);
                }
            }

            async testEmployee() {
                const employeeCode = document.getElementById('employee-select').value;
                if (!employeeCode) {
                    this.showError('Selecciona un empleat primer');
                    return;
                }

                try {
                    this.log(`üîç Ejecutando diagn√≥stico para empleado: ${employeeCode}`);
                    const resultado = await this.callServer('diagnosticarEmpleado', employeeCode);
                    
                    if (resultado.error) {
                        this.log(`‚ùå Error diagn√≥stico: ${resultado.error}`);
                        if (resultado.empleadosDisponibles) {
                            this.log('üìã Empleados disponibles:');
                            resultado.empleadosDisponibles.forEach(emp => {
                                this.log(`  - ${emp.codigo}: ${emp.nombre} ${emp.apellidos}`);
                            });
                        }
                    } else {
                        this.log(`‚úÖ Diagn√≥stico exitoso: ${resultado.mensaje}`);
                        this.log(`üìù Empleado: ${resultado.empleado.nombre} ${resultado.empleado.apellidos}`);
                    }
                    
                } catch (error) {
                    this.log(`‚ùå Error ejecutando diagn√≥stico: ${error.message}`);
                    this.showError('Error en diagn√≤stic: ' + error.message);
                }
            }

            async testSystem() {
                try {
                    this.log('üîß Ejecutando test del sistema...');
                    const estado = await this.callServer('verificarSistemaV4');
                    
                    this.log(`üìä Estado del sistema:`);
                    this.log(`  - Versi√≥n: ${estado.version}`);
                    this.log(`  - Pesta√±as correctas: ${estado.pestanyasCorrectas ? 'S√ç' : 'NO'}`);
                    this.log(`  - Empleados detectados: ${estado.empleadosDetectados}`);
                    this.log(`  - Sistema funcionando: ${estado.funcionando ? 'S√ç' : 'NO'}`);
                    
                    if (estado.error) {
                        this.log(`‚ùå Error del sistema: ${estado.error}`);
                    }
                    
                } catch (error) {
                    this.log(`‚ùå Error test sistema: ${error.message}`);
                    this.showError('Error testejant sistema: ' + error.message);
                }
            }

            async performAnalysis() {
                const employeeCode = document.getElementById('employee-select').value;
                const startDate = document.getElementById('start-date').value;
                const endDate = document.getElementById('end-date').value;

                if (!employeeCode) {
                    this.showError('Si us plau, selecciona un empleat');
                    return;
                }

                if (!startDate || !endDate) {
                    this.showError('Si us plau, selecciona les dates');
                    return;
                }

                if (new Date(startDate) >= new Date(endDate)) {
                    this.showError('La data d\'inici ha de ser anterior a la data de fi');
                    return;
                }

                try {
                    this.showLoading();
                    this.hideError();
                    this.hideResults();

                    this.log('üöÄ Iniciando an√°lisis con debug...');
                    this.log(`üìù Empleado: ${employeeCode}`);
                    this.log(`üìÖ Rango: ${startDate} - ${endDate}`);

                    const analysisData = await this.callServer('analizarEmpleado', employeeCode, startDate, endDate);
                    
                    this.log(`üì¶ Respuesta del servidor recibida`);
                    this.log(`üì¶ Tipo de respuesta: ${typeof analysisData}`);
                    this.log(`üì¶ Es null: ${analysisData === null}`);
                    this.log(`üì¶ Es undefined: ${analysisData === undefined}`);
                    
                    if (analysisData === null) {
                        this.log('‚ùå AN√ÅLISIS DEVOLVI√ì NULL');
                        throw new Error('L\'an√†lisi ha retornat null. Revisa la configuraci√≥ del sistema.');
                    }
                    
                    if (analysisData === undefined) {
                        this.log('‚ùå AN√ÅLISIS DEVOLVI√ì UNDEFINED');
                        throw new Error('L\'an√†lisi ha retornat undefined. Error en el servidor.');
                    }
                    
                    if (!analysisData.empleado) {
                        this.log('‚ùå FALTA INFORMACI√ìN DE EMPLEADO EN LA RESPUESTA');
                        this.log(`üì¶ Claves disponibles: ${Object.keys(analysisData)}`);
                        throw new Error('Resposta del servidor incompleta: falta informaci√≥ d\'empleat');
                    }
                    
                    this.log('‚úÖ An√°lisis completado correctamente');
                    this.log(`üë§ Empleado: ${analysisData.empleado.nombre} ${analysisData.empleado.apellidos}`);
                    this.log(`üìä D√≠as analizados: ${analysisData.resumen ? analysisData.resumen.totalDias : 'N/A'}`);
                    
                    this.displayResults(analysisData);
                    
                } catch (error) {
                    this.log(`‚ùå Error en an√°lisis: ${error.message}`);
                    this.showError('Error en l\'an√†lisi: ' + error.message);
                } finally {
                    this.hideLoading();
                }
            }

            displayResults(data) {
                this.log('üé® Mostrando resultados...');
                
                // Informaci√≥n del empleado
                document.querySelector('.employee-name').textContent = 
                    `${data.empleado.nombre} ${data.empleado.apellidos}`;
                document.querySelector('.employee-code').textContent = 
                    `Codi: ${data.empleado.codigo} | Departament: ${data.empleado.departamento}`;

                // Resumen
                const resumen = data.resumen;
                document.getElementById('total-days').textContent = resumen.totalDias;
                document.getElementById('present-days').textContent = resumen.diasPresente;
                document.getElementById('absent-days').textContent = resumen.diasAusente;
                
                const attendanceRate = document.getElementById('attendance-rate');
                const percentage = (resumen.tasaAsistencia * 100).toFixed(1) + '%';
                attendanceRate.textContent = percentage;

                this.showResults();
                this.log('‚úÖ Resultados mostrados correctamente');
            }

            async callServer(functionName, ...args) {
                return new Promise((resolve, reject) => {
                    const timeout = setTimeout(() => {
                        reject(new Error('Timeout: La consulta ha tardat massa'));
                    }, 30000);

                    this.log(`üìû Llamando funci√≥n del servidor: ${functionName}`);
                    if (args.length > 0) {
                        this.log(`üìû Par√°metros: ${JSON.stringify(args)}`);
                    }

                    google.script.run
                        .withSuccessHandler((result) => {
                            clearTimeout(timeout);
                            this.log(`üìû Respuesta recibida para ${functionName}`);
                            resolve(result);
                        })
                        .withFailureHandler((error) => {
                            clearTimeout(timeout);
                            this.log(`üìû Error en ${functionName}: ${error.message}`);
                            reject(error);
                        })
                        [functionName](...args);
                });
            }

            showLoading() {
                document.querySelector('.loading').classList.add('show');
                document.querySelector('.analyze-btn').disabled = true;
            }

            hideLoading() {
                document.querySelector('.loading').classList.remove('show');
                document.querySelector('.analyze-btn').disabled = false;
            }

            showError(message) {
                const errorDiv = document.querySelector('.error');
                errorDiv.querySelector('.error-message').textContent = message;
                errorDiv.classList.add('show');
            }

            hideError() {
                document.querySelector('.error').classList.remove('show');
            }

            showResults() {
                document.querySelector('.results').classList.add('show');
            }

            hideResults() {
                document.querySelector('.results').classList.remove('show');
            }
        }

        // Funciones globales
        function setDateRange(days) {
            const today = new Date();
            const startDate = new Date(today.getTime() - (days * 24 * 60 * 60 * 1000));
            
            document.getElementById('end-date').valueAsDate = today;
            document.getElementById('start-date').valueAsDate = startDate;
            
            dashboard.log(`üìÖ Rango de fechas establecido: ${days} d√≠as`);
        }

        function performAnalysis() {
            dashboard.performAnalysis();
        }

        function testEmployee() {
            dashboard.testEmployee();
        }

        function testSystem() {
            dashboard.testSystem();
        }

        // Inicializar
        let dashboard;
        window.onload = function() {
            dashboard = new ControlHorariV4DashboardDebug();
        };
    </script>
</body>
</html>