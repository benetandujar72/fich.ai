{"file_contents":{"ROLE_IMPROVEMENTS_PROPOSAL.md":{"content":"# Propuesta de Mejoras y Nuevos Roles para EduPresència\n\n## Control de Acceso Basado en Roles (RBAC) - Implementado\n\n### Roles Principales Actuales\n\n#### 1. **Superadministrador**\n- **Acceso**: Todas las instituciones del sistema\n- **Capacidades**: \n  - Ver y gestionar todas las instituciones\n  - Crear/editar instituciones\n  - Gestionar todos los usuarios\n  - Acceso completo a configuración de seguridad\n  - Generar informes multi-institución\n  - Gestionar años académicos globalmente\n\n#### 2. **Administrador de Institución**\n- **Acceso**: Solo su institución asignada\n- **Capacidades**:\n  - Gestionar empleados de su institución\n  - Importar horarios y configurar calendarios\n  - Aprobar ausencias y gestionar sustitutos\n  - Generar informes de su institución\n  - Gestionar alertas y notificaciones\n  - Configurar métodos de marcaje\n\n#### 3. **Profesor/Empleado**\n- **Acceso**: Solo sus datos personales\n- **Capacidades**:\n  - Ver su horario (sin modificar)\n  - Marcar entrada/salida\n  - Solicitar ausencias\n  - Ver sus registros de asistencia\n  - Generar informes personales\n  - Ver alertas que le afecten\n\n## Nuevos Roles Propuestos\n\n### 4. **Coordinador Pedagógico**\n- **Descripción**: Intermedio entre administrador y profesor\n- **Capacidades**:\n  - Ver horarios de su departamento/área\n  - Gestionar sustituciones temporales\n  - Aprobar ausencias de corta duración\n  - Generar informes departamentales\n  - Coordinar actividades específicas\n\n### 5. **Supervisor de Asistencia**\n- **Descripción**: Especializado en control de presencia\n- **Capacidades**:\n  - Monitorear asistencia en tiempo real\n  - Gestionar alertas de retardos/ausencias\n  - Generar informes de compliance\n  - Configurar umbrales de alerta\n  - Acceso a datos históricos de asistencia\n\n### 6. **Secretario/a Académico**\n- **Descripción**: Apoyo administrativo\n- **Capacidades**:\n  - Gestión de documentación\n  - Procesamiento de justificantes médicos\n  - Comunicación con empleados\n  - Gestión de calendario institucional\n  - Soporte en procesos administrativos\n\n### 7. **Auditor Externo** (Solo lectura)\n- **Descripción**: Para inspecciones de trabajo\n- **Capacidades**:\n  - Acceso de solo lectura a registros\n  - Generar informes de compliance\n  - Verificar cumplimiento legal\n  - Acceso temporal y restringido\n\n## Mejoras Funcionales Propuestas\n\n### 1. **Sistema de Workflow de Ausencias**\n- Flujo de aprobación multinivel\n- Notificaciones automáticas\n- Integración con calendario\n- Gestión de sustitutos automática\n\n### 2. **Dashboard Personalizado por Rol**\n- Widgets específicos según permisos\n- KPIs relevantes para cada rol\n- Alertas personalizadas\n- Acceso rápido a funciones frecuentes\n\n### 3. **Sistema de Notificaciones Avanzado**\n- Notificaciones push en tiempo real\n- Alertas por email configurables\n- SMS para situaciones críticas\n- Escalado automático de alertas\n\n### 4. **Módulo de Planificación Avanzada**\n- Predicción de necesidades de personal\n- Optimización automática de horarios\n- Gestión de guardias y turnos especiales\n- Planificación de actividades extraordinarias\n\n### 5. **Sistema de Geolocalización**\n- Verificación de ubicación en marcajes\n- Mapas de calor de asistencia\n- Control de marcajes remotos\n- Alertas por ubicación anómala\n\n### 6. **Módulo de Recursos Humanos**\n- Gestión de contratos\n- Seguimiento de formación\n- Evaluación de desempeño\n- Gestión de vacaciones\n\n### 7. **Sistema de Comunicación Interna**\n- Chat interno por roles\n- Tablón de anuncios\n- Gestión de documentos\n- Mensajería directa\n\n### 8. **Módulo de Compliance Avanzado**\n- Verificación automática de normativas\n- Generación de reportes legales\n- Alertas de incumplimiento\n- Exportación para auditorías\n\n### 9. **Sistema de Backup y Recuperación**\n- Copias de seguridad automáticas\n- Recuperación point-in-time\n- Replicación de datos\n- Plan de continuidad de negocio\n\n### 10. **API Externa y Integraciones**\n- Integración con sistemas de nómina\n- Conectores con software educativo\n- APIs para aplicaciones móviles\n- Webhooks para sistemas externos\n\n## Características Técnicas Adicionales\n\n### 1. **Modo Offline**\n- Funcionalidad básica sin conexión\n- Sincronización automática\n- Almacenamiento local seguro\n\n### 2. **Aplicación Móvil Nativa**\n- App iOS/Android\n- Marcaje por biometría\n- Notificaciones push\n- Funcionalidad offline\n\n### 3. **Reconocimiento Biométrico**\n- Huella dactilar\n- Reconocimiento facial\n- Códigos QR personalizados\n- Integración con dispositivos hardware\n\n### 4. **Análisis Predictivo**\n- Machine Learning para patrones\n- Predicción de ausencias\n- Optimización de recursos\n- Detección de anomalías\n\n### 5. **Multi-tenancy Avanzado**\n- Aislamiento total de datos\n- Configuraciones personalizadas\n- Branded interface por institución\n- Facturación por uso\n\n## Beneficios de las Mejoras\n\n### Para Instituciones Educativas\n- Mayor control y visibilidad\n- Cumplimiento legal automatizado\n- Reducción de costos administrativos\n- Mejora en la planificación\n\n### Para Empleados\n- Proceso más transparente\n- Autoservicio para gestiones\n- Comunicación mejorada\n- Acceso móvil conveniente\n\n### Para Administradores\n- Herramientas de gestión avanzadas\n- Informes automáticos\n- Reducción de tareas manuales\n- Mejor toma de decisiones\n\n## Implementación por Fases\n\n### Fase 1: Roles Básicos (Completado)\n- Sistema RBAC básico\n- Tres roles principales\n- Restricciones por pantalla\n\n### Fase 2: Roles Avanzados\n- Implementar nuevos roles propuestos\n- Workflows de aprobación\n- Notificaciones avanzadas\n\n### Fase 3: Características Técnicas\n- Aplicación móvil\n- Geolocalización\n- API externa\n\n### Fase 4: Análisis Avanzado\n- Machine Learning\n- Análisis predictivo\n- Dashboards avanzados\n\nEsta propuesta convierte EduPresència en una solución integral para la gestión de personal en centros educativos, cumpliendo con todas las normativas y proporcionando valor añadido significativo.","size_bytes":5985},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"## Overview\nfich.ai is an attendance tracking and presence management system for educational institutions in Catalonia. It ensures compliance with Spanish labor laws and GDPR by providing features for employee management, attendance tracking, absence management, alerts, and detailed reporting, all while maintaining data privacy and security. The system aims to streamline administrative tasks and provide essential tools for managing educational staff attendance efficiently.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Full-Stack Monorepo Structure\nThe application uses a monorepo architecture, separating client and server code:\n- **Client**: React with TypeScript and Vite.\n- **Server**: Express.js with TypeScript.\n- **Shared**: Common schema definitions and types.\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript.\n- **Routing**: Wouter.\n- **State Management**: Zustand (global state) and TanStack Query (server state).\n- **UI Framework**: Shadcn/ui components built on Radix UI.\n- **Styling**: Tailwind CSS with custom design tokens and dark mode.\n- **Internationalization**: Custom i18n system for Catalan and Spanish.\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js.\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect.\n- **Authentication**: Email/password authentication using bcrypt hashing.\n- **Session Management**: Express sessions with PostgreSQL storage using `connect-pg-simple`.\n- **API Design**: RESTful endpoints with JSON responses.\n\n### Database Design\n- **Primary Database**: PostgreSQL using Neon serverless.\n- **Schema Management**: Drizzle Kit for migrations.\n- **Key Entities**: Users, Institutions, Employees, Departments, Schedules, Attendance Records, Absences, Alerts, and Settings.\n- **Session Storage**: Dedicated sessions table.\n\n### Authentication & Authorization\n- **Authentication Provider**: Email/password authentication.\n- **Session Management**: Passport.js with PostgreSQL session storage.\n- **Security**: HTTP-only secure cookies.\n- **Role-Based Access Control (RBAC)**: Granular permission system with Superadmin, Admin, and Employee roles.\n- **Protected Routes**: Both client-side and server-side protection.\n- **UI Adaptation**: Components and navigation adapt based on user permissions.\n\n### Key Features and Implementations\n- **Role-Based Access Control (RBAC)**: Comprehensive permission system, protecting routes, adapting navigation and UI components.\n- **Quick Attendance System**: Direct login screen attendance marking.\n- **Smart Work Cycle Management**: Automatic check-in/check-out detection.\n- **QR Attendance System (Compliant)**: Unipersonal QR code system complying with Spanish labor regulations, with public access page, automatic check-in/check-out detection, individual QR code generation for printing, late arrival tracking, and daily QR regeneration for regulatory compliance (QR codes expire daily and must be regenerated).\n- **Academic Data Migration System**: Complete data migration between academic years with progress tracking, error handling, and rollback capabilities.\n- **GP Untis Data Import System**: Comprehensive import for teachers, subjects, groups, and schedules from TXT files, including multi-file import with progress tracking.\n- **Teacher-User Relationship Management**: Automatic linking between GP Untis teacher codes and system users.\n- **GDPR Compliance System**: Privacy policy, data subject rights, digitally signed PDF exports, secure data downloads, and a GDPR ticket system.\n- **Risk Assessment Dashboard**: Teacher risk monitoring with color-coded levels and empathetic notification templates.\n- **Email Configuration Panel**: SMTP setup, email template management, and testing capabilities.\n- **Enhanced Administrative Features**: CSV/Excel import for employees, advanced filtering, bulk operations, custom alerts, advanced report generation, weekly schedule view with real data, absence justification workflow, and automated legal alerts.\n- **Complete Catalan Localization**: Full interface translation to Catalan with proper linguistic adaptation.\n- **Accessibility**: Improved dialog accessibility and comprehensive modal contrast improvements.\n- **UI/UX Enhancements**: Complete modal dialog contrast improvements across all components (Dialog, AlertDialog, Sheet, Drawer, Popover, Tooltip, HoverCard, Select, ContextMenu, DropdownMenu), enhanced mobile menu visibility with solid backgrounds, and improved overlay opacity for better visual hierarchy.\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: PostgreSQL database connectivity.\n- **drizzle-orm**: Type-safe ORM for PostgreSQL.\n- **@tanstack/react-query**: Server state management and caching for React.\n\n### UI Component Libraries\n- **@radix-ui/react-***: Accessible UI primitives.\n- **class-variance-authority**: For type-safe component variants.\n- **tailwindcss**: Utility-first CSS framework.\n\n### Authentication & Session Management\n- **openid-client**: OpenID Connect client (for Replit Auth, though now using email/password).\n- **passport**: Authentication middleware.\n- **connect-pg-simple**: PostgreSQL session store.\n\n### Development Tools\n- **vite**: Fast build tool and development server.\n- **typescript**: Static type checking.\n- **@replit/vite-plugin-runtime-error-modal**: Development-time error overlay.\n\n### Date & Utility Libraries\n- **date-fns**: Date manipulation and formatting.\n- **zod**: TypeScript-first schema validation.\n- **clsx**: Utility for conditionally constructing className strings.\n\n### Form Handling\n- **react-hook-form**: Performant forms library.\n- **@hookform/resolvers**: Validation resolvers for react-hook-form.","size_bytes":5759},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/create_database_1754032481626.py":{"content":"\"\"\"\nScript per crear la base de dades SQLite a partir de l'esquema definint les\ntaules i les relacions. Aquest script es pot executar a Replit o qualsevol\nentorn Python amb sqlite3 instal·lat.\n\nExecuta'l així:\n    python create_database.py\n\nEs crearà un fitxer 'database.db' i les taules definides a 'db_schema.sql'.\n\"\"\"\n\nimport sqlite3\nfrom pathlib import Path\n\nSCHEMA_PATH = Path(__file__).resolve().parent / \"db_schema.sql\"\nDB_PATH = Path(__file__).resolve().parent / \"database.db\"\n\n\ndef create_db():\n    schema_sql = SCHEMA_PATH.read_text(encoding=\"utf-8\")\n    conn = sqlite3.connect(DB_PATH)\n    try:\n        conn.executescript(schema_sql)\n        conn.commit()\n        print(f\"S'ha creat la base de dades a {DB_PATH} amb l'esquema definit.\")\n    finally:\n        conn.close()\n\n\nif __name__ == \"__main__\":\n    create_db()","size_bytes":829},"attached_assets/email_sender_1754032481624.py":{"content":"\"\"\"\nMòdul per enviar correus electrònics mitjançant Gmail.\n\nAquest mòdul utilitza les variables d'entorn següents:\n    EMAIL_USER: adreça de correu de l'emissor (p. ex. compte Gmail)\n    EMAIL_PASSWORD: contrasenya o token d'aplicació de Gmail\n    SMTP_SERVER: servidor SMTP (per defecte 'smtp.gmail.com')\n    SMTP_PORT: port SMTP (per defecte 587)\n\nPer seguretat, les credencials s'haurien de configurar a Replit utilitzant la\nsecció de Secrets (Environment Variables) i no s'han d'incloure en codi.\n\nExemple d'ús:\n    from email_sender import send_email\n    send_email(\"usuari@example.com\", \"Assumpte\", \"Cos del missatge\")\n\"\"\"\n\nimport os\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\n\ndef send_email(to_address: str, subject: str, message_body: str) -> None:\n    \"\"\"Envia un correu electrònic a l'adreça especificada.\n\n    Args:\n        to_address (str): destinatari del correu.\n        subject (str): assumpte del correu.\n        message_body (str): contingut del missatge.\n\n    Raises:\n        ValueError: si les credencials no estan configurades.\n    \"\"\"\n    user = os.environ.get(\"EMAIL_USER\")\n    password = os.environ.get(\"EMAIL_PASSWORD\")\n    smtp_server = os.environ.get(\"SMTP_SERVER\", \"smtp.gmail.com\")\n    smtp_port = int(os.environ.get(\"SMTP_PORT\", 587))\n\n    if not user or not password:\n        raise ValueError(\n            \"Les variables d'entorn EMAIL_USER i EMAIL_PASSWORD no estan configurades.\"\n        )\n\n    # Construir el missatge MIME\n    msg = MIMEMultipart()\n    msg[\"From\"] = user\n    msg[\"To\"] = to_address\n    msg[\"Subject\"] = subject\n\n    msg.attach(MIMEText(message_body, \"plain\"))\n\n    # Enviament mitjançant SMTP amb TLS\n    with smtplib.SMTP(smtp_server, smtp_port) as server:\n        server.starttls()\n        server.login(user, password)\n        server.sendmail(user, to_address, msg.as_string())\n\n    print(f\"Correu enviat correctament a {to_address}\")","size_bytes":1956},"scripts/create-admin-users.ts":{"content":"import bcrypt from \"bcrypt\";\nimport { db } from \"../server/db\";\nimport { users, institutions } from \"../shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nasync function createAdminUsers() {\n  console.log(\"🔐 Creating admin users...\");\n\n  try {\n    // Get Institut Bitàcola\n    const [institution] = await db.select().from(institutions).where(eq(institutions.name, \"Institut Bitàcola\"));\n    \n    if (!institution) {\n      console.error(\"❌ Institut Bitàcola not found. Please run seeding first.\");\n      return;\n    }\n\n    // Create superadmin user\n    const superAdminPassword = await bcrypt.hash(\"admin123\", 10);\n    const [superAdmin] = await db.insert(users).values({\n      id: crypto.randomUUID(),\n      email: \"admin@bitacola.edu\",\n      firstName: \"Super\",\n      lastName: \"Admin\",\n      passwordHash: superAdminPassword,\n      role: \"superadmin\",\n      institutionId: institution.id\n    }).onConflictDoUpdate({\n      target: users.email,\n      set: {\n        passwordHash: superAdminPassword,\n        role: \"superadmin\",\n        updatedAt: new Date()\n      }\n    }).returning();\n\n    // Create admin user\n    const adminPassword = await bcrypt.hash(\"admin123\", 10);\n    const [admin] = await db.insert(users).values({\n      id: crypto.randomUUID(),\n      email: \"director@bitacola.edu\",\n      firstName: \"Maria\",\n      lastName: \"Director\",\n      passwordHash: adminPassword,\n      role: \"admin\", \n      institutionId: institution.id\n    }).onConflictDoUpdate({\n      target: users.email,\n      set: {\n        passwordHash: adminPassword,\n        role: \"admin\",\n        updatedAt: new Date()\n      }\n    }).returning();\n\n    // Create employee user  \n    const employeePassword = await bcrypt.hash(\"employee123\", 10);\n    const [employee] = await db.insert(users).values({\n      id: crypto.randomUUID(),\n      email: \"profesor@bitacola.edu\",\n      firstName: \"Joan\",\n      lastName: \"Professor\",\n      passwordHash: employeePassword,\n      role: \"employee\",\n      institutionId: institution.id\n    }).onConflictDoUpdate({\n      target: users.email,\n      set: {\n        passwordHash: employeePassword,\n        role: \"employee\", \n        updatedAt: new Date()\n      }\n    }).returning();\n\n    console.log(\"✅ Admin users created successfully:\");\n    console.log(`\n🔑 LOGIN CREDENTIALS:\n\n👑 SUPERADMIN:\n   Email: admin@bitacola.edu\n   Password: admin123\n   \n👔 ADMIN (Director):\n   Email: director@bitacola.edu\n   Password: admin123\n   \n👨‍🏫 EMPLOYEE (Professor):\n   Email: profesor@bitacola.edu  \n   Password: employee123\n\n🎯 Use these credentials to test the authentication system!\n    `);\n\n  } catch (error) {\n    console.error(\"❌ Error creating admin users:\", error);\n  }\n}\n\n// Run the script\ncreateAdminUsers();","size_bytes":2747},"scripts/seed-database.ts":{"content":"#!/usr/bin/env tsx\n\n// Database seeding script for Institut Bitàcola\n// Usage: npm run seed or tsx scripts/seed-database.ts\n\nimport { seedDatabase, clearTestData } from \"../server/seed\";\n\nasync function main() {\n  const shouldClear = process.argv.includes(\"--clear\");\n  \n  try {\n    if (shouldClear) {\n      await clearTestData();\n    }\n    \n    await seedDatabase();\n    \n    console.log(\"\\n🎯 Database seeding summary:\");\n    console.log(\"- Institution: Institut Bitàcola created\");\n    console.log(\"- Academic Year: 2025-2026 active\");\n    console.log(\"- 20 realistic teachers with Catalan names\");\n    console.log(\"- 13 departments covering all subjects\");\n    console.log(\"- Realistic schedules and settings configured\");\n    console.log(\"- Ready for production testing!\");\n    \n  } catch (error) {\n    console.error(\"Failed to seed database:\", error);\n    process.exit(1);\n  }\n}\n\nmain();","size_bytes":897},"server/auth.ts":{"content":"import bcrypt from \"bcrypt\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to true in production with HTTPS\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Local Strategy for email/password authentication\n  passport.use(new LocalStrategy(\n    {\n      usernameField: 'email',\n      passwordField: 'password'\n    },\n    async (email, password, done) => {\n      try {\n        const user = await storage.getUserByEmail(email);\n        if (!user) {\n          return done(null, false, { message: 'Email no registrat' });\n        }\n\n        const isValid = await bcrypt.compare(password, user.passwordHash || '');\n        if (!isValid) {\n          return done(null, false, { message: 'Contrasenya incorrecta' });\n        }\n\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }\n  ));\n\n  passport.serializeUser((user: any, cb) => cb(null, user.id));\n  passport.deserializeUser(async (id: string, cb) => {\n    try {\n      const user = await storage.getUser(id);\n      if (!user) {\n        return cb(null, false);\n      }\n      cb(null, user);\n    } catch (error) {\n      console.error(\"Deserialize error:\", error);\n      cb(null, false);\n    }\n  });\n\n  // Login route\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.json({ user: req.user, message: \"Login exitós\" });\n  });\n\n  // Register route\n  app.post(\"/api/register\", async (req, res) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"L'email ja està registrat\" });\n      }\n\n      // Hash password\n      const passwordHash = await bcrypt.hash(password, 10);\n\n      // Create user\n      const newUser = await storage.upsertUser({\n        id: globalThis.crypto.randomUUID(),\n        email,\n        firstName,\n        lastName,\n        passwordHash,\n        role: \"employee\" // Default role\n      });\n\n      // Log the user in\n      req.login(newUser, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Error en el login automàtic\" });\n        }\n        res.json({ user: newUser, message: \"Registre exitós\" });\n      });\n    } catch (error) {\n      console.error(\"Error in registration:\", error);\n      res.status(500).json({ message: \"Error en el registre\" });\n    }\n  });\n\n  // Logout routes (both GET and POST for compatibility)\n  const logoutHandler = (req: any, res: any) => {\n    req.logout((err: any) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        return res.status(500).json({ message: \"Error en el logout\" });\n      }\n      \n      // Destroy session completely\n      req.session.destroy((destroyErr: any) => {\n        if (destroyErr) {\n          console.error(\"Session destroy error:\", destroyErr);\n        }\n        \n        // Clear the session cookie\n        res.clearCookie('connect.sid');\n        \n        // Send response based on request type\n        if (req.method === 'GET') {\n          res.redirect('/');\n        } else {\n          res.json({ message: \"Logout exitós\" });\n        }\n      });\n    });\n  };\n\n  app.post(\"/api/logout\", logoutHandler);\n  app.get(\"/api/logout\", logoutHandler);\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  console.log('AUTH_DEBUG: Checking authentication for', req.method, req.url);\n  console.log('AUTH_DEBUG: Session ID:', req.sessionID);\n  console.log('AUTH_DEBUG: User object:', req.user);\n  console.log('AUTH_DEBUG: isAuthenticated():', req.isAuthenticated());\n  \n  if (req.isAuthenticated()) {\n    console.log('AUTH_DEBUG: Authentication successful');\n    return next();\n  }\n  \n  console.log('AUTH_DEBUG: Authentication failed');\n  res.status(401).json({ message: \"Unauthorized\" });\n};","size_bytes":4739},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/logger.ts":{"content":"import fs from 'fs';\nimport path from 'path';\n\nexport enum LogLevel {\n  ERROR = 'ERROR',\n  WARN = 'WARN',\n  INFO = 'INFO',\n  DEBUG = 'DEBUG'\n}\n\ninterface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  component: string;\n  message: string;\n  data?: any;\n  error?: Error;\n}\n\nclass Logger {\n  private logFile: string;\n  private isProduction = process.env.NODE_ENV === 'production';\n\n  constructor() {\n    // Create logs directory if it doesn't exist\n    const logsDir = path.join(process.cwd(), 'logs');\n    if (!fs.existsSync(logsDir)) {\n      fs.mkdirSync(logsDir, { recursive: true });\n    }\n    \n    // Create log file with date\n    const date = new Date().toISOString().split('T')[0];\n    this.logFile = path.join(logsDir, `app-${date}.log`);\n  }\n\n  private formatLogEntry(entry: LogEntry): string {\n    const { timestamp, level, component, message, data, error } = entry;\n    let logLine = `[${timestamp}] ${level} [${component}] ${message}`;\n    \n    if (data) {\n      logLine += ` | Data: ${JSON.stringify(data)}`;\n    }\n    \n    if (error) {\n      logLine += ` | Error: ${error.message}`;\n      if (error.stack) {\n        logLine += ` | Stack: ${error.stack}`;\n      }\n    }\n    \n    return logLine;\n  }\n\n  private writeToFile(logEntry: LogEntry) {\n    try {\n      const logLine = this.formatLogEntry(logEntry) + '\\n';\n      fs.appendFileSync(this.logFile, logLine);\n    } catch (error) {\n      console.error('Failed to write to log file:', error);\n    }\n  }\n\n  private log(level: LogLevel, component: string, message: string, data?: any, error?: Error) {\n    const timestamp = new Date().toISOString();\n    const logEntry: LogEntry = {\n      timestamp,\n      level,\n      component,\n      message,\n      data,\n      error\n    };\n\n    // Always log to console in development\n    if (!this.isProduction) {\n      const consoleMessage = this.formatLogEntry(logEntry);\n      switch (level) {\n        case LogLevel.ERROR:\n          console.error(consoleMessage);\n          break;\n        case LogLevel.WARN:\n          console.warn(consoleMessage);\n          break;\n        case LogLevel.INFO:\n          console.info(consoleMessage);\n          break;\n        case LogLevel.DEBUG:\n          console.debug(consoleMessage);\n          break;\n      }\n    }\n\n    // Write to file\n    this.writeToFile(logEntry);\n  }\n\n  error(component: string, message: string, error?: Error, data?: any) {\n    this.log(LogLevel.ERROR, component, message, data, error);\n  }\n\n  warn(component: string, message: string, data?: any) {\n    this.log(LogLevel.WARN, component, message, data);\n  }\n\n  info(component: string, message: string, data?: any) {\n    this.log(LogLevel.INFO, component, message, data);\n  }\n\n  debug(component: string, message: string, data?: any) {\n    this.log(LogLevel.DEBUG, component, message, data);\n  }\n\n  // Database operations logging\n  dbQuery(operation: string, table: string, data?: any) {\n    this.debug('DATABASE', `${operation} on ${table}`, data);\n  }\n\n  dbError(operation: string, table: string, error: Error, data?: any) {\n    this.error('DATABASE', `${operation} failed on ${table}`, error, data);\n  }\n\n  // API operations logging\n  apiRequest(method: string, endpoint: string, userId?: string, data?: any) {\n    this.info('API', `${method} ${endpoint}${userId ? ` | User: ${userId}` : ''}`, data);\n  }\n\n  apiError(method: string, endpoint: string, error: Error, userId?: string, data?: any) {\n    this.error('API', `${method} ${endpoint}${userId ? ` | User: ${userId}` : ''}`, error, data);\n  }\n\n  // Email operations logging\n  emailSent(to: string, subject: string, type: string = 'general') {\n    this.info('EMAIL', `Email sent to ${to} | Subject: ${subject} | Type: ${type}`);\n  }\n\n  emailError(to: string, subject: string, error: Error, type: string = 'general') {\n    this.error('EMAIL', `Failed to send email to ${to} | Subject: ${subject} | Type: ${type}`, error);\n  }\n\n  // Schedule import logging\n  scheduleImport(operation: string, details: string, data?: any) {\n    this.info('SCHEDULE_IMPORT', `${operation}: ${details}`, data);\n  }\n\n  scheduleImportError(operation: string, error: Error, data?: any) {\n    this.error('SCHEDULE_IMPORT', `${operation} failed`, error, data);\n  }\n\n  // Attendance logging\n  attendance(action: string, employeeId: string, details?: string) {\n    this.info('ATTENDANCE', `${action} for employee ${employeeId}${details ? ` | ${details}` : ''}`);\n  }\n\n  attendanceError(action: string, employeeId: string, error: Error) {\n    this.error('ATTENDANCE', `${action} failed for employee ${employeeId}`, error);\n  }\n}\n\n// Export singleton instance\nexport const logger = new Logger();\n\n// Export helper function for easy access\nexport function log() {\n  return logger;\n}","size_bytes":4722},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport { \n  insertEmployeeSchema,\n  insertAttendanceRecordSchema,\n  insertAbsenceSchema,\n  insertSettingSchema,\n  insertCommunicationSchema,\n  smtpConfigurations\n} from \"@shared/schema\";\nimport nodemailer from \"nodemailer\";\nimport { eq, and, gte, lte, desc, asc, or, sql, count, ne, isNull, inArray } from \"drizzle-orm\";\nimport { z } from \"zod\";\nimport { db } from \"./db\";\nimport { startOfWeek, endOfWeek, addDays, format } from \"date-fns\";\nimport bcrypt from \"bcrypt\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get('/api/dashboard/stats/:institutionId', isAuthenticated, async (req, res) => {\n    try {\n      const { institutionId } = req.params;\n      const stats = await storage.getDashboardStats(institutionId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Recent activity endpoint with role-based filtering\n  app.get('/api/dashboard/recent-activity/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userId = req.user.id;\n      const userRole = req.user.role;\n      const limit = parseInt(req.query.limit as string) || 20;\n\n      console.log('RECENT_ACTIVITY: Fetching for institution:', institutionId, 'user:', userId, 'role:', userRole);\n\n      let activities = [];\n\n      // Get recent communications\n      const commQuery = userRole === 'employee' \n        ? sql`\n          SELECT \n            c.id,\n            'communication' as type,\n            CASE \n              WHEN c.sender_id = ${userId} THEN 'sent'\n              ELSE 'received'\n            END as action,\n            c.subject as title,\n            SUBSTRING(c.message, 1, 100) as description,\n            c.created_at as \"timestamp\",\n            COALESCE(u1.first_name, 'Sistema') as \"relatedUserName\",\n            COALESCE(u1.email, 'sistema@centre.edu') as \"relatedUserEmail\",\n            c.priority,\n            c.status\n          FROM communications c\n          LEFT JOIN users u1 ON c.sender_id = u1.id\n          WHERE (c.sender_id = ${userId} OR c.recipient_id = ${userId})\n            AND c.deleted_by_user_at IS NULL\n          ORDER BY c.created_at DESC\n          LIMIT ${Math.floor(limit/2)}\n        `\n        : sql`\n          SELECT \n            c.id,\n            'communication' as type,\n            CASE \n              WHEN c.sender_id = ${userId} THEN 'sent'\n              ELSE 'received'  \n            END as action,\n            c.subject as title,\n            SUBSTRING(c.message, 1, 100) as description,\n            c.created_at as \"timestamp\",\n            COALESCE(u1.first_name, 'Sistema') || ' ' || COALESCE(u1.last_name, '') as \"relatedUserName\",\n            COALESCE(u1.email, 'sistema@centre.edu') as \"relatedUserEmail\",\n            c.priority,\n            c.status\n          FROM communications c\n          LEFT JOIN users u1 ON c.sender_id = u1.id\n          LEFT JOIN users u2 ON c.recipient_id = u2.id\n          WHERE c.institution_id = ${institutionId}\n            AND c.deleted_by_user_at IS NULL\n          ORDER BY c.created_at DESC\n          LIMIT ${Math.floor(limit/2)}\n        `;\n\n      const commResult = await db.execute(commQuery);\n      activities.push(...commResult.rows);\n\n      // Get recent attendance records\n      const attendanceQuery = userRole === 'employee'\n        ? sql`\n          SELECT \n            a.id,\n            'attendance' as type,\n            CASE \n              WHEN a.type = 'check_in' THEN 'check-in'\n              ELSE 'check-out'\n            END as action,\n            'Fitxatge ' || CASE WHEN a.type = 'check_in' THEN 'entrada' ELSE 'sortida' END as title,\n            'Registrat a les ' || TO_CHAR(a.timestamp AT TIME ZONE 'Europe/Madrid', 'HH24:MI') as description,\n            a.timestamp,\n            COALESCE(u.first_name, '') || ' ' || COALESCE(u.last_name, '') as \"relatedUserName\",\n            COALESCE(u.email, '') as \"relatedUserEmail\",\n            'medium' as priority,\n            'completed' as status\n          FROM attendance_records a\n          LEFT JOIN employees e ON a.employee_id = e.id\n          LEFT JOIN users u ON e.user_id = u.id\n          WHERE e.user_id = ${userId}\n          ORDER BY a.timestamp DESC\n          LIMIT ${Math.floor(limit/2)}\n        `\n        : sql`\n          SELECT \n            a.id,\n            'attendance' as type,\n            CASE \n              WHEN a.type = 'check_in' THEN 'check-in'\n              ELSE 'check-out'  \n            END as action,\n            COALESCE(u.first_name, '') || ' - Fitxatge ' || \n            CASE WHEN a.type = 'check_in' THEN 'entrada' ELSE 'sortida' END as title,\n            'Registrat a les ' || TO_CHAR(a.timestamp AT TIME ZONE 'Europe/Madrid', 'HH24:MI') as description,\n            a.timestamp,\n            COALESCE(u.first_name, '') || ' ' || COALESCE(u.last_name, '') as \"relatedUserName\",\n            COALESCE(u.email, '') as \"relatedUserEmail\",\n            'medium' as priority,\n            'completed' as status\n          FROM attendance_records a\n          LEFT JOIN users u ON a.employee_id = u.id\n          WHERE u.institution_id = ${institutionId}\n          ORDER BY a.timestamp DESC\n          LIMIT ${Math.floor(limit/2)}\n        `;\n\n      const attendanceResult = await db.execute(attendanceQuery);\n      activities.push(...attendanceResult.rows);\n\n      // Sort all activities by timestamp  \n      activities.sort((a: any, b: any) => new Date(b.timestamp as string).getTime() - new Date(a.timestamp as string).getTime());\n      activities = activities.slice(0, limit);\n\n      console.log('RECENT_ACTIVITY: Found', activities.length, 'activities');\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching recent activity:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent activity\" });\n    }\n  });\n\n  // Weekly attendance stats endpoint\n  app.get('/api/dashboard/weekly-stats/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userId = req.user.id;\n      const userRole = req.user.role;\n\n      console.log('WEEKLY_STATS: Fetching for institution:', institutionId, 'user:', userId, 'role:', userRole);\n\n      // Get current week dates (Monday to Friday)\n      const now = new Date();\n      const currentDay = now.getDay();\n      const daysFromMonday = currentDay === 0 ? 6 : currentDay - 1; // Sunday = 0, adjust to Monday = 0\n      const monday = new Date(now);\n      monday.setDate(now.getDate() - daysFromMonday);\n      monday.setHours(0, 0, 0, 0);\n      \n      const friday = new Date(monday);\n      friday.setDate(monday.getDate() + 4);\n      friday.setHours(23, 59, 59, 999);\n\n      console.log('WEEKLY_STATS: Week range from', monday.toISOString(), 'to', friday.toISOString());\n\n      let weeklyStats = {};\n\n      if (userRole === 'employee') {\n        // Personal weekly stats\n        const result = await db.execute(sql`\n          SELECT \n            DATE(a.timestamp AT TIME ZONE 'Europe/Madrid') as day,\n            COUNT(CASE WHEN a.type = 'check_in' THEN 1 END) as check_ins,\n            COUNT(CASE WHEN a.type = 'check_out' THEN 1 END) as check_outs,\n            MIN(CASE WHEN a.type = 'check_in' THEN a.timestamp END) as first_check_in,\n            MAX(CASE WHEN a.type = 'check_out' THEN a.timestamp END) as last_check_out,\n            EXTRACT(EPOCH FROM (\n              MAX(CASE WHEN a.type = 'check_out' THEN a.timestamp END) - \n              MIN(CASE WHEN a.type = 'check_in' THEN a.timestamp END)\n            ))/3600 as hours_worked\n          FROM attendance_records a\n          LEFT JOIN employees e ON a.employee_id = e.id\n          WHERE e.user_id = ${userId}\n            AND a.timestamp >= ${monday.toISOString()}\n            AND a.timestamp <= ${friday.toISOString()}\n          GROUP BY DATE(a.timestamp AT TIME ZONE 'Europe/Madrid')\n          ORDER BY day\n        `);\n\n        weeklyStats = {\n          personalStats: result.rows,\n          totalHours: result.rows.reduce((sum: number, day: any) => sum + (day.hours_worked || 0), 0),\n          daysPresent: result.rows.filter((day: any) => day.check_ins > 0).length,\n          averageHoursPerDay: result.rows.length > 0 ? \n            result.rows.reduce((sum: number, day: any) => sum + (day.hours_worked || 0), 0) / result.rows.length : 0\n        };\n      } else {\n        // Institution-wide weekly stats for admin/director\n        const employeeStatsResult = await db.execute(sql`\n          SELECT \n            u.id as user_id,\n            u.first_name || ' ' || COALESCE(u.last_name, '') as name,\n            u.email,\n            DATE(ar.timestamp AT TIME ZONE 'Europe/Madrid') as day,\n            COUNT(CASE WHEN ar.type = 'check_in' THEN 1 END) as check_ins,\n            COUNT(CASE WHEN ar.type = 'check_out' THEN 1 END) as check_outs,\n            MIN(CASE WHEN ar.type = 'check_in' THEN ar.timestamp END) as first_check_in,\n            MAX(CASE WHEN ar.type = 'check_out' THEN ar.timestamp END) as last_check_out,\n            EXTRACT(EPOCH FROM (\n              MAX(CASE WHEN ar.type = 'check_out' THEN ar.timestamp END) - \n              MIN(CASE WHEN ar.type = 'check_in' THEN ar.timestamp END)\n            ))/3600 as hours_worked\n          FROM users u\n          LEFT JOIN attendance_records ar ON u.id = ar.employee_id \n            AND ar.timestamp >= ${monday.toISOString()}\n            AND ar.timestamp <= ${friday.toISOString()}\n          WHERE u.institution_id = ${institutionId} AND u.role = 'employee'\n          GROUP BY u.id, u.first_name, u.last_name, u.email, DATE(ar.timestamp AT TIME ZONE 'Europe/Madrid')\n          ORDER BY u.first_name, day\n        `);\n\n        const summaryResult = await db.execute(sql`\n          SELECT \n            COUNT(DISTINCT u.id) as total_employees,\n            COUNT(DISTINCT CASE WHEN day_stats.employee_id IS NOT NULL THEN u.id END) as employees_with_records,\n            AVG(CASE WHEN day_stats.hours_worked > 0 THEN day_stats.hours_worked END) as avg_daily_hours,\n            SUM(day_stats.hours_worked) as total_hours_all_employees\n          FROM users u\n          LEFT JOIN (\n            SELECT \n              ar.employee_id,\n              DATE(ar.timestamp AT TIME ZONE 'Europe/Madrid') as day,\n              EXTRACT(EPOCH FROM (\n                MAX(CASE WHEN ar.type = 'check_out' THEN ar.timestamp END) - \n                MIN(CASE WHEN ar.type = 'check_in' THEN ar.timestamp END)\n              ))/3600 as hours_worked\n            FROM attendance_records ar\n            WHERE ar.timestamp >= ${monday.toISOString()}\n              AND ar.timestamp <= ${friday.toISOString()}\n            GROUP BY ar.employee_id, DATE(ar.timestamp AT TIME ZONE 'Europe/Madrid')\n          ) day_stats ON u.id = day_stats.employee_id\n          WHERE u.institution_id = ${institutionId} AND u.role = 'employee'\n        `);\n\n        weeklyStats = {\n          employeeStats: employeeStatsResult.rows,\n          summary: summaryResult.rows[0],\n          weekRange: {\n            start: monday.toISOString(),\n            end: friday.toISOString()\n          }\n        };\n      }\n\n      console.log('WEEKLY_STATS: Returning stats with', Object.keys(weeklyStats).length, 'main keys');\n      res.json(weeklyStats);\n    } catch (error) {\n      console.error(\"Error fetching weekly stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch weekly stats\" });\n    }\n  });\n\n  // Institution management routes\n  app.get('/api/institutions', isAuthenticated, async (req, res) => {\n    try {\n      const institutions = await storage.getInstitutions();\n      res.json(institutions);\n    } catch (error) {\n      console.error(\"Error fetching institutions:\", error);\n      res.status(500).json({ message: \"Failed to fetch institutions\" });\n    }\n  });\n\n  app.post('/api/institutions', isAuthenticated, async (req, res) => {\n    try {\n      const institution = await storage.createInstitution(req.body);\n      res.json(institution);\n    } catch (error) {\n      console.error(\"Error creating institution:\", error);\n      res.status(500).json({ message: \"Failed to create institution\" });\n    }\n  });\n\n  // Academic years routes\n  app.get('/api/academic-years/:institutionId', isAuthenticated, async (req, res) => {\n    try {\n      const { institutionId } = req.params;\n      const academicYears = await storage.getAcademicYears(institutionId);\n      res.json(academicYears);\n    } catch (error) {\n      console.error(\"Error fetching academic years:\", error);\n      res.status(500).json({ message: \"Failed to fetch academic years\" });\n    }\n  });\n\n  app.post('/api/academic-years', isAuthenticated, async (req, res) => {\n    try {\n      const academicYear = await storage.createAcademicYear(req.body);\n      res.json(academicYear);\n    } catch (error) {\n      console.error(\"Error creating academic year:\", error);\n      res.status(500).json({ message: \"Failed to create academic year\" });\n    }\n  });\n\n  // Communications routes - FIXED VERSION with role-based access\n  app.get('/api/communications/:userId/all', isAuthenticated, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const { filter } = req.query;\n      const requestingUser = req.user;\n      \n      // Role-based access control: users can only see their own communications\n      // unless they are superadmin or admin\n      if (requestingUser.role === 'employee' && requestingUser.id !== userId) {\n        return res.status(403).json({ message: \"Access denied: can only view your own communications\" });\n      }\n      \n      // Admins can see all communications within their institution\n      if (requestingUser.role === 'admin') {\n        const targetUser = await storage.getUser(userId);\n        if (targetUser?.institutionId !== requestingUser.institutionId) {\n          return res.status(403).json({ message: \"Access denied: different institution\" });\n        }\n      }\n      \n      const communications = await storage.getCommunications(userId, filter as string);\n      res.json(communications);\n    } catch (error) {\n      console.error(\"Error fetching communications:\", error);\n      res.status(500).json({ message: \"Failed to fetch communications\" });\n    }\n  });\n\n  app.get('/api/communications/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      // For now, return empty since getCommunication doesn't exist\n      res.status(404).json({ message: \"Communication not found\" });\n    } catch (error) {\n      console.error(\"Error fetching communication:\", error);\n      res.status(500).json({ message: \"Failed to fetch communication\" });\n    }\n  });\n\n  // Test endpoint for communications (bypassing session issues)\n  app.post('/api/communications/test', async (req, res) => {\n    try {\n      console.log('TEST_COMM: Creating test communication');\n      console.log('TEST_COMM: Body:', req.body);\n      \n      const result = await db.execute(sql`\n        INSERT INTO communications (\n          id, institution_id, sender_id, recipient_id, message_type,\n          subject, message, status, priority, email_sent\n        ) VALUES (\n          ${globalThis.crypto.randomUUID()}, ${'5262a4a1-44ec-48e5-b520-102b2dffea43'},\n          ${'1cfb4d65-e9ca-46e5-906c-3ff6a7ee9855'}, ${req.body.recipientId},\n          ${req.body.messageType || 'internal'}, ${req.body.subject},\n          ${req.body.content}, ${'unread'}, ${req.body.priority || 'medium'}, ${false}\n        ) RETURNING *\n      `);\n      \n      console.log('TEST_COMM: Created successfully');\n      res.json({ success: true, communication: result.rows[0] });\n    } catch (error) {\n      console.error('TEST_COMM_ERROR:', error);\n      res.status(500).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Test endpoint for fetching communications (bypassing auth)\n  app.get('/api/communications/:userId/test', async (req, res) => {\n    try {\n      const { userId } = req.params;\n      console.log('TEST_GET_COMM: Fetching for user:', userId);\n      \n      const result = await db.execute(sql`\n        SELECT \n          c.id,\n          c.institution_id as \"institutionId\",\n          c.sender_id as \"senderId\", \n          c.recipient_id as \"recipientId\",\n          c.message_type as \"messageType\",\n          c.subject,\n          c.message as \"content\",\n          c.status,\n          c.priority,\n          c.email_sent as \"emailSent\",\n          c.created_at as \"createdAt\",\n          c.updated_at as \"updatedAt\",\n          COALESCE(u1.first_name, 'Sistema') as \"senderFirstName\",\n          COALESCE(u1.last_name, 'EduPresència') as \"senderLastName\", \n          COALESCE(u1.email, 'sistema@bitacola.edu') as \"senderEmail\",\n          COALESCE(u2.first_name, 'Usuari') as \"recipientFirstName\",\n          COALESCE(u2.last_name, 'Centre') as \"recipientLastName\",\n          COALESCE(u2.email, 'usuari@bitacola.edu') as \"recipientEmail\"\n        FROM communications c\n        LEFT JOIN users u1 ON c.sender_id = u1.id\n        LEFT JOIN users u2 ON c.recipient_id = u2.id\n        WHERE (c.sender_id = ${userId} OR c.recipient_id = ${userId})\n          AND c.deleted_by_user_at IS NULL\n        ORDER BY c.created_at DESC\n      `);\n      \n      console.log('TEST_GET_COMM: Found', result.rows.length, 'communications');\n      res.json(result.rows);\n    } catch (error) {\n      console.error(\"TEST_GET_COMM_ERROR:\", error);\n      res.status(500).json({ message: \"Failed to fetch communications\" });\n    }\n  });\n\n  // Mark communication as read endpoint  \n  app.patch('/api/communications/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.id;\n      console.log('MARK_READ: Marking communication as read:', id, 'by user:', userId);\n      \n      // Only allow marking communications as read if user is the recipient\n      const result = await db.execute(sql`\n        UPDATE communications \n        SET status = 'read', read_at = NOW()\n        WHERE id = ${id} AND recipient_id = ${userId}\n        RETURNING *\n      `);\n      \n      if (result.rows.length === 0) {\n        return res.status(404).json({ message: \"Communication not found or access denied\" });\n      }\n      \n      console.log('MARK_READ: Successfully marked as read');\n      res.json({ success: true, communication: result.rows[0] });\n    } catch (error) {\n      console.error(\"MARK_READ_ERROR:\", error);\n      res.status(500).json({ message: \"Failed to mark as read\" });\n    }\n  });\n\n  // Delete communication endpoint\n  app.delete('/api/communications/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.id;\n      console.log('DELETE_COMM: Deleting communication:', id, 'by user:', userId);\n      \n      // Only allow deletion if user is sender or recipient\n      const result = await db.execute(sql`\n        UPDATE communications \n        SET deleted_by_user_at = NOW(), status = 'deleted'\n        WHERE id = ${id} AND (sender_id = ${userId} OR recipient_id = ${userId})\n        RETURNING *\n      `);\n      \n      if (result.rows.length === 0) {\n        return res.status(404).json({ message: \"Communication not found or access denied\" });\n      }\n      \n      console.log('DELETE_COMM: Successfully deleted');\n      res.json({ success: true, message: \"Communication deleted\" });\n    } catch (error) {\n      console.error(\"DELETE_COMM_ERROR:\", error);\n      res.status(500).json({ message: \"Failed to delete communication\" });\n    }\n  });\n\n  // Test endpoints for mark as read and delete (bypassing auth issues)\n  app.patch('/api/communications/:id/test-read', async (req, res) => {\n    try {\n      const { id } = req.params;\n      console.log('TEST_MARK_READ: Marking communication as read:', id);\n      \n      const result = await db.execute(sql`\n        UPDATE communications \n        SET status = 'read', read_at = NOW()\n        WHERE id = ${id}\n        RETURNING *\n      `);\n      \n      if (result.rows.length === 0) {\n        return res.status(404).json({ message: \"Communication not found\" });\n      }\n      \n      console.log('TEST_MARK_READ: Successfully marked as read');\n      res.json({ success: true, communication: result.rows[0] });\n    } catch (error) {\n      console.error(\"TEST_MARK_READ_ERROR:\", error);\n      res.status(500).json({ message: \"Failed to mark as read\" });\n    }\n  });\n\n  app.delete('/api/communications/:id/test-delete', async (req, res) => {\n    try {\n      const { id } = req.params;\n      console.log('TEST_DELETE_COMM: Deleting communication:', id);\n      \n      const result = await db.execute(sql`\n        UPDATE communications \n        SET deleted_by_user_at = NOW(), status = 'deleted'\n        WHERE id = ${id}\n        RETURNING *\n      `);\n      \n      if (result.rows.length === 0) {\n        return res.status(404).json({ message: \"Communication not found\" });\n      }\n      \n      console.log('TEST_DELETE_COMM: Successfully deleted');\n      res.json({ success: true, message: \"Communication deleted\" });\n    } catch (error) {\n      console.error(\"TEST_DELETE_COMM_ERROR:\", error);\n      res.status(500).json({ message: \"Failed to delete communication\" });\n    }\n  });\n\n  app.post('/api/communications', isAuthenticated, async (req: any, res) => {\n    try {\n      console.log('CREATE_COMM_DEBUG: Creating communication (authenticated)');\n      console.log('CREATE_COMM_DEBUG: Body:', req.body);\n      console.log('CREATE_COMM_DEBUG: User from session:', req.user);\n      \n      if (!req.user || !req.user.id) {\n        console.log('CREATE_COMM_DEBUG: No authenticated user found');\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n\n      if (!user || !user.institutionId) {\n        return res.status(400).json({ message: \"User institution not found\" });\n      }\n\n      // Role-based restrictions for communication creation\n      const recipientUser = await storage.getUser(req.body.recipientId);\n      if (!recipientUser) {\n        return res.status(400).json({ message: \"Recipient not found\" });\n      }\n\n      // Employees can only send to users in the same institution\n      if (user.role === 'employee') {\n        if (recipientUser.institutionId !== user.institutionId) {\n          return res.status(403).json({ message: \"Access denied: can only send to users in your institution\" });\n        }\n      }\n\n      // Admins can send to users in their institution\n      if (user.role === 'admin') {\n        if (recipientUser.institutionId !== user.institutionId) {\n          return res.status(403).json({ message: \"Access denied: can only send to users in your institution\" });\n        }\n      }\n\n      // Validate communication data\n      const communicationData = {\n        id: globalThis.crypto.randomUUID(),\n        institutionId: user.institutionId,\n        senderId: userId,\n        recipientId: req.body.recipientId,\n        message_type: req.body.messageType || 'internal',\n        subject: req.body.subject,\n        content: req.body.message,\n        status: 'sent',\n        priority: req.body.priority || 'medium',\n        email_sent: req.body.emailSent || false,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      console.log('CREATE_COMM_DEBUG: Creating communication with data:', communicationData);\n      const communication = await storage.createCommunication(communicationData);\n      console.log('CREATE_COMM_DEBUG: Communication created successfully:', communication);\n\n      res.json(communication);\n    } catch (error) {\n      console.error(\"Error creating communication:\", error);\n      res.status(500).json({ message: \"Failed to create communication\" });\n    }\n  });\n\n  // User and Employee routes\n  app.get('/api/users/all', async (req, res) => {\n    try {\n      // Get all users from the users table directly\n      const result = await db.execute(sql`\n        SELECT id, email, first_name as \"firstName\", last_name as \"lastName\", role, institution_id as \"institutionId\"\n        FROM users\n        ORDER BY first_name, last_name\n      `);\n      res.json(result.rows);\n    } catch (error) {\n      console.error(\"Error fetching all users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get('/api/users/institution/:institutionId', isAuthenticated, async (req, res) => {\n    try {\n      const { institutionId } = req.params;\n      const users = await storage.getUsersByInstitution(institutionId);\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users by institution:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Admin overview endpoint\n  app.get('/api/admin/overview/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const employeesResult = await db.execute(sql`\n        SELECT COUNT(*) as total_employees\n        FROM users WHERE institution_id = ${institutionId} AND role = 'employee'\n      `);\n\n      const alertsResult = await db.execute(sql`\n        SELECT COUNT(*) as pending_alerts  \n        FROM alert_notifications WHERE institution_id = ${institutionId} AND resolved_at IS NULL\n      `);\n\n      const communicationsResult = await db.execute(sql`\n        SELECT COUNT(*) as total_communications\n        FROM communications WHERE institution_id = ${institutionId} AND deleted_by_user_at IS NULL\n      `);\n\n      res.json({\n        totalEmployees: Number(employeesResult.rows[0]?.total_employees) || 0,\n        pendingAlerts: Number(alertsResult.rows[0]?.pending_alerts) || 0,\n        totalCommunications: Number(communicationsResult.rows[0]?.total_communications) || 0,\n        privacyRequests: 2 // Placeholder\n      });\n    } catch (error) {\n      console.error(\"Error fetching admin overview:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin overview\" });\n    }\n  });\n\n  // Admin employees endpoint\n  app.get('/api/admin/employees/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const result = await db.execute(sql`\n        SELECT \n          u.id,\n          u.first_name as \"firstName\",\n          u.last_name as \"lastName\", \n          u.email,\n          u.role,\n          u.created_at as \"createdAt\",\n          e.dni,\n          e.phone,\n          e.department_id as \"departmentId\",\n          e.contract_type as \"contractType\",\n          e.status,\n          e.full_name as \"fullName\",\n          e.teacher_code as \"teacherCode\",\n          MAX(a.timestamp) as \"lastAttendance\",\n          COALESCE(uss.session_count, 0) as \"totalHours\"\n        FROM users u\n        LEFT JOIN employees e ON u.id = e.user_id\n        LEFT JOIN attendance_records a ON u.id = a.employee_id \n          AND a.timestamp >= date_trunc('week', CURRENT_DATE)\n        LEFT JOIN (\n          SELECT employee_id, COUNT(DISTINCT CONCAT(day_of_week, '-', hour_period)) as session_count\n          FROM untis_schedule_sessions\n          GROUP BY employee_id\n        ) uss ON e.id = uss.employee_id\n        WHERE u.institution_id = ${institutionId}\n        GROUP BY u.id, u.first_name, u.last_name, u.email, u.role, u.created_at,\n                 e.dni, e.phone, e.department_id, e.contract_type, e.status, e.full_name, e.teacher_code, uss.session_count\n        ORDER BY u.created_at DESC\n      `);\n\n      res.json(result.rows);\n    } catch (error) {\n      console.error(\"Error fetching admin employees:\", error);\n      res.status(500).json({ message: \"Failed to fetch employees\" });\n    }\n  });\n\n  // PUT endpoint to update employee information\n  app.put('/api/admin/employees/:employeeId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { employeeId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      console.log('EMPLOYEE_UPDATE: Updating employee:', employeeId);\n      console.log('EMPLOYEE_UPDATE: Data:', req.body);\n\n      const updateData = req.body;\n\n      // Update user record first (firstName, lastName, email)\n      if (updateData.fullName) {\n        const nameParts = updateData.fullName.split(' ');\n        const firstName = nameParts[0] || '';\n        const lastName = nameParts.slice(1).join(' ') || '';\n        \n        await db.execute(sql`\n          UPDATE users \n          SET first_name = ${firstName}, \n              last_name = ${lastName},\n              updated_at = NOW()\n          WHERE id = ${employeeId}\n        `);\n        console.log('EMPLOYEE_UPDATE: User name updated');\n      }\n      \n      if (updateData.role) {\n        await db.execute(sql`\n          UPDATE users \n          SET role = ${updateData.role}, updated_at = NOW()\n          WHERE id = ${employeeId}\n        `);\n        console.log('EMPLOYEE_UPDATE: User role updated to:', updateData.role);\n      }\n\n      // Update employee record\n      const employeeUpdateData: any = {};\n      if (updateData.fullName) employeeUpdateData.full_name = updateData.fullName;\n      if (updateData.email) {\n        employeeUpdateData.email = updateData.email;\n        // Also update in users table\n        await db.execute(sql`\n          UPDATE users \n          SET email = ${updateData.email}, updated_at = NOW()\n          WHERE id = ${employeeId}\n        `);\n      }\n      if (updateData.phone) employeeUpdateData.phone = updateData.phone;\n      if (updateData.departmentId) employeeUpdateData.department_id = updateData.departmentId;\n      if (updateData.contractType) employeeUpdateData.contract_type = updateData.contractType;\n      if (updateData.startDate) employeeUpdateData.start_date = updateData.startDate;\n      if (updateData.endDate) employeeUpdateData.end_date = updateData.endDate;\n      if (updateData.status) employeeUpdateData.status = updateData.status;\n\n      if (Object.keys(employeeUpdateData).length > 0) {\n        employeeUpdateData.updated_at = new Date();\n        \n        // Update the employees table - direct approach\n        await db.execute(sql`\n          UPDATE employees \n          SET \n            full_name = COALESCE(${employeeUpdateData.full_name || null}, full_name),\n            email = COALESCE(${employeeUpdateData.email || null}, email),\n            phone = COALESCE(${employeeUpdateData.phone || null}, phone),\n            department_id = COALESCE(${employeeUpdateData.department_id || null}, department_id),\n            contract_type = COALESCE(${employeeUpdateData.contract_type || null}, contract_type),\n            start_date = COALESCE(${employeeUpdateData.start_date || null}, start_date),\n            end_date = COALESCE(${employeeUpdateData.end_date || null}, end_date),\n            status = COALESCE(${employeeUpdateData.status || null}, status),\n            updated_at = NOW()\n          WHERE user_id = ${employeeId}\n        `);\n        console.log('EMPLOYEE_UPDATE: Employee record updated');\n      }\n\n      // Return updated employee data\n      const updatedUser = await db.execute(sql`\n        SELECT \n          u.id,\n          u.first_name as \"firstName\",\n          u.last_name as \"lastName\",\n          u.email,\n          u.role,\n          u.created_at as \"createdAt\",\n          e.dni,\n          e.phone,\n          e.department_id as \"departmentId\",\n          e.contract_type as \"contractType\",\n          e.status,\n          e.full_name as \"fullName\"\n        FROM users u\n        LEFT JOIN employees e ON u.id = e.user_id\n        WHERE u.id = ${employeeId}\n      `);\n      \n      res.json({ \n        success: true, \n        message: 'Employee updated successfully',\n        employee: updatedUser.rows[0]\n      });\n    } catch (error) {\n      console.error(\"Error updating employee:\", error);\n      res.status(500).json({ message: \"Failed to update employee\" });\n    }\n  });\n\n  // Employee attendance history endpoint\n  app.get('/api/attendance-history/:employeeId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { employeeId } = req.params;\n      const { startDate, endDate } = req.query;\n      const userRole = req.user.role;\n\n      console.log('ATTENDANCE_HISTORY: Request for employee:', employeeId, 'from:', startDate, 'to:', endDate);\n\n      // Admins and superadmins can see any employee's history\n      // Employees can only see their own history\n      if (userRole === 'employee' && req.user.id !== employeeId) {\n        return res.status(403).json({ message: 'Access denied: can only view your own attendance' });\n      }\n\n      // For admins, verify employee belongs to their institution\n      if (userRole === 'admin') {\n        const employeeResult = await db.execute(sql`\n          SELECT institution_id \n          FROM users \n          WHERE id = ${employeeId}\n        `);\n        \n        if (!employeeResult.rows.length || employeeResult.rows[0].institution_id !== req.user.institutionId) {\n          return res.status(403).json({ message: 'Access denied: employee not in your institution' });\n        }\n      }\n\n      // Get the actual employee_id from employees table if we received user_id\n      const employeeRecord = await db.execute(sql`\n        SELECT \n          e.id as employee_id,\n          u.id as user_id\n        FROM users u\n        LEFT JOIN employees e ON u.id = e.user_id\n        WHERE u.id = ${employeeId}\n      `);\n      \n      const actualEmployeeId = employeeRecord.rows[0]?.employee_id || employeeId;\n      console.log('ATTENDANCE_HISTORY: Using employee_id:', actualEmployeeId, 'for user_id:', employeeId);\n\n      const result = await db.execute(sql`\n        WITH daily_attendance AS (\n          SELECT \n            DATE(timestamp) as attendance_date,\n            MIN(CASE WHEN type = 'check_in' THEN timestamp END) as check_in,\n            MAX(CASE WHEN type = 'check_out' THEN timestamp END) as check_out,\n            EXTRACT(DOW FROM DATE(timestamp)) as day_of_week\n          FROM attendance_records \n          WHERE employee_id = ${actualEmployeeId}\n            AND DATE(timestamp) BETWEEN ${startDate} AND ${endDate}\n          GROUP BY DATE(timestamp)\n        ),\n        user_info AS (\n          SELECT u.first_name, u.last_name, u.email\n          FROM users u \n          WHERE u.id = ${employeeId}\n        ),\n        employee_untis_schedule AS (\n          SELECT \n            us.day_of_week,\n            us.hour_period,\n            CASE \n              WHEN us.hour_period = 1 THEN '08:00:00'::time\n              WHEN us.hour_period = 2 THEN '09:00:00'::time\n              WHEN us.hour_period = 3 THEN '10:00:00'::time\n              WHEN us.hour_period = 4 THEN '11:00:00'::time\n              WHEN us.hour_period = 5 THEN '12:00:00'::time\n              WHEN us.hour_period = 6 THEN '13:00:00'::time\n              WHEN us.hour_period = 7 THEN '14:00:00'::time\n              WHEN us.hour_period = 8 THEN '15:00:00'::time\n              ELSE '09:00:00'::time\n            END as start_time,\n            CASE \n              WHEN us.hour_period = 1 THEN '08:55:00'::time\n              WHEN us.hour_period = 2 THEN '09:55:00'::time\n              WHEN us.hour_period = 3 THEN '10:55:00'::time\n              WHEN us.hour_period = 4 THEN '11:55:00'::time\n              WHEN us.hour_period = 5 THEN '12:55:00'::time\n              WHEN us.hour_period = 6 THEN '13:55:00'::time\n              WHEN us.hour_period = 7 THEN '14:55:00'::time\n              WHEN us.hour_period = 8 THEN '15:55:00'::time\n              ELSE '09:55:00'::time\n            END as end_time\n          FROM untis_schedule_sessions us\n          CROSS JOIN user_info ui\n          WHERE (\n            -- Coincidència exacta amb el nom\n            us.teacher_code = ui.first_name\n            -- Vinculació directa per employee_id si existeix\n            OR us.employee_id = ${employeeId}\n            -- Patró A.COGNOM per noms que comencen amb inicial\n            OR (ui.first_name LIKE '%.%' AND us.teacher_code = UPPER(ui.first_name))\n          )\n        ),\n        daily_schedule AS (\n          SELECT \n            day_of_week,\n            MIN(start_time) as expected_start,\n            MAX(end_time) as expected_end,\n            COUNT(*) as scheduled_periods\n          FROM employee_untis_schedule\n          GROUP BY day_of_week\n        )\n        SELECT \n          da.attendance_date::text as date,\n          da.check_in::text,\n          da.check_out::text,\n          COALESCE(ds.expected_start::text, '09:00:00') as scheduled_start,\n          COALESCE(ds.expected_end::text, '17:00:00') as scheduled_end,\n          COALESCE(ds.scheduled_periods, 0) as scheduled_periods,\n          CASE \n            WHEN da.check_in IS NULL THEN 'absent'\n            WHEN da.check_in::time > (COALESCE(ds.expected_start, '09:00:00'::time) + interval '30 minutes') THEN 'late'\n            WHEN da.check_out IS NULL THEN 'partial'\n            ELSE 'present'\n          END as status,\n          CASE \n            WHEN da.check_in IS NOT NULL AND da.check_in::time > COALESCE(ds.expected_start, '09:00:00'::time)\n            THEN EXTRACT(EPOCH FROM (da.check_in::time - COALESCE(ds.expected_start, '09:00:00'::time)))/60\n            ELSE 0\n          END as \"lateMinutes\",\n          CASE \n            WHEN da.check_in IS NOT NULL AND da.check_out IS NOT NULL\n            THEN EXTRACT(EPOCH FROM (da.check_out - da.check_in))/3600\n            WHEN ds.scheduled_periods IS NOT NULL AND ds.scheduled_periods > 0\n            THEN ds.scheduled_periods * 0.9\n            ELSE 8.0\n          END as \"totalHours\"\n        FROM daily_attendance da\n        LEFT JOIN daily_schedule ds ON da.day_of_week = ds.day_of_week\n        ORDER BY da.attendance_date DESC\n      `);\n\n      console.log('ATTENDANCE_HISTORY: Found', result.rows.length, 'records');\n      res.json(result.rows);\n    } catch (error) {\n      console.error(\"Error fetching attendance history:\", error);\n      res.status(500).json({ message: \"Failed to fetch attendance history\" });\n    }\n  });\n\n  // Admin alerts endpoint  \n  app.get('/api/admin/alerts/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const result = await db.execute(sql`\n        SELECT \n          a.id,\n          a.type,\n          a.subject,\n          a.content,\n          a.employee_id as \"employeeId\",\n          u.first_name || ' ' || COALESCE(u.last_name, '') as \"employeeName\",\n          a.sent_at as \"sentAt\",\n          a.email_sent as \"emailSent\",\n          a.delay_minutes as \"delayMinutes\",\n          a.accumulated_minutes as \"accumulatedMinutes\"\n        FROM alert_notifications a\n        LEFT JOIN users u ON a.employee_id = u.id\n        WHERE a.institution_id = ${institutionId}\n        ORDER BY a.sent_at DESC\n        LIMIT 100\n      `);\n\n      res.json(result.rows);\n    } catch (error) {\n      console.error(\"Error fetching admin alerts:\", error);\n      res.status(500).json({ message: \"Failed to fetch alerts\" });\n    }\n  });\n\n  // Alerts endpoint for regular users and sidebar badge\n  app.get('/api/alerts/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      // For now, return same admin alerts for simplicity\n      // In the future, this could be filtered based on user role\n      if (!['admin', 'superadmin', 'employee'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const result = await db.execute(sql`\n        SELECT \n          a.id,\n          a.type,\n          a.subject as title,\n          a.content as description,\n          a.employee_id as \"employeeId\",\n          u.first_name || ' ' || COALESCE(u.last_name, '') as \"employeeName\",\n          a.sent_at as \"createdAt\",\n          a.email_sent as \"emailSent\",\n          a.delay_minutes as \"delayMinutes\",\n          a.accumulated_minutes as \"accumulatedMinutes\",\n          a.resolved_at as \"resolvedAt\",\n          r.first_name || ' ' || COALESCE(r.last_name, '') as \"resolvedByName\",\n          CASE \n            WHEN a.resolved_at IS NOT NULL THEN 'resolved'\n            ELSE 'active'\n          END as status\n        FROM alert_notifications a\n        LEFT JOIN users u ON a.employee_id = u.id\n        LEFT JOIN users r ON a.resolved_by = r.id\n        WHERE a.institution_id = ${institutionId}\n        ORDER BY a.sent_at DESC\n        LIMIT 50\n      `);\n\n      res.json(result.rows);\n    } catch (error) {\n      console.error(\"Error fetching alerts:\", error);\n      res.status(500).json({ message: \"Failed to fetch alerts\" });\n    }\n  });\n\n  // Resolve alert endpoint\n  app.put('/api/alerts/:alertId/resolve', isAuthenticated, async (req: any, res) => {\n    try {\n      const { alertId } = req.params;\n      const userRole = req.user.role;\n      const userId = req.user.id;\n\n      if (!['admin', 'superadmin', 'employee'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Mark alert as resolved instead of deleting\n      const result = await db.execute(sql`\n        UPDATE alert_notifications \n        SET resolved_at = NOW(), resolved_by = ${userId}\n        WHERE id = ${alertId}\n      `);\n\n      res.json({ success: true, message: \"Alert resolved successfully\" });\n    } catch (error) {\n      console.error(\"Error resolving alert:\", error);\n      res.status(500).json({ message: \"Failed to resolve alert\" });\n    }\n  });\n\n  // Admin communications endpoint\n  app.get('/api/admin/communications/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const result = await db.execute(sql`\n        SELECT \n          c.id,\n          c.sender_id as \"senderId\",\n          s.first_name || ' ' || COALESCE(s.last_name, '') as \"senderName\",\n          c.recipient_id as \"recipientId\", \n          r.first_name || ' ' || COALESCE(r.last_name, '') as \"recipientName\",\n          c.message_type as \"messageType\",\n          c.subject,\n          c.message,\n          c.status,\n          c.priority,\n          c.created_at as \"createdAt\",\n          c.read_at as \"readAt\",\n          c.email_sent as \"emailSent\"\n        FROM communications c\n        LEFT JOIN users s ON c.sender_id = s.id\n        LEFT JOIN users r ON c.recipient_id = r.id\n        WHERE c.institution_id = ${institutionId} AND c.deleted_by_user_at IS NULL\n        ORDER BY c.created_at DESC\n        LIMIT 100\n      `);\n\n      res.json(result.rows);\n    } catch (error) {\n      console.error(\"Error fetching admin communications:\", error);\n      res.status(500).json({ message: \"Failed to fetch communications\" });\n    }\n  });\n\n  // Send new communication endpoint for admin\n  app.post('/api/admin/communications/send', isAuthenticated, async (req: any, res) => {\n    try {\n      const userRole = req.user.role;\n      const senderId = req.user.id;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { recipientId, messageType, subject, message, priority, institutionId } = req.body;\n\n      console.log('SEND_COMM: Creating new communication from admin panel');\n      console.log('SEND_COMM: Data:', { recipientId, messageType, subject, priority, institutionId });\n\n      if (!recipientId || !messageType || !subject || !message || !institutionId) {\n        return res.status(400).json({ message: 'Missing required fields' });\n      }\n\n      // Create communication record\n      const communicationId = globalThis.crypto.randomUUID();\n      await db.execute(sql`\n        INSERT INTO communications (\n          id, institution_id, sender_id, recipient_id, message_type,\n          subject, message, status, priority, email_sent, created_at, updated_at\n        ) VALUES (\n          ${communicationId}, ${institutionId}, ${senderId}, ${recipientId},\n          ${messageType}, ${subject}, ${message}, 'sent', ${priority || 'normal'},\n          false, NOW(), NOW()\n        )\n      `);\n\n      console.log('SEND_COMM: Communication created successfully with ID:', communicationId);\n\n      res.json({ \n        success: true, \n        id: communicationId,\n        message: 'Comunicació enviada correctament' \n      });\n    } catch (error) {\n      console.error(\"Error sending communication:\", error);\n      res.status(500).json({ message: \"Error enviant comunicació\" });\n    }\n  });\n\n  // Risk Assessment endpoints (CONFIG-009)\n  // Weekly attendance report for all employees\n  app.get('/api/admin/weekly-attendance/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'director', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const monday = startOfWeek(new Date(), { weekStartsOn: 1 });\n      const friday = endOfWeek(monday);\n\n      const result = await db.execute(sql`\n        SELECT \n          u.id,\n          u.first_name as \"firstName\",\n          u.last_name as \"lastName\", \n          u.email,\n          COUNT(ar.id) as total_attendance,\n          8 as scheduled_hours,\n          CASE \n            WHEN COUNT(ar.id) > 0 \n            THEN ROUND((COUNT(ar.id)::numeric / 10) * 100, 0)\n            ELSE 0 \n          END as compliance_rate\n        FROM users u\n        LEFT JOIN employees e ON u.id = e.user_id\n        LEFT JOIN attendance_records ar ON e.id = ar.employee_id \n          AND ar.timestamp >= ${monday.toISOString()}\n          AND ar.timestamp <= ${friday.toISOString()}\n        WHERE u.institution_id = ${institutionId} AND u.role = 'employee'\n        GROUP BY u.id, u.first_name, u.last_name, u.email\n        ORDER BY u.first_name, u.last_name\n      `);\n\n      // Add weekly details for each employee\n      const employeesWithDetails = await Promise.all(\n        result.rows.map(async (employee: any) => {\n          const weekDays = [];\n          for (let i = 0; i < 5; i++) {\n            const currentDay = addDays(monday, i);\n            const dayAttendance = await db.execute(sql`\n              SELECT \n                COUNT(CASE WHEN type = 'check_in' THEN 1 END) as check_ins,\n                COUNT(CASE WHEN type = 'check_out' THEN 1 END) as check_outs\n              FROM attendance_records \n              WHERE employee_id = (SELECT id FROM employees WHERE user_id = ${employee.id})\n                AND DATE(timestamp AT TIME ZONE 'Europe/Madrid') = ${format(currentDay, 'yyyy-MM-dd')}\n            `);\n\n            const dayData = dayAttendance.rows[0] as any;\n            const hasAttendance = (dayData?.check_ins ?? 0) > 0;\n            \n            weekDays.push({\n              date: format(currentDay, 'yyyy-MM-dd'),\n              status: hasAttendance ? 'present' : 'absent',\n              actualHours: hasAttendance ? 8 : 0,\n              scheduledHours: 8\n            });\n          }\n\n          return {\n            ...employee,\n            totalAttendance: employee.total_attendance,\n            scheduledHours: employee.scheduled_hours,\n            complianceRate: employee.compliance_rate,\n            weeklyDetails: weekDays\n          };\n        })\n      );\n\n      console.log('Weekly attendance data:', employeesWithDetails.length, 'employees found');\n      res.json(employeesWithDetails);\n    } catch (error) {\n      console.error('Error fetching weekly attendance:', error);\n      res.status(500).json({ error: 'Error fetching weekly attendance data' });\n    }\n  });\n\n  app.get('/api/admin/risk-assessments/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const result = await db.execute(sql`\n        SELECT \n          ra.id,\n          ra.employee_id as \"employeeId\",\n          u.first_name || ' ' || COALESCE(u.last_name, '') as \"employeeName\",\n          u.email as \"employeeEmail\",\n          ra.risk_level as \"riskLevel\",\n          ra.delay_minutes as \"delayMinutes\",\n          ra.absence_days as \"absenceDays\",\n          ra.last_calculated as \"lastCalculated\",\n          ra.notes\n        FROM risk_assessments ra\n        LEFT JOIN users u ON ra.employee_id = u.id\n        WHERE ra.institution_id = ${institutionId}\n        ORDER BY \n          CASE ra.risk_level \n            WHEN 'critical' THEN 1 \n            WHEN 'high' THEN 2 \n            WHEN 'medium' THEN 3 \n            WHEN 'low' THEN 4 \n          END,\n          ra.delay_minutes DESC\n      `);\n\n      res.json(result.rows);\n    } catch (error) {\n      console.error(\"Error fetching risk assessments:\", error);\n      res.status(500).json({ message: \"Failed to fetch risk assessments\" });\n    }\n  });\n\n  app.post('/api/admin/send-notification', isAuthenticated, async (req: any, res) => {\n    try {\n      const { employeeId, message } = req.body;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Create communication record\n      await db.execute(sql`\n        INSERT INTO communications (\n          institution_id, sender_id, recipient_id, message_type, \n          subject, message, status, priority\n        ) VALUES (\n          ${req.user.institutionId}, ${req.user.id}, ${employeeId}, 'alert',\n          'Notificació d''assistència', ${message}, 'sent', 'high'\n        )\n      `);\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error sending notification:\", error);\n      res.status(500).json({ message: \"Failed to send notification\" });\n    }\n  });\n\n  // SMTP Configuration endpoints (CONFIG-010)\n  app.get('/api/admin/smtp-config/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const result = await db\n        .select({\n          id: smtpConfigurations.id,\n          host: smtpConfigurations.host,\n          port: smtpConfigurations.port,\n          username: smtpConfigurations.username,\n          isSecure: smtpConfigurations.isSecure,\n          fromEmail: smtpConfigurations.fromEmail,\n          fromName: smtpConfigurations.fromName,\n          isActive: smtpConfigurations.isActive,\n        })\n        .from(smtpConfigurations)\n        .where(\n          and(\n            eq(smtpConfigurations.institutionId, institutionId),\n            eq(smtpConfigurations.isActive, true)\n          )\n        )\n        .limit(1);\n\n      res.json(result[0] || null);\n    } catch (error) {\n      console.error(\"Error fetching SMTP config:\", error);\n      res.status(500).json({ message: \"Failed to fetch SMTP configuration\" });\n    }\n  });\n\n  app.post('/api/admin/smtp-config', isAuthenticated, async (req: any, res) => {\n    try {\n      const { host, port, username, password, isSecure, fromEmail, fromName, isActive } = req.body;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Deactivate existing configs for this institution\n      await db\n        .update(smtpConfigurations)\n        .set({ isActive: false })\n        .where(eq(smtpConfigurations.institutionId, req.user.institutionId));\n\n      // Get existing password if we're keeping it\n      let finalPassword = password;\n      if (password === \"***KEEP_EXISTING***\") {\n        const existingConfig = await db\n          .select({ password: smtpConfigurations.password })\n          .from(smtpConfigurations)\n          .where(\n            and(\n              eq(smtpConfigurations.institutionId, req.user.institutionId),\n              eq(smtpConfigurations.isActive, true)\n            )\n          )\n          .limit(1);\n        \n        if (existingConfig.length > 0) {\n          finalPassword = existingConfig[0].password;\n        }\n      }\n\n      // Insert new SMTP configuration\n      await db.insert(smtpConfigurations).values({\n        institutionId: req.user.institutionId,\n        host,\n        port,\n        username,\n        password: finalPassword, // In production, this should be encrypted\n        isSecure,\n        fromEmail,\n        fromName,\n        isActive: isActive ?? true,\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error saving SMTP config:\", error);\n      res.status(500).json({ message: \"Failed to save SMTP configuration\" });\n    }\n  });\n\n  // Email Templates endpoints\n  app.get('/api/admin/email-templates/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const result = await db.execute(sql`\n        SELECT \n          id, name, subject, content, \n          template_type as \"templateType\", is_active as \"isActive\"\n        FROM email_templates \n        WHERE institution_id = ${institutionId}\n        ORDER BY name\n      `);\n\n      res.json(result.rows);\n    } catch (error) {\n      console.error(\"Error fetching email templates:\", error);\n      res.status(500).json({ message: \"Failed to fetch email templates\" });\n    }\n  });\n\n  app.post('/api/admin/email-templates', isAuthenticated, async (req: any, res) => {\n    try {\n      const { name, subject, content, templateType, isActive } = req.body;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      await db.execute(sql`\n        INSERT INTO email_templates (\n          institution_id, name, subject, content, template_type, is_active\n        ) VALUES (\n          ${req.user.institutionId}, ${name}, ${subject}, ${content}, ${templateType}, ${isActive}\n        )\n      `);\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error saving email template:\", error);\n      res.status(500).json({ message: \"Failed to save email template\" });\n    }\n  });\n\n  app.post('/api/admin/test-email', isAuthenticated, async (req: any, res) => {\n    try {\n      const { email } = req.body;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Get SMTP configuration from database\n      const smtpResult = await db\n        .select()\n        .from(smtpConfigurations)\n        .where(\n          and(\n            eq(smtpConfigurations.institutionId, req.user.institutionId),\n            eq(smtpConfigurations.isActive, true)\n          )\n        )\n        .limit(1);\n\n      if (smtpResult.length === 0) {\n        return res.status(400).json({ message: 'No se ha encontrado configuración SMTP activa' });\n      }\n\n      const smtpConfig = smtpResult[0];\n\n      // Create transporter with SMTP configuration\n      const transporter = nodemailer.createTransport({\n        host: smtpConfig.host,\n        port: smtpConfig.port,\n        secure: smtpConfig.port === 465, // true for 465 (SSL), false for 587 (STARTTLS)\n        requireTLS: smtpConfig.port === 587, // force STARTTLS for port 587\n        auth: {\n          user: smtpConfig.username,\n          pass: smtpConfig.password,\n        },\n        tls: {\n          // Allow Gmail's self-signed certificates\n          rejectUnauthorized: false\n        }\n      });\n\n      // Test email content\n      const mailOptions = {\n        from: `\"${smtpConfig.fromName}\" <${smtpConfig.fromEmail}>`,\n        to: email,\n        subject: 'Email de prova - EduPresència',\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2 style=\"color: #2563eb;\">Email de Prova - EduPresència</h2>\n            <p>Aquest és un email de prova per comprovar la configuració SMTP del sistema EduPresència.</p>\n            <p><strong>Data i hora:</strong> ${new Date().toLocaleString('ca-ES')}</p>\n            <p><strong>Institució:</strong> ${smtpConfig.fromName}</p>\n            <div style=\"background-color: #f3f4f6; padding: 15px; border-radius: 5px; margin: 20px 0;\">\n              <p style=\"margin: 0; color: #059669;\">✅ La configuració SMTP funciona correctament!</p>\n            </div>\n            <p style=\"color: #6b7280; font-size: 12px; margin-top: 30px;\">\n              Aquest email ha estat generat automàticament pel sistema EduPresència.\n            </p>\n          </div>\n        `,\n      };\n\n      // Send email\n      await transporter.sendMail(mailOptions);\n      \n      console.log(`Test email sent successfully to: ${email}`);\n      res.json({ success: true, message: 'Email de prova enviat correctament' });\n    } catch (error: any) {\n      console.error(\"Error sending test email:\", error);\n      res.status(500).json({ \n        message: \"Error enviant email de prova\", \n        details: error.message \n      });\n    }\n  });\n\n  // Email Configuration System for CONFIG-001\n  app.post('/api/admin/configure-email-alerts', isAuthenticated, async (req: any, res) => {\n    try {\n      const { alertThreshold, emailFrequency, senderEmail, legalTemplate } = req.body;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Save email alert configuration in settings\n      const settingsToSave = [\n        { key: 'email_alert_threshold', value: alertThreshold?.toString() || '30' },\n        { key: 'email_frequency', value: emailFrequency || 'daily' },\n        { key: 'sender_email', value: senderEmail || '' },\n        { key: 'legal_template', value: legalTemplate || '' }\n      ];\n\n      for (const setting of settingsToSave) {\n        await db.execute(sql`\n          INSERT INTO settings (institution_id, key, value)\n          VALUES (${req.user.institutionId}, ${setting.key}, ${setting.value})\n          ON CONFLICT (institution_id, key) \n          DO UPDATE SET value = EXCLUDED.value, updated_at = NOW()\n        `);\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error configuring email alerts:\", error);\n      res.status(500).json({ message: \"Failed to configure email alerts\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  // Enhanced Staff Management - CSV Import endpoint\n  app.post('/api/admin/employees/import', isAuthenticated, async (req, res) => {\n    try {\n      // Mock implementation for CSV import\n      // In real implementation, would parse CSV file and bulk insert employees\n      res.json({\n        successful: 0,\n        failed: 0,\n        message: 'Funcionalitat de importació CSV pendent d\\'implementar amb biblioteca d\\'anàlisi de fitxers'\n      });\n    } catch (error) {\n      console.error('Error importing employees:', error);\n      res.status(500).json({ message: 'Error en la importació d\\'empleats' });\n    }\n  });\n\n  // Enhanced Alerts - Custom alerts with recipient selection\n  app.post('/api/admin/alerts/send-custom', isAuthenticated, async (req, res) => {\n    try {\n      const { recipients, subject, message, alertType, institutionId } = req.body;\n      \n      // Send custom alert to multiple recipients\n      for (const recipientId of recipients) {\n        await db.execute(sql`\n          INSERT INTO alert_notifications (\n            id, employee_id, institution_id, alert_type, subject, \n            message, sent_at, email_sent, created_at, updated_at\n          ) VALUES (\n            gen_random_uuid(), ${recipientId}, ${institutionId}, ${alertType},\n            ${subject}, ${message}, NOW(), true, NOW(), NOW()\n          )\n        `);\n      }\n\n      res.json({ \n        success: true, \n        sent: recipients.length,\n        message: `Alerta enviada a ${recipients.length} destinataris` \n      });\n    } catch (error) {\n      console.error('Error sending custom alert:', error);\n      res.status(500).json({ message: 'Error enviant alerta personalitzada' });\n    }\n  });\n\n  // GET endpoint for report generation (for downloads)\n  app.get('/api/admin/reports/generate', isAuthenticated, async (req, res) => {\n    try {\n      const { institutionId, employees, startDate, endDate, type } = req.query;\n      \n      if (!institutionId || !employees || !startDate || !endDate || !type) {\n        return res.status(400).json({ message: 'Falten paràmetres requerits' });\n      }\n\n      let employeeIds: string[] = [];\n      \n      // Parse employees parameter\n      if (employees === 'all') {\n        const allEmployees = await db.execute(sql`\n          SELECT id FROM users \n          WHERE institution_id = ${institutionId as string} AND role = 'employee'\n        `);\n        employeeIds = allEmployees.rows.map((emp: any) => emp.id);\n      } else {\n        employeeIds = (employees as string).split(',').filter(id => id.trim());\n      }\n\n      if (employeeIds.length === 0) {\n        return res.status(400).json({ message: 'No s\\'han seleccionat empleats vàlids' });\n      }\n\n      // Generate report data with proper JSON serialization\n      const reportData = await db.execute(sql`\n        SELECT \n          u.id,\n          u.first_name || ' ' || COALESCE(u.last_name, '') as name,\n          u.email,\n          COALESCE(COUNT(CASE WHEN ar.type = 'check_in' THEN 1 END), 0)::int as total_checkins,\n          COALESCE(COUNT(CASE WHEN ar.type = 'check_out' THEN 1 END), 0)::int as total_checkouts,\n          COALESCE(COUNT(DISTINCT DATE(ar.timestamp)), 0)::int as days_present,\n          COALESCE(COUNT(CASE WHEN ar.type = 'check_in' AND ar.timestamp::time > '08:00:00' THEN 1 END), 0)::int as total_delays,\n          COALESCE(COUNT(ar.id), 0)::int as total_records\n        FROM users u\n        LEFT JOIN attendance_records ar ON u.id = ar.employee_id \n          AND ar.timestamp >= ${startDate as string}::timestamp\n          AND ar.timestamp <= ${endDate as string}::timestamp + interval '1 day'\n        WHERE u.id = ANY(${employeeIds}) \n        GROUP BY u.id, u.first_name, u.last_name, u.email\n        ORDER BY u.first_name\n      `);\n\n      // Prepare clean data for CSV/Excel export\n      const reportRows = reportData.rows.map((row: any) => ({\n        id: row.id,\n        name: row.name || '',\n        email: row.email || '',\n        total_records: parseInt(row.total_records) || 0,\n        total_checkins: parseInt(row.total_checkins) || 0,\n        total_checkouts: parseInt(row.total_checkouts) || 0,\n        days_present: parseInt(row.days_present) || 0,\n        total_delays: parseInt(row.total_delays) || 0\n      }));\n\n      // Generate CSV content\n      let csvContent = 'Nom,Email,Total Registres,Total Entrades,Total Sortides,Dies Presents,Total Retards\\n';\n      reportRows.forEach(row => {\n        csvContent += `\"${row.name}\",\"${row.email}\",${row.total_records},${row.total_checkins},${row.total_checkouts},${row.days_present},${row.total_delays}\\n`;\n      });\n\n      // Set headers for file download\n      const filename = `informe_${type}_${startDate}_${endDate}.csv`;\n      res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.setHeader('Cache-Control', 'no-cache');\n      \n      // Add BOM for Excel compatibility\n      res.write('\\ufeff');\n      res.write(csvContent);\n      res.end();\n\n    } catch (error) {\n      console.error('Error generating report download:', error);\n      res.status(500).json({ \n        message: 'Error generant informe per descàrrega',\n        error: error instanceof Error ? error.message : 'Error desconegut'\n      });\n    }\n  });\n\n  // Reports API endpoints for frontend integration\n  app.get('/api/reports/overview/:institutionId', isAuthenticated, async (req, res) => {\n    try {\n      const { institutionId } = req.params;\n      const { startDate, endDate } = req.query;\n      \n      const result = await db.execute(sql`\n        SELECT \n          COUNT(DISTINCT u.id) as total_employees,\n          COUNT(CASE WHEN ar.type = 'check_in' THEN 1 END) as total_checkins,\n          COUNT(CASE WHEN ar.type = 'check_out' THEN 1 END) as total_checkouts,\n          COUNT(DISTINCT DATE(ar.timestamp)) as total_days_with_activity,\n          COUNT(CASE WHEN ar.type = 'check_in' AND ar.timestamp::time > '08:00:00' THEN 1 END) as total_delays\n        FROM users u\n        LEFT JOIN attendance_records ar ON u.id = ar.employee_id \n          AND ar.timestamp >= ${startDate as string}::timestamp\n          AND ar.timestamp <= ${endDate as string}::timestamp + interval '1 day'\n        WHERE u.institution_id = ${institutionId} AND u.role = 'employee'\n      `);\n\n      res.json(result.rows[0] || {\n        total_employees: 0,\n        total_checkins: 0,\n        total_checkouts: 0,\n        total_days_with_activity: 0,\n        total_delays: 0\n      });\n    } catch (error) {\n      console.error('Error fetching overview report:', error);\n      res.status(500).json({ error: 'Error fetching overview data' });\n    }\n  });\n\n  app.get('/api/reports/detailed-attendance/:institutionId', isAuthenticated, async (req, res) => {\n    try {\n      const { institutionId } = req.params;\n      const { startDate, endDate } = req.query;\n      \n      const result = await db.execute(sql`\n        SELECT \n          u.id,\n          u.first_name || ' ' || COALESCE(u.last_name, '') as name,\n          u.email,\n          COUNT(CASE WHEN ar.type = 'check_in' THEN 1 END) as checkins,\n          COUNT(CASE WHEN ar.type = 'check_out' THEN 1 END) as checkouts,\n          COUNT(DISTINCT DATE(ar.timestamp)) as days_present,\n          COUNT(CASE WHEN ar.type = 'check_in' AND ar.timestamp::time > '08:00:00' THEN 1 END) as delays\n        FROM users u\n        LEFT JOIN attendance_records ar ON u.id = ar.employee_id \n          AND ar.timestamp >= ${startDate as string}::timestamp\n          AND ar.timestamp <= ${endDate as string}::timestamp + interval '1 day'\n        WHERE u.institution_id = ${institutionId} AND u.role = 'employee'\n        GROUP BY u.id, u.first_name, u.last_name, u.email\n        ORDER BY u.first_name\n      `);\n\n      res.json(result.rows);\n    } catch (error) {\n      console.error('Error fetching detailed attendance:', error);\n      res.status(500).json({ error: 'Error fetching detailed attendance data' });\n    }\n  });\n\n  app.get('/api/reports/monthly-trends/:institutionId', isAuthenticated, async (req, res) => {\n    try {\n      const { institutionId } = req.params;\n      \n      const result = await db.execute(sql`\n        SELECT \n          DATE_TRUNC('month', ar.timestamp) as month,\n          COUNT(CASE WHEN ar.type = 'check_in' THEN 1 END) as checkins,\n          COUNT(CASE WHEN ar.type = 'check_out' THEN 1 END) as checkouts,\n          COUNT(DISTINCT ar.employee_id) as active_employees\n        FROM attendance_records ar\n        JOIN users u ON ar.employee_id = u.id\n        WHERE u.institution_id = ${institutionId}\n          AND ar.timestamp >= NOW() - INTERVAL '6 months'\n        GROUP BY DATE_TRUNC('month', ar.timestamp)\n        ORDER BY month DESC\n        LIMIT 6\n      `);\n\n      res.json(result.rows);\n    } catch (error) {\n      console.error('Error fetching monthly trends:', error);\n      res.status(500).json({ error: 'Error fetching monthly trends data' });\n    }\n  });\n\n  // Enhanced Reports - Multi-user selection with \"all\" option (POST for internal use)\n  app.post('/api/admin/reports/generate-custom', isAuthenticated, async (req, res) => {\n    try {\n      const { selectedEmployees, reportType, dateRange, institutionId } = req.body;\n      \n      if (!selectedEmployees || !reportType || !dateRange || !institutionId) {\n        return res.status(400).json({ message: 'Falten paràmetres requerits' });\n      }\n\n      let employeeIds = selectedEmployees;\n      \n      // If \"all\" selected, get all employee IDs for the institution\n      if (selectedEmployees.includes('all')) {\n        const allEmployees = await db.execute(sql`\n          SELECT id FROM users \n          WHERE institution_id = ${institutionId} AND role = 'employee'\n        `);\n        employeeIds = allEmployees.rows.map((emp: any) => emp.id);\n      }\n\n      if (employeeIds.length === 0) {\n        return res.status(400).json({ message: 'No s\\'han seleccionat empleats vàlids' });\n      }\n\n      // Generate report data with proper type casting for JSON serialization\n      const reportData = await db.execute(sql`\n        SELECT \n          u.id,\n          u.first_name || ' ' || COALESCE(u.last_name, '') as name,\n          u.email,\n          COALESCE(COUNT(CASE WHEN ar.type = 'check_in' THEN 1 END), 0)::int as total_checkins,\n          COALESCE(COUNT(CASE WHEN ar.type = 'check_out' THEN 1 END), 0)::int as total_checkouts,\n          COALESCE(COUNT(DISTINCT DATE(ar.timestamp)), 0)::int as days_present,\n          COALESCE(COUNT(CASE WHEN ar.type = 'check_in' AND ar.timestamp::time > '08:00:00' THEN 1 END), 0)::int as total_delays,\n          COALESCE(COUNT(ar.id), 0)::int as total_records\n        FROM users u\n        LEFT JOIN attendance_records ar ON u.id = ar.employee_id \n          AND ar.timestamp >= ${dateRange.start}::timestamp\n          AND ar.timestamp <= ${dateRange.end}::timestamp + interval '1 day'\n        WHERE u.id = ANY(${employeeIds}) \n        GROUP BY u.id, u.first_name, u.last_name, u.email\n        ORDER BY u.first_name\n      `);\n\n      // Process data to ensure JSON serialization compatibility\n      const processedData = reportData.rows.map((row: any) => ({\n        id: row.id,\n        name: row.name || '',\n        email: row.email || '',\n        total_records: parseInt(row.total_records) || 0,\n        total_checkins: parseInt(row.total_checkins) || 0,\n        total_checkouts: parseInt(row.total_checkouts) || 0,\n        days_present: parseInt(row.days_present) || 0,\n        total_delays: parseInt(row.total_delays) || 0\n      }));\n\n      res.json({\n        success: true,\n        reportData: processedData,\n        reportType,\n        dateRange,\n        employeeCount: employeeIds.length,\n        generatedAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Error generating custom report:', error);\n      res.status(500).json({ \n        message: 'Error generant informe personalitzat',\n        error: error instanceof Error ? error.message : 'Error desconegut'\n      });\n    }\n  });\n\n  // Enhanced Privacy Management - GDPR ticket system\n  app.post('/api/admin/privacy/create-ticket', isAuthenticated, async (req, res) => {\n    try {\n      const { requestType, description, userId, institutionId } = req.body;\n      \n      // Calculate due date (30 days from now as per GDPR)\n      const dueDate = new Date();\n      dueDate.setDate(dueDate.getDate() + 30);\n\n      const result = await db.execute(sql`\n        INSERT INTO privacy_requests (\n          id, user_id, institution_id, request_type, description,\n          status, due_date, created_at, updated_at\n        ) VALUES (\n          gen_random_uuid(), ${userId}, ${institutionId}, ${requestType}, ${description},\n          'initiated', ${dueDate.toISOString()}, NOW(), NOW()\n        ) RETURNING *\n      `);\n\n      res.json({\n        success: true,\n        ticket: result.rows[0],\n        message: 'Sol·licitud GDPR creada correctament'\n      });\n    } catch (error) {\n      console.error('Error creating GDPR ticket:', error);\n      res.status(500).json({ message: 'Error creant ticket GDPR' });\n    }\n  });\n\n  // Weekly Schedule with real attendance records\n  app.get('/api/admin/weekly-schedule/:userId/:weekStart', isAuthenticated, async (req, res) => {\n    try {\n      const { userId, weekStart } = req.params;\n      \n      const weekEnd = new Date(weekStart);\n      weekEnd.setDate(weekEnd.getDate() + 6);\n\n      // Get employee_id from user_id\n      const employeeRecord = await db.execute(sql`\n        SELECT id as employee_id FROM employees WHERE user_id = ${userId}\n      `);\n      \n      const actualEmployeeId = employeeRecord.rows[0]?.employee_id;\n      if (!actualEmployeeId) {\n        return res.status(404).json({ message: 'Employee record not found' });\n      }\n\n      // Get real attendance records for the week\n      const attendanceData = await db.execute(sql`\n        SELECT \n          DATE(ar.timestamp AT TIME ZONE 'Europe/Madrid') as day,\n          ar.type,\n          ar.timestamp,\n          ar.notes\n        FROM attendance_records ar\n        WHERE ar.employee_id = ${actualEmployeeId}\n          AND ar.timestamp >= ${weekStart}\n          AND ar.timestamp <= ${weekEnd.toISOString()}\n        ORDER BY ar.timestamp\n      `);\n\n      // Group by day and build schedule\n      const weeklySchedule: Record<string, any> = {};\n      attendanceData.rows.forEach((record: any) => {\n        const day = record.day;\n        if (!weeklySchedule[day]) {\n          weeklySchedule[day] = {\n            date: day,\n            records: [],\n            status: 'no_attendance'\n          };\n        }\n        weeklySchedule[day].records.push(record);\n      });\n\n      // Determine status for each day\n      Object.values(weeklySchedule).forEach((dayData: any) => {\n        const checkIns = dayData.records.filter((r: any) => r.type === 'check_in').length;\n        const checkOuts = dayData.records.filter((r: any) => r.type === 'check_out').length;\n        \n        if (checkIns > 0 && checkOuts > 0) {\n          dayData.status = 'complete';\n        } else if (checkIns > 0 || checkOuts > 0) {\n          dayData.status = 'incomplete';\n        } else {\n          dayData.status = 'no_attendance';\n        }\n      });\n\n      res.json({\n        weekRange: { start: weekStart, end: weekEnd.toISOString() },\n        schedule: weeklySchedule\n      });\n    } catch (error) {\n      console.error('Error fetching weekly schedule:', error);\n      res.status(500).json({ message: 'Error obtenint horari setmanal' });\n    }\n  });\n\n  // Weekly attendance endpoint for employee calendar\n  app.get('/api/attendance/weekly/:employeeId/:weekStart', isAuthenticated, async (req: any, res) => {\n    try {\n      const { employeeId, weekStart } = req.params;\n      const userRole = req.user.role;\n\n      // Check permissions\n      if (userRole === 'employee' && req.user.id !== employeeId) {\n        return res.status(403).json({ message: 'Access denied: can only view your own attendance' });\n      }\n\n      // Get employee_id from user_id\n      const employeeRecord = await db.execute(sql`\n        SELECT e.id as employee_id, u.id as user_id\n        FROM users u\n        LEFT JOIN employees e ON u.id = e.user_id\n        WHERE u.id = ${employeeId}\n      `);\n      \n      const actualEmployeeId = employeeRecord.rows[0]?.employee_id;\n      if (!actualEmployeeId) {\n        return res.json([]); // Return empty array if no employee record\n      }\n\n      const weekEnd = new Date(weekStart);\n      weekEnd.setDate(weekEnd.getDate() + 6);\n\n      console.log('WEEKLY_ATTENDANCE: Fetching for employee_id:', actualEmployeeId, 'week:', weekStart);\n\n      const result = await db.execute(sql`\n        SELECT \n          DATE(ar.timestamp AT TIME ZONE 'Europe/Madrid') as date,\n          ar.type,\n          ar.timestamp,\n          ar.notes,\n          ar.method,\n          ar.location\n        FROM attendance_records ar\n        WHERE ar.employee_id = ${actualEmployeeId}\n          AND DATE(ar.timestamp AT TIME ZONE 'Europe/Madrid') >= DATE(${weekStart})\n          AND DATE(ar.timestamp AT TIME ZONE 'Europe/Madrid') <= DATE(${weekEnd.toISOString()})\n        ORDER BY ar.timestamp\n      `);\n\n      console.log('WEEKLY_ATTENDANCE: Found', result.rows.length, 'records for employee', actualEmployeeId);\n      res.json(result.rows);\n    } catch (error) {\n      console.error('Error fetching weekly attendance:', error);\n      res.status(500).json({ message: 'Error obtenint assistència setmanal', error: error.message });\n    }\n  });\n\n  // ============================================\n  // MISSING CONFIGURATION API ROUTES - CRITICAL FIXES\n  // ============================================\n  \n  // General Settings routes\n  app.get('/api/settings/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const requestingUser = req.user;\n\n      // Role-based access control for settings\n      if (!['admin', 'superadmin'].includes(requestingUser.role)) {\n        return res.status(403).json({ message: 'Access denied: insufficient permissions to view settings' });\n      }\n\n      // Admins can only access settings for their institution\n      if (requestingUser.role === 'admin' && requestingUser.institutionId !== institutionId) {\n        return res.status(403).json({ message: 'Access denied: can only view settings for your institution' });\n      }\n\n      console.log('SETTINGS_GET: User', requestingUser.email, 'accessing settings for institution', institutionId);\n      const settings = await storage.getSettings(institutionId);\n      console.log('SETTINGS_GET: Retrieved', Object.keys(settings || {}).length, 'settings');\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.put('/api/settings/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const requestingUser = req.user;\n\n      // Enhanced role-based access control for settings modification\n      if (!['admin', 'superadmin'].includes(requestingUser.role)) {\n        return res.status(403).json({ message: 'Access denied: insufficient permissions to modify settings' });\n      }\n\n      // Admins can only modify settings for their institution\n      if (requestingUser.role === 'admin' && requestingUser.institutionId !== institutionId) {\n        return res.status(403).json({ message: 'Access denied: can only modify settings for your institution' });\n      }\n\n      const { settings } = req.body;\n\n      console.log('SETTINGS_UPDATE: User', requestingUser.email, 'updating settings for institution', institutionId);\n      console.log('SETTINGS_UPDATE: Settings to update:', Object.keys(settings || {}));\n\n      // Update each setting individually with validation\n      const updatedKeys = [];\n      for (const [key, value] of Object.entries(settings)) {\n        console.log('SETTINGS_UPDATE: Upserting', key, '=', value);\n        await storage.upsertSetting({\n          institutionId,\n          key,\n          value: String(value)\n        });\n        updatedKeys.push(key);\n      }\n\n      console.log('SETTINGS_UPDATE: Successfully updated', updatedKeys.length, 'settings');\n\n      // Verify settings were saved correctly\n      const verificationSettings = await storage.getSettings(institutionId);\n      console.log('SETTINGS_UPDATE: Verification - retrieved', Object.keys(verificationSettings || {}).length, 'settings from DB');\n\n      res.json({ \n        success: true,\n        updatedKeys,\n        message: `Successfully updated ${updatedKeys.length} settings` \n      });\n    } catch (error) {\n      console.error(\"Error updating settings:\", error);\n      res.status(500).json({ message: \"Failed to update settings\" });\n    }\n  });\n\n  // Automated Alerts Settings routes\n  app.get('/api/automated-alerts-settings/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const alertsSettings = await storage.getAutomatedAlertSettings(institutionId);\n      res.json(alertsSettings || {});\n    } catch (error) {\n      console.error(\"Error fetching automated alerts settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch automated alerts settings\" });\n    }\n  });\n\n  app.put('/api/automated-alerts-settings/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const updatedSettings = await storage.updateAutomatedAlertSettings(institutionId, JSON.stringify(req.body));\n      res.json({ success: true, settings: JSON.parse(updatedSettings) });\n    } catch (error) {\n      console.error(\"Error updating automated alerts settings:\", error);\n      res.status(500).json({ message: \"Failed to update automated alerts settings\" });\n    }\n  });\n\n  // POST /api/automated-alerts-settings/:institutionId/test - Test automated alert\n  app.post('/api/automated-alerts-settings/:institutionId/test', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      console.log('AUTOMATED_ALERT_TEST: Testing alert for institution:', institutionId);\n      console.log('AUTOMATED_ALERT_TEST: User:', req.user.email);\n\n      // Get alert settings\n      const alertSettings = await storage.getAutomatedAlertSettings(institutionId);\n      if (!alertSettings) {\n        return res.status(400).json({ message: 'No alert settings configured' });\n      }\n\n      const settings = typeof alertSettings === 'string' ? JSON.parse(alertSettings) : alertSettings;\n      console.log('AUTOMATED_ALERT_TEST: Settings:', settings);\n\n      if (!settings.enabled) {\n        return res.status(400).json({ message: 'Automated alerts are not enabled' });\n      }\n\n      if (!settings.recipientEmails || settings.recipientEmails.length === 0) {\n        return res.status(400).json({ message: 'No recipient emails configured' });\n      }\n\n      // Mock test data\n      const testData = {\n        centerName: 'Institut Bitàcola (Test)',\n        date: new Date().toLocaleDateString('ca-ES'),\n        period: 'Test Period',\n        totalEmployees: 15,\n        delayedEmployees: 2,\n        absentEmployees: 1,\n        totalDelayMinutes: 25\n      };\n\n      // Replace template variables\n      let subject = settings.emailSubjectTemplate || 'Test Alert';\n      let body = settings.emailBodyTemplate || 'This is a test alert.';\n      \n      Object.entries(testData).forEach(([key, value]) => {\n        const placeholder = `{${key}}`;\n        subject = subject.replace(new RegExp(placeholder, 'g'), value.toString());\n        body = body.replace(new RegExp(placeholder, 'g'), value.toString());\n      });\n\n      console.log('AUTOMATED_ALERT_TEST: Sending test email to:', settings.recipientEmails);\n      console.log('AUTOMATED_ALERT_TEST: Subject:', subject);\n\n      // In a real implementation, this would send an actual email\n      // For testing purposes, we'll just simulate success\n      res.json({ \n        success: true, \n        message: 'Test alert sent successfully',\n        recipients: settings.recipientEmails,\n        subject: subject,\n        testMode: true\n      });\n    } catch (error) {\n      console.error(\"Error sending test automated alert:\", error);\n      res.status(500).json({ message: \"Failed to send test alert\" });\n    }\n  });\n\n  // Email Settings routes\n  app.get('/api/email-settings/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const emailSettings = await storage.getEmailSettings(institutionId === 'null' ? null : institutionId);\n      res.json(emailSettings || {});\n    } catch (error) {\n      console.error(\"Error fetching email settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch email settings\" });\n    }\n  });\n\n  app.put('/api/email-settings/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const settings = { \n        ...req.body, \n        institutionId: institutionId === 'null' ? null : institutionId \n      };\n      const updatedSettings = await storage.upsertEmailSettings(settings);\n      res.json(updatedSettings);\n    } catch (error) {\n      console.error(\"Error updating email settings:\", error);\n      res.status(500).json({ message: \"Failed to update email settings\" });\n    }\n  });\n\n  // Attendance Network Settings routes\n  app.get('/api/attendance-network-settings/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const networkSettings = await storage.getAttendanceNetworkSettings(institutionId === 'null' ? null : institutionId);\n      res.json(networkSettings || {});\n    } catch (error) {\n      console.error(\"Error fetching attendance network settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch attendance network settings\" });\n    }\n  });\n\n  app.put('/api/attendance-network-settings/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const settings = { \n        ...req.body, \n        institutionId: institutionId === 'null' ? null : institutionId \n      };\n      const updatedSettings = await storage.upsertAttendanceNetworkSettings(settings);\n      res.json(updatedSettings);\n    } catch (error) {\n      console.error(\"Error updating attendance network settings:\", error);\n      res.status(500).json({ message: \"Failed to update attendance network settings\" });\n    }\n  });\n\n  // Admin users routes - MISSING\n  app.get('/api/users/admins/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const admins = await db.execute(sql`\n        SELECT \n          id, email, first_name as \"firstName\", last_name as \"lastName\",\n          role, created_at as \"createdAt\", updated_at as \"updatedAt\"\n        FROM users \n        WHERE institution_id = ${institutionId} \n          AND role IN ('admin', 'superadmin')\n        ORDER BY first_name, last_name\n      `);\n\n      res.json(admins.rows);\n    } catch (error) {\n      console.error(\"Error fetching admin users:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin users\" });\n    }\n  });\n\n  app.post('/api/users/admins', isAuthenticated, async (req: any, res) => {\n    try {\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { email, firstName, lastName, role, institutionId } = req.body;\n      \n      // Create new admin user\n      const result = await db.execute(sql`\n        INSERT INTO users (institution_id, email, first_name, last_name, role, password_hash)\n        VALUES (${institutionId}, ${email}, ${firstName}, ${lastName}, ${role}, '$2b$10$defaulthash')\n        RETURNING id, email, first_name as \"firstName\", last_name as \"lastName\", role, created_at as \"createdAt\"\n      `);\n\n      res.json(result.rows[0]);\n    } catch (error) {\n      console.error(\"Error creating admin user:\", error);\n      res.status(500).json({ message: \"Failed to create admin user\" });\n    }\n  });\n\n  // Update existing admin user\n  app.put('/api/users/admins/:userId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { email, firstName, lastName, role, institutionId } = req.body;\n      \n      console.log('UPDATE_ADMIN_USER: Updating user ID:', userId);\n      console.log('UPDATE_ADMIN_USER: New data:', { email, firstName, lastName, role });\n      \n      // Update admin user\n      const result = await db.execute(sql`\n        UPDATE users \n        SET \n          email = ${email},\n          first_name = ${firstName},\n          last_name = ${lastName},\n          role = ${role},\n          updated_at = NOW()\n        WHERE id = ${userId} AND institution_id = ${institutionId}\n        RETURNING id, email, first_name as \"firstName\", last_name as \"lastName\", role, updated_at as \"updatedAt\"\n      `);\n\n      if (result.rows.length === 0) {\n        return res.status(404).json({ message: 'User not found or access denied' });\n      }\n\n      console.log('UPDATE_ADMIN_USER: Successfully updated user');\n      res.json(result.rows[0]);\n    } catch (error) {\n      console.error(\"Error updating admin user:\", error);\n      res.status(500).json({ message: \"Failed to update admin user\" });\n    }\n  });\n\n  // Change password for another user (admin functionality)\n  // Canvi de contrasenya per administradors (per a qualsevol usuari)\n  app.put('/api/users/admins/:userId/password', isAuthenticated, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { newPassword } = req.body;\n      \n      console.log('CHANGE_USER_PASSWORD: Admin changing password for user ID:', userId);\n      \n      // Hash the new password\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\n      \n      // Update user password\n      const result = await db.execute(sql`\n        UPDATE users \n        SET \n          password_hash = ${hashedPassword},\n          updated_at = NOW()\n        WHERE id = ${userId} AND institution_id = ${req.user.institutionId}\n        RETURNING id, email\n      `);\n\n      if (result.rows.length === 0) {\n        return res.status(404).json({ message: 'User not found or access denied' });\n      }\n\n      console.log('CHANGE_USER_PASSWORD: Successfully updated password');\n      res.json({ message: 'Password updated successfully' });\n    } catch (error) {\n      console.error(\"Error changing user password:\", error);\n      res.status(500).json({ message: \"Failed to change password\" });\n    }\n  });\n\n  // Canvi de contrasenya pels usuaris (només la seva pròpia)\n  app.put('/api/users/change-password', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { currentPassword, newPassword } = req.body;\n      \n      console.log('CHANGE_OWN_PASSWORD: User changing own password:', userId);\n      \n      // Verificar contrasenya actual\n      const userResult = await db.execute(sql`\n        SELECT password_hash FROM users WHERE id = ${userId}\n      `);\n      \n      if (userResult.rows.length === 0) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      \n      const user = userResult.rows[0];\n      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password_hash as string);\n      \n      if (!isCurrentPasswordValid) {\n        return res.status(400).json({ message: 'Current password is incorrect' });\n      }\n      \n      // Hash nova contrasenya\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\n      \n      // Actualitzar contrasenya\n      await db.execute(sql`\n        UPDATE users \n        SET \n          password_hash = ${hashedPassword},\n          updated_at = NOW()\n        WHERE id = ${userId}\n      `);\n\n      console.log('CHANGE_OWN_PASSWORD: Successfully updated own password');\n      res.json({ message: 'Password updated successfully' });\n    } catch (error) {\n      console.error(\"Error changing own password:\", error);\n      res.status(500).json({ message: \"Failed to change password\" });\n    }\n  });\n\n  // Absence justifications routes - MISSING \n  app.get('/api/absence-justifications/admin/:institutionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId } = req.params;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const absences = await db.execute(sql`\n        SELECT \n          a.id,\n          a.employee_id as \"employeeId\",\n          u.first_name || ' ' || COALESCE(u.last_name, '') as \"employeeName\",\n          a.start_date as \"startDate\",\n          a.end_date as \"endDate\",\n          a.reason,\n          a.status as \"justificationStatus\",\n          a.created_at as \"createdAt\"\n        FROM absences a\n        LEFT JOIN users u ON a.employee_id = u.id\n        LEFT JOIN employees e ON a.employee_id = e.id\n        WHERE e.institution_id = ${institutionId}\n        ORDER BY a.created_at DESC\n        LIMIT 100\n      `);\n\n      res.json(absences.rows);\n    } catch (error) {\n      console.error(\"Error fetching absence justifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch absence justifications\" });\n    }\n  });\n\n  // PUT /api/absence-justifications/:id/status - Update absence justification status\n  app.put('/api/absence-justifications/:id/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status, adminResponse } = req.body;\n      const userRole = req.user.role;\n\n      if (!['admin', 'superadmin'].includes(userRole)) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      if (!['approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: 'Invalid status. Must be approved or rejected' });\n      }\n\n      console.log('ABSENCE_JUSTIFICATION: Updating status for ID:', id, 'to:', status);\n      console.log('ABSENCE_JUSTIFICATION: Admin response:', adminResponse);\n      \n      const result = await db.execute(sql`\n        UPDATE absences \n        SET \n          status = ${status},\n          admin_response = ${adminResponse || null},\n          reviewed_by = ${req.user.id},\n          reviewed_at = NOW(),\n          updated_at = NOW()\n        WHERE id = ${id}\n        RETURNING *\n      `);\n\n      if (result.rows.length === 0) {\n        return res.status(404).json({ message: 'Absence justification not found' });\n      }\n\n      console.log('ABSENCE_JUSTIFICATION: Successfully updated status');\n      res.json({ \n        success: true, \n        message: 'Status updated successfully',\n        absence: result.rows[0]\n      });\n    } catch (error) {\n      console.error(\"Error updating absence justification status:\", error);\n      res.status(500).json({ message: \"Failed to update absence justification status\" });\n    }\n  });\n\n  // GET /admin/weekly-schedule - Get all employees with weekly schedule summary\n  app.get(\"/api/admin/weekly-schedule\", isAuthenticated, async (req: any, res) => {\n    console.log('ADMIN_WEEKLY_SCHEDULE: Request from user:', req.user?.id, 'role:', req.user?.role);\n\n    if (!req.user || !['admin', 'superadmin'].includes(req.user.role)) {\n      console.log('ADMIN_WEEKLY_SCHEDULE: Access denied, insufficient role');\n      return res.status(403).json({ message: 'Access denied: admin role required' });\n    }\n\n    const week = req.query.week as string;\n    if (!week) {\n      return res.status(400).json({ message: 'Week date required (YYYY-MM-DD format)' });\n    }\n\n    try {\n      const result = await db.execute(sql`\n        WITH employee_sessions AS (\n          SELECT \n            u.id,\n            u.first_name,\n            u.last_name,\n            u.email,\n            u.role,\n            COUNT(DISTINCT CONCAT(us.day_of_week, '-', us.hour_period)) as total_sessions,\n            COALESCE(COUNT(DISTINCT CONCAT(us.day_of_week, '-', us.hour_period)), 0) as weekly_hours\n          FROM users u\n          LEFT JOIN employees e ON u.id = e.user_id\n          LEFT JOIN untis_schedule_sessions us ON us.employee_id = e.id\n          WHERE u.institution_id = ${req.user.institutionId}\n            AND u.role = 'employee'\n          GROUP BY u.id, u.first_name, u.last_name, u.email, u.role\n        )\n        SELECT \n          id,\n          first_name as \"firstName\",\n          last_name as \"lastName\",\n          email,\n          role,\n          total_sessions as \"totalSessions\",\n          weekly_hours as \"weeklyHours\"\n        FROM employee_sessions\n        ORDER BY first_name, last_name\n      `);\n\n      console.log('ADMIN_WEEKLY_SCHEDULE: Found', result.rows.length, 'employees');\n      res.json(result.rows);\n    } catch (error) {\n      console.error('ADMIN_WEEKLY_SCHEDULE: Error:', error);\n      res.status(500).json({ message: 'Failed to fetch weekly schedule' });\n    }\n  });\n\n  // GET /admin/personal-schedule/:employeeId - Get detailed personal schedule for specific employee\n  app.get(\"/api/admin/personal-schedule/:employeeId\", isAuthenticated, async (req: any, res) => {\n    const { employeeId } = req.params;\n    const week = req.query.week as string;\n\n    console.log('ADMIN_PERSONAL_SCHEDULE: Request for employee:', employeeId, 'week:', week);\n\n    if (!req.user || !['admin', 'superadmin'].includes(req.user.role)) {\n      console.log('ADMIN_PERSONAL_SCHEDULE: Access denied, insufficient role');\n      return res.status(403).json({ message: 'Access denied: admin role required' });\n    }\n\n    if (!week) {\n      return res.status(400).json({ message: 'Week date required (YYYY-MM-DD format)' });\n    }\n\n    try {\n      // Verify employee belongs to same institution\n      const employee = await db.execute(sql`\n        SELECT u.id, u.first_name, u.institution_id\n        FROM users u\n        WHERE u.id = ${employeeId}\n      `);\n\n      if (employee.rows.length === 0) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n\n      if (employee.rows[0].institution_id !== req.user.institutionId) {\n        return res.status(403).json({ message: 'Access denied: employee not in your institution' });\n      }\n\n      // Get personal schedule sessions from Untis import data\n      // employeeId is actually the user_id, so we need to find the employee_id first\n      const employeeData = await db.execute(sql`\n        SELECT id FROM employees WHERE user_id = ${employeeId}\n      `);\n      \n      const actualEmployeeId = employeeData.rows[0]?.id;\n      \n      if (!actualEmployeeId) {\n        console.log('ADMIN_PERSONAL_SCHEDULE: No employee record found for user:', employeeId);\n        return res.json([]);\n      }\n      \n      const result = await db.execute(sql`\n        SELECT \n          uss.day_of_week as \"dayOfWeek\",\n          uss.hour_period as \"hourPeriod\",\n          'Hora ' || uss.hour_period as \"timeSlot\",\n          uss.subject_code as \"subjectCode\",\n          uss.group_code as \"groupCode\", \n          uss.classroom_code as \"classroomCode\",\n          uss.subject_code || ' (' || uss.group_code || ')' as \"title\",\n          uss.classroom_code as \"location\"\n        FROM untis_schedule_sessions uss\n        WHERE (uss.employee_id = ${actualEmployeeId} OR uss.employee_id IN (\n          SELECT id FROM employees WHERE user_id = ${employeeId}\n        ))\n        AND uss.institution_id = ${req.user.institutionId}\n        ORDER BY uss.day_of_week, uss.hour_period\n      `);\n\n      console.log('ADMIN_PERSONAL_SCHEDULE: Found', result.rows.length, 'sessions for employee:', employeeId);\n      res.json(result.rows);\n    } catch (error) {\n      console.error('ADMIN_PERSONAL_SCHEDULE: Error:', error);\n      res.status(500).json({ message: 'Failed to fetch personal schedule' });\n    }\n  });\n\n  // Alert Rules Management Routes\n  app.get(\"/api/admin/alert-rules/:institutionId\", async (req, res) => {\n    try {\n      const { institutionId } = req.params;\n\n      const alertRules = await db.execute(sql`\n        SELECT * FROM alert_rules \n        WHERE institution_id = ${institutionId}\n        ORDER BY created_at DESC\n      `);\n\n      res.json(alertRules.rows.map(rule => ({\n        id: rule.id,\n        name: rule.name,\n        type: rule.type,\n        enabled: rule.enabled,\n        condition: {\n          threshold: rule.condition_threshold,\n          unit: rule.condition_unit,\n          comparison: rule.condition_comparison\n        },\n        notification: {\n          email: rule.notification_email,\n          internal: rule.notification_internal,\n          emailTemplate: rule.notification_email_template,\n          recipients: rule.notification_recipients || []\n        },\n        schedule: {\n          immediate: rule.schedule_immediate,\n          delay: rule.schedule_delay,\n          repeat: rule.schedule_repeat,\n          repeatInterval: rule.schedule_repeat_interval\n        },\n        createdAt: rule.created_at,\n        updatedAt: rule.updated_at\n      })));\n    } catch (error) {\n      console.error('Error fetching alert rules:', error);\n      res.status(500).json({ message: 'Error fetching alert rules' });\n    }\n  });\n\n  app.post(\"/api/admin/alert-rules\", async (req, res) => {\n    try {\n      const {\n        institutionId,\n        name,\n        type,\n        enabled,\n        condition,\n        notification,\n        schedule\n      } = req.body;\n\n      const result = await db.execute(sql`\n        INSERT INTO alert_rules (\n          institution_id, name, type, enabled,\n          condition_threshold, condition_unit, condition_comparison,\n          notification_email, notification_internal, notification_email_template, notification_recipients,\n          schedule_immediate, schedule_delay, schedule_repeat, schedule_repeat_interval\n        ) VALUES (\n          ${institutionId}, ${name}, ${type}, ${enabled},\n          ${condition.threshold}, ${condition.unit}, ${condition.comparison},\n          ${notification.email}, ${notification.internal}, ${notification.emailTemplate || ''}, ${notification.recipients ? sql`${JSON.stringify(notification.recipients)}::text[]` : sql`'{}'::text[]`},\n          ${schedule.immediate}, ${schedule.delay || 0}, ${schedule.repeat || false}, ${schedule.repeatInterval || 60}\n        )\n        RETURNING *\n      `);\n\n      if (result.rows.length > 0) {\n        const rule = result.rows[0];\n        res.status(201).json({\n          id: rule.id,\n          name: rule.name,\n          type: rule.type,\n          enabled: rule.enabled,\n          condition: {\n            threshold: rule.condition_threshold,\n            unit: rule.condition_unit,\n            comparison: rule.condition_comparison\n          },\n          notification: {\n            email: rule.notification_email,\n            internal: rule.notification_internal,\n            emailTemplate: rule.notification_email_template,\n            recipients: rule.notification_recipients || []\n          },\n          schedule: {\n            immediate: rule.schedule_immediate,\n            delay: rule.schedule_delay,\n            repeat: rule.schedule_repeat,\n            repeatInterval: rule.schedule_repeat_interval\n          },\n          createdAt: rule.created_at,\n          updatedAt: rule.updated_at\n        });\n      } else {\n        res.status(400).json({ message: 'Failed to create alert rule' });\n      }\n    } catch (error) {\n      console.error('Error creating alert rule:', error);\n      res.status(500).json({ message: 'Error creating alert rule' });\n    }\n  });\n\n  app.put(\"/api/admin/alert-rules/:ruleId\", async (req, res) => {\n    try {\n      const { ruleId } = req.params;\n      const {\n        name,\n        type,\n        enabled,\n        condition,\n        notification,\n        schedule\n      } = req.body;\n\n      const result = await db.execute(sql`\n        UPDATE alert_rules SET\n          name = ${name},\n          type = ${type},\n          enabled = ${enabled},\n          condition_threshold = ${condition.threshold},\n          condition_unit = ${condition.unit},\n          condition_comparison = ${condition.comparison},\n          notification_email = ${notification.email},\n          notification_internal = ${notification.internal},\n          notification_email_template = ${notification.emailTemplate || ''},\n          notification_recipients = ${notification.recipients ? sql`${JSON.stringify(notification.recipients)}::text[]` : sql`'{}'::text[]`},\n          schedule_immediate = ${schedule.immediate},\n          schedule_delay = ${schedule.delay || 0},\n          schedule_repeat = ${schedule.repeat || false},\n          schedule_repeat_interval = ${schedule.repeatInterval || 60},\n          updated_at = NOW()\n        WHERE id = ${ruleId}\n        RETURNING *\n      `);\n\n      if (result.rows.length > 0) {\n        const rule = result.rows[0];\n        res.json({\n          id: rule.id,\n          name: rule.name,\n          type: rule.type,\n          enabled: rule.enabled,\n          condition: {\n            threshold: rule.condition_threshold,\n            unit: rule.condition_unit,\n            comparison: rule.condition_comparison\n          },\n          notification: {\n            email: rule.notification_email,\n            internal: rule.notification_internal,\n            emailTemplate: rule.notification_email_template,\n            recipients: rule.notification_recipients || []\n          },\n          schedule: {\n            immediate: rule.schedule_immediate,\n            delay: rule.schedule_delay,\n            repeat: rule.schedule_repeat,\n            repeatInterval: rule.schedule_repeat_interval\n          },\n          createdAt: rule.created_at,\n          updatedAt: rule.updated_at\n        });\n      } else {\n        res.status(404).json({ message: 'Alert rule not found' });\n      }\n    } catch (error) {\n      console.error('Error updating alert rule:', error);\n      res.status(500).json({ message: 'Error updating alert rule' });\n    }\n  });\n\n  app.delete(\"/api/admin/alert-rules/:ruleId\", async (req, res) => {\n    try {\n      const { ruleId } = req.params;\n\n      const result = await db.execute(sql`\n        DELETE FROM alert_rules WHERE id = ${ruleId}\n        RETURNING id\n      `);\n\n      if (result.rows.length > 0) {\n        res.json({ message: 'Alert rule deleted successfully' });\n      } else {\n        res.status(404).json({ message: 'Alert rule not found' });\n      }\n    } catch (error) {\n      console.error('Error deleting alert rule:', error);\n      res.status(500).json({ message: 'Error deleting alert rule' });\n    }\n  });\n\n  // ============================================\n  // QUICK ATTENDANCE ENDPOINTS (for login page)\n  // ============================================\n  \n  // Quick authentication endpoint\n  app.post(\"/api/quick-auth\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ error: \"Email i password són obligatoris\" });\n      }\n\n      // Find user by email\n      const userResult = await db.execute(sql`\n        SELECT id, email, first_name as \"firstName\", last_name as \"lastName\", password_hash, role, institution_id\n        FROM users \n        WHERE email = ${email}\n        LIMIT 1\n      `);\n      \n      if (userResult.rows.length === 0) {\n        return res.status(401).json({ error: \"Credencials incorrectes\" });\n      }\n      \n      const user = userResult.rows[0];\n      \n      // Verify password\n      if (!user.password_hash) {\n        return res.status(401).json({ error: \"L'usuari no té password configurada. Contacta l'administrador.\" });\n      }\n      \n      const isValid = await bcrypt.compare(password, String(user.password_hash));\n      if (!isValid) {\n        return res.status(401).json({ error: \"Credencials incorrectes\" });\n      }\n\n      // Find employee record\n      const employeeResult = await db.execute(sql`\n        SELECT id, user_id, full_name, email, institution_id \n        FROM employees \n        WHERE user_id = ${user.id}\n        LIMIT 1\n      `);\n      \n      if (employeeResult.rows.length === 0) {\n        return res.status(404).json({ error: \"Registre d'empleat no trobat\" });\n      }\n      \n      const employee = employeeResult.rows[0];\n\n      // Determine next action (check-in or check-out) based on today's attendance (Spanish timezone)\n      const todayAttendanceResult = await db.execute(sql`\n        SELECT * FROM attendance_records \n        WHERE employee_id = ${employee.id}\n        AND DATE(timestamp AT TIME ZONE 'Europe/Madrid') = CURRENT_DATE\n        ORDER BY timestamp DESC\n        LIMIT 1\n      `);\n      \n      const nextAction = todayAttendanceResult.rows.length > 0 && \n                        todayAttendanceResult.rows[0].type === \"check_in\" \n                        ? \"check_out\" : \"check_in\";\n\n      res.json({\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role\n        },\n        employee,\n        nextAction\n      });\n    } catch (error) {\n      console.error(\"Error in quick auth:\", error);\n      res.status(500).json({ error: \"Error en l'autenticació ràpida\" });\n    }\n  });\n\n  // Quick attendance endpoint\n  app.post(\"/api/quick-attendance\", async (req, res) => {\n    try {\n      const { employeeId, type } = req.body;\n      \n      if (!employeeId || !type) {\n        return res.status(400).json({ error: \"Employee ID i tipus són obligatoris\" });\n      }\n\n      if (![\"check_in\", \"check_out\"].includes(type)) {\n        return res.status(400).json({ error: \"Tipus ha de ser check_in o check_out\" });\n      }\n\n      // Get employee info\n      const employeeResult = await db.execute(sql`\n        SELECT id, user_id, full_name, email, institution_id \n        FROM employees \n        WHERE id = ${employeeId}\n        LIMIT 1\n      `);\n      \n      if (employeeResult.rows.length === 0) {\n        return res.status(404).json({ error: \"Empleat no trobat\" });\n      }\n      \n      const employee = employeeResult.rows[0];\n\n      // Create attendance record with Spanish timezone\n      const utcTimestamp = new Date();\n      const spanishTimestamp = new Date(utcTimestamp.getTime() + (2 * 60 * 60 * 1000)); // Add 2 hours for Spanish time\n      \n      console.log(\"🕐 TIMEZONE DEBUG:\");\n      console.log(\"  UTC Timestamp:\", utcTimestamp.toISOString());\n      console.log(\"  Spanish Timestamp:\", spanishTimestamp.toISOString());\n      console.log(\"  Local time should be:\", spanishTimestamp.toLocaleString('es-ES', { timeZone: 'Europe/Madrid' }));\n      \n      const attendanceResult = await db.execute(sql`\n        INSERT INTO attendance_records (employee_id, type, timestamp, method, location, notes)\n        VALUES (${employee.id}, ${type}, ${spanishTimestamp.toISOString()}, 'manual', 'Office', ${`Marcatge ràpid - ${employee.full_name}`})\n        RETURNING *\n      `);\n      \n      console.log(\"✅ RECORD INSERTED:\", attendanceResult.rows[0]);\n      \n      const attendance = attendanceResult.rows[0];\n\n      // Return response with proper formatting\n      res.json({\n        ...attendance,\n        employeeName: employee.full_name,\n        message: type === \"check_in\" ? \n          `Entrada registrada per ${employee.full_name}` : \n          `Sortida registrada per ${employee.full_name}`,\n        isLate: false,\n        lateMinutes: 0\n      });\n    } catch (error) {\n      console.error(\"Error in quick attendance:\", error);\n      res.status(500).json({ error: \"Error en el marcatge ràpid\" });\n    }\n  });\n\n  // ============================================\n  // QR ATTENDANCE PUBLIC ENDPOINT - UNIPERSONAL\n  // ============================================\n  \n  // QR Processing endpoint for UnifiedQR (auth required)\n  app.post(\"/api/qr/process\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { qrCode, timestamp, location } = req.body;\n      const currentUser = req.user;\n      \n      if (!qrCode || !timestamp) {\n        return res.status(400).json({ error: \"Codi QR i timestamp són obligatoris\" });\n      }\n\n      // QR data format: userId-YYYY-MM-DD (per complir normativa vigent)\n      const qrParts = qrCode.trim().split('-');\n      \n      if (qrParts.length < 4) {\n        return res.status(400).json({ error: \"Format del codi QR no vàlid\" });\n      }\n      \n      // Extraure user ID i data del QR\n      const userIdParts = qrParts.slice(0, -3);\n      const qrUserId = userIdParts.join('-');\n      const qrDate = `${qrParts[qrParts.length-3]}-${qrParts[qrParts.length-2]}-${qrParts[qrParts.length-1]}`;\n      const todayDate = new Date().toISOString().split('T')[0];\n      \n      // Security: Only allow users to scan their own QR code\n      if (qrUserId !== currentUser.id) {\n        return res.status(403).json({ \n          error: \"Només pots utilitzar el teu propi codi QR personal.\",\n          code: \"UNAUTHORIZED_QR\"\n        });\n      }\n      \n      // Validar que el QR és d'avui (normativa vigent)\n      if (qrDate !== todayDate) {\n        return res.status(400).json({ \n          error: \"Aquest codi QR ha caducat. Genera un nou codi QR des de la teva àrea personal.\",\n          code: \"QR_EXPIRED\"\n        });\n      }\n      \n      // Get employee record for the current user\n      const employeeResult = await db.execute(sql`\n        SELECT id, user_id, full_name, email, institution_id \n        FROM employees \n        WHERE user_id = ${currentUser.id}\n        LIMIT 1\n      `);\n      \n      if (employeeResult.rows.length === 0) {\n        return res.status(404).json({ error: \"No s'ha trobat el perfil d'empleat\" });\n      }\n      \n      const employee = employeeResult.rows[0];\n\n      // Get employee's latest attendance record for today\n      const todayAttendanceResult = await db.execute(sql`\n        SELECT * FROM attendance_records \n        WHERE employee_id = ${employee.id}\n        AND DATE(timestamp AT TIME ZONE 'Europe/Madrid') = CURRENT_DATE\n        ORDER BY timestamp DESC\n      `);\n      \n      const todayAttendance = todayAttendanceResult.rows;\n\n      // Determine if this should be check-in or check-out\n      let attendanceType: \"check_in\" | \"check_out\" = \"check_in\";\n      \n      if (todayAttendance.length > 0) {\n        const sortedAttendance = todayAttendance.sort((a: any, b: any) => \n          new Date(String(b.timestamp)).getTime() - new Date(String(a.timestamp)).getTime()\n        );\n        const lastRecord = sortedAttendance[0];\n        \n        if (lastRecord.type === \"check_in\") {\n          attendanceType = \"check_out\";\n        }\n      }\n\n      // Create attendance record with Spanish timezone adjustment\n      const utcTimestamp = new Date(timestamp);\n      const spanishTimestamp = new Date(utcTimestamp.getTime() + (2 * 60 * 60 * 1000));\n\n      const attendanceResult = await db.execute(sql`\n        INSERT INTO attendance_records (employee_id, type, timestamp, method, location, notes)\n        VALUES (${employee.id}, ${attendanceType}, ${spanishTimestamp.toISOString()}, 'qr', ${location || 'UnifiedQR'}, ${`Fitxatge QR unificat - ${employee.full_name}`})\n        RETURNING *\n      `);\n      \n      const attendance = attendanceResult.rows[0];\n\n      // Return detailed response\n      res.json({\n        ...attendance,\n        employeeName: employee.full_name,\n        type: attendanceType,\n        timestamp: attendance.timestamp,\n        isLate: false,\n        lateMinutes: 0,\n        message: attendanceType === \"check_in\" ? \n          `Entrada registrada per ${employee.full_name}` : \n          `Sortida registrada per ${employee.full_name}`\n      });\n\n    } catch (error) {\n      console.error(\"Error processing QR:\", error);\n      res.status(500).json({ error: \"Error processant el codi QR\" });\n    }\n  });\n  \n  // ================================================\n  // UNTIS IMPORT ENDPOINTS - SISTEMA D'IMPORTACIÓ\n  // ================================================\n  \n  // POST /api/schedule-import/complete-import - Importació completa de dades GP Untis\n  app.post(\"/api/schedule-import/complete-import\", isAuthenticated, async (req: any, res) => {\n    try {\n      console.log('UNTIS_IMPORT: Starting complete import for institution:', req.user?.institutionId);\n      \n      if (!req.user || !['admin', 'superadmin'].includes(req.user.role)) {\n        return res.status(403).json({ message: 'Access denied: admin role required' });\n      }\n\n      // Get active academic year\n      const activeYear = await storage.getActiveAcademicYear(req.user.institutionId);\n      if (!activeYear) {\n        return res.status(400).json({ message: 'No hi ha cap curs acadèmic actiu' });\n      }\n\n      // Execute complete import\n      const result = await storage.importCompleteUntisData(req.user.institutionId, activeYear.id);\n      \n      res.json({\n        ...result,\n        message: 'Importació completa d\\'Untis realitzada correctament'\n      });\n    } catch (error) {\n      console.error('UNTIS_IMPORT: Complete import error:', error);\n      res.status(500).json({ \n        message: 'Error en la importació completa d\\'Untis',\n        error: error instanceof Error ? error.message : 'Error desconegut'\n      });\n    }\n  });\n\n  // POST /api/schedule-import/import-teachers - Importació només de professorat\n  app.post(\"/api/schedule-import/import-teachers\", isAuthenticated, async (req: any, res) => {\n    try {\n      console.log('UNTIS_IMPORT: Starting teachers import for institution:', req.user?.institutionId);\n      \n      if (!req.user || !['admin', 'superadmin'].includes(req.user.role)) {\n        return res.status(403).json({ message: 'Access denied: admin role required' });\n      }\n\n      // Get active academic year\n      const activeYear = await storage.getActiveAcademicYear(req.user.institutionId);\n      if (!activeYear) {\n        return res.status(400).json({ message: 'No hi ha cap curs acadèmic actiu' });\n      }\n\n      // Import only teachers from predefined file\n      const fs = await import('fs');\n      const teachersPath = './attached_assets/PROFESSORAT_1755422511894.TXT';\n      \n      if (!fs.existsSync(teachersPath)) {\n        return res.status(404).json({ \n          message: 'Fitxer de professorat no trobat: PROFESSORAT_1755422511894.TXT' \n        });\n      }\n\n      const teachersContent = fs.readFileSync(teachersPath, 'utf8');\n      const result = await storage.importUntisTeachers(teachersContent, req.user.institutionId, activeYear.id);\n      \n      res.json({\n        success: true,\n        created: result.created,\n        updated: result.updated,\n        message: `Professorat importat: ${result.created} creats, ${result.updated} actualitzats`\n      });\n    } catch (error) {\n      console.error('UNTIS_IMPORT: Teachers import error:', error);\n      res.status(500).json({ \n        message: 'Error en la importació de professorat',\n        error: error instanceof Error ? error.message : 'Error desconegut'\n      });\n    }\n  });\n\n  // POST /api/schedule-import/test-real - Importació només d'horaris\n  app.post(\"/api/schedule-import/test-real\", isAuthenticated, async (req: any, res) => {\n    try {\n      console.log('UNTIS_IMPORT: Starting schedules import for institution:', req.user?.institutionId);\n      \n      if (!req.user || !['admin', 'superadmin'].includes(req.user.role)) {\n        return res.status(403).json({ message: 'Access denied: admin role required' });\n      }\n\n      // Get active academic year\n      const activeYear = await storage.getActiveAcademicYear(req.user.institutionId);\n      if (!activeYear) {\n        return res.status(400).json({ message: 'No hi ha cap curs acadèmic actiu' });\n      }\n\n      // Import only schedules from predefined file\n      const fs = await import('fs');\n      const schedulesPath = './attached_assets/HORARIS_1755422110445.TXT';\n      \n      if (!fs.existsSync(schedulesPath)) {\n        return res.status(404).json({ \n          message: 'Fitxer d\\'horaris no trobat: HORARIS_1755422110445.TXT' \n        });\n      }\n\n      const schedulesContent = fs.readFileSync(schedulesPath, 'utf8');\n      const result = await storage.importUntisSchedule(schedulesContent, req.user.institutionId, activeYear.id);\n      \n      res.json({\n        success: true,\n        sessionsImported: result.sessionsImported,\n        employeesLinked: result.employeesLinked,\n        message: `Horaris importats: ${result.sessionsImported} sessions d'horaris`\n      });\n    } catch (error) {\n      console.error('UNTIS_IMPORT: Schedules import error:', error);\n      res.status(500).json({ \n        message: 'Error en la importació d\\'horaris',\n        error: error instanceof Error ? error.message : 'Error desconegut'\n      });\n    }\n  });\n\n  // GET /api/schedule-import/statistics - Estadístiques d'importació\n  app.get(\"/api/schedule-import/statistics/:institutionId/:academicYearId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { institutionId, academicYearId } = req.params;\n      \n      if (!req.user || !['admin', 'superadmin'].includes(req.user.role)) {\n        return res.status(403).json({ message: 'Access denied: admin role required' });\n      }\n\n      if (institutionId !== req.user.institutionId) {\n        return res.status(403).json({ message: 'Access denied: institution mismatch' });\n      }\n\n      const stats = await storage.getUntisScheduleStatistics(institutionId, academicYearId);\n      \n      res.json({\n        success: true,\n        statistics: stats\n      });\n    } catch (error) {\n      console.error('UNTIS_IMPORT: Statistics error:', error);\n      res.status(500).json({ \n        message: 'Error obtenint estadístiques d\\'importació',\n        error: error instanceof Error ? error.message : 'Error desconegut'\n      });\n    }\n  });\n\n  return httpServer;\n}","size_bytes":123697},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { \n  institutions, \n  academicYears, \n  departments, \n  users, \n  employees, \n  schedules,\n  settings \n} from \"@shared/schema\";\nimport type { \n  InsertInstitution, \n  InsertEmployee, \n  InsertSchedule,\n  InsertSetting,\n  UpsertUser\n} from \"@shared/schema\";\n\n// Institut Bitàcola test data for 2025-2026\nexport async function seedDatabase() {\n  console.log(\"🌱 Starting database seeding...\");\n\n  try {\n    // 1. Create Institut Bitàcola\n    const [institution] = await db.insert(institutions).values({\n      name: \"Institut Bitàcola\",\n      address: \"Carrer de l'Educació, 123, 08080 Barcelona, Catalunya\",\n      timezone: \"Europe/Barcelona\",\n      defaultLanguage: \"ca\"\n    }).returning();\n\n    console.log(`✅ Created institution: ${institution.name}`);\n\n    // 2. Create Academic Year 2025-2026\n    const [academicYear] = await db.insert(academicYears).values({\n      institutionId: institution.id,\n      name: \"2025-2026\",\n      startDate: \"2025-09-15\",\n      endDate: \"2026-06-22\",\n      isActive: true\n    }).returning();\n\n    console.log(`✅ Created academic year: ${academicYear.name}`);\n\n    // 3. Create Departments\n    const departmentData = [\n      { name: \"Matemàtiques\", institutionId: institution.id },\n      { name: \"Llengua Catalana i Literatura\", institutionId: institution.id },\n      { name: \"Llengua Castellana i Literatura\", institutionId: institution.id },\n      { name: \"Anglès\", institutionId: institution.id },\n      { name: \"Ciències Naturals\", institutionId: institution.id },\n      { name: \"Física i Química\", institutionId: institution.id },\n      { name: \"Història\", institutionId: institution.id },\n      { name: \"Geografia\", institutionId: institution.id },\n      { name: \"Educació Física\", institutionId: institution.id },\n      { name: \"Tecnologia\", institutionId: institution.id },\n      { name: \"Arts Plàstiques\", institutionId: institution.id },\n      { name: \"Música\", institutionId: institution.id },\n      { name: \"Administració\", institutionId: institution.id }\n    ];\n\n    const createdDepartments = await db.insert(departments).values(departmentData).returning();\n    console.log(`✅ Created ${createdDepartments.length} departments`);\n\n    // 4. Create 20 Teachers with realistic Catalan names and data\n    const teachersData: UpsertUser[] = [\n      { id: \"user-001\", email: \"marta.puig@institutbitacola.edu.cat\", firstName: \"Marta\", lastName: \"Puig Solà\", role: \"admin\", institutionId: institution.id },\n      { id: \"user-002\", email: \"jordi.vila@institutbitacola.edu.cat\", firstName: \"Jordi\", lastName: \"Vila Martín\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-003\", email: \"carme.roca@institutbitacola.edu.cat\", firstName: \"Carme\", lastName: \"Roca Fortuny\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-004\", email: \"pere.mas@institutbitacola.edu.cat\", firstName: \"Pere\", lastName: \"Mas Ribas\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-005\", email: \"anna.font@institutbitacola.edu.cat\", firstName: \"Anna\", lastName: \"Font Casals\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-006\", email: \"david.serra@institutbitacola.edu.cat\", firstName: \"David\", lastName: \"Serra Vidal\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-007\", email: \"laura.tort@institutbitacola.edu.cat\", firstName: \"Laura\", lastName: \"Tort Camps\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-008\", email: \"xavier.pla@institutbitacola.edu.cat\", firstName: \"Xavier\", lastName: \"Pla Bosch\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-009\", email: \"montse.olive@institutbitacola.edu.cat\", firstName: \"Montserrat\", lastName: \"Olivé Rovira\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-010\", email: \"ramon.soler@institutbitacola.edu.cat\", firstName: \"Ramon\", lastName: \"Soler Pons\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-011\", email: \"teresa.mir@institutbitacola.edu.cat\", firstName: \"Teresa\", lastName: \"Mir Comas\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-012\", email: \"marc.sala@institutbitacola.edu.cat\", firstName: \"Marc\", lastName: \"Sala Ferrer\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-013\", email: \"nuria.costa@institutbitacola.edu.cat\", firstName: \"Núria\", lastName: \"Costa Blanch\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-014\", email: \"albert.torres@institutbitacola.edu.cat\", firstName: \"Albert\", lastName: \"Torres Gual\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-015\", email: \"rosa.camps@institutbitacola.edu.cat\", firstName: \"Rosa\", lastName: \"Camps Valls\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-016\", email: \"lluis.naval@institutbitacola.edu.cat\", firstName: \"Lluís\", lastName: \"Naval Puche\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-017\", email: \"pilar.julia@institutbitacola.edu.cat\", firstName: \"Pilar\", lastName: \"Julià Ribó\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-018\", email: \"enric.moya@institutbitacola.edu.cat\", firstName: \"Enric\", lastName: \"Moya Llobera\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-019\", email: \"cristina.ramos@institutbitacola.edu.cat\", firstName: \"Cristina\", lastName: \"Ramos Llull\", role: \"employee\", institutionId: institution.id },\n      { id: \"user-020\", email: \"francesc.garcia@institutbitacola.edu.cat\", firstName: \"Francesc\", lastName: \"Garcia Miró\", role: \"employee\", institutionId: institution.id }\n    ];\n\n    // Insert users using upsert\n    const createdUsers = [];\n    for (const userData of teachersData) {\n      const [user] = await db.insert(users).values(userData).onConflictDoUpdate({\n        target: users.id,\n        set: { ...userData, updatedAt: new Date() }\n      }).returning();\n      createdUsers.push(user);\n    }\n\n    console.log(`✅ Created ${createdUsers.length} users`);\n\n    // 5. Create Employee records with realistic assignment to departments\n    const employeesData: InsertEmployee[] = [\n      { userId: \"user-001\", institutionId: institution.id, departmentId: createdDepartments[12].id, dni: \"12345678A\", fullName: \"Marta Puig Solà\", email: \"marta.puig@institutbitacola.edu.cat\", phone: \"+34 93 123 45 67\", contractType: \"full_time\", status: \"active\", startDate: \"2025-09-01\" },\n      { userId: \"user-002\", institutionId: institution.id, departmentId: createdDepartments[0].id, dni: \"23456789B\", fullName: \"Jordi Vila Martín\", email: \"jordi.vila@institutbitacola.edu.cat\", phone: \"+34 93 234 56 78\", contractType: \"full_time\", status: \"active\", startDate: \"2023-09-01\" },\n      { userId: \"user-003\", institutionId: institution.id, departmentId: createdDepartments[1].id, dni: \"34567890C\", fullName: \"Carme Roca Fortuny\", email: \"carme.roca@institutbitacola.edu.cat\", phone: \"+34 93 345 67 89\", contractType: \"full_time\", status: \"active\", startDate: \"2022-09-01\" },\n      { userId: \"user-004\", institutionId: institution.id, departmentId: createdDepartments[2].id, dni: \"45678901D\", fullName: \"Pere Mas Ribas\", email: \"pere.mas@institutbitacola.edu.cat\", phone: \"+34 93 456 78 90\", contractType: \"full_time\", status: \"active\", startDate: \"2021-09-01\" },\n      { userId: \"user-005\", institutionId: institution.id, departmentId: createdDepartments[3].id, dni: \"56789012E\", fullName: \"Anna Font Casals\", email: \"anna.font@institutbitacola.edu.cat\", phone: \"+34 93 567 89 01\", contractType: \"full_time\", status: \"active\", startDate: \"2024-09-01\" },\n      { userId: \"user-006\", institutionId: institution.id, departmentId: createdDepartments[4].id, dni: \"67890123F\", fullName: \"David Serra Vidal\", email: \"david.serra@institutbitacola.edu.cat\", phone: \"+34 93 678 90 12\", contractType: \"full_time\", status: \"active\", startDate: \"2020-09-01\" },\n      { userId: \"user-007\", institutionId: institution.id, departmentId: createdDepartments[5].id, dni: \"78901234G\", fullName: \"Laura Tort Camps\", email: \"laura.tort@institutbitacola.edu.cat\", phone: \"+34 93 789 01 23\", contractType: \"full_time\", status: \"active\", startDate: \"2023-09-01\" },\n      { userId: \"user-008\", institutionId: institution.id, departmentId: createdDepartments[6].id, dni: \"89012345H\", fullName: \"Xavier Pla Bosch\", email: \"xavier.pla@institutbitacola.edu.cat\", phone: \"+34 93 890 12 34\", contractType: \"full_time\", status: \"active\", startDate: \"2022-09-01\" },\n      { userId: \"user-009\", institutionId: institution.id, departmentId: createdDepartments[7].id, dni: \"90123456I\", fullName: \"Montserrat Olivé Rovira\", email: \"montse.olive@institutbitacola.edu.cat\", phone: \"+34 93 901 23 45\", contractType: \"part_time\", status: \"active\", startDate: \"2024-09-01\" },\n      { userId: \"user-010\", institutionId: institution.id, departmentId: createdDepartments[8].id, dni: \"01234567J\", fullName: \"Ramon Soler Pons\", email: \"ramon.soler@institutbitacola.edu.cat\", phone: \"+34 93 012 34 56\", contractType: \"full_time\", status: \"active\", startDate: \"2019-09-01\" },\n      { userId: \"user-011\", institutionId: institution.id, departmentId: createdDepartments[9].id, dni: \"12345670K\", fullName: \"Teresa Mir Comas\", email: \"teresa.mir@institutbitacola.edu.cat\", phone: \"+34 93 123 45 70\", contractType: \"full_time\", status: \"active\", startDate: \"2023-09-01\" },\n      { userId: \"user-012\", institutionId: institution.id, departmentId: createdDepartments[10].id, dni: \"23456701L\", fullName: \"Marc Sala Ferrer\", email: \"marc.sala@institutbitacola.edu.cat\", phone: \"+34 93 234 56 01\", contractType: \"full_time\", status: \"active\", startDate: \"2025-09-01\" },\n      { userId: \"user-013\", institutionId: institution.id, departmentId: createdDepartments[11].id, dni: \"34567012M\", fullName: \"Núria Costa Blanch\", email: \"nuria.costa@institutbitacola.edu.cat\", phone: \"+34 93 345 60 12\", contractType: \"full_time\", status: \"active\", startDate: \"2024-09-01\" },\n      { userId: \"user-014\", institutionId: institution.id, departmentId: createdDepartments[0].id, dni: \"45670123N\", fullName: \"Albert Torres Gual\", email: \"albert.torres@institutbitacola.edu.cat\", phone: \"+34 93 456 01 23\", contractType: \"part_time\", status: \"active\", startDate: \"2023-09-01\" },\n      { userId: \"user-015\", institutionId: institution.id, departmentId: createdDepartments[1].id, dni: \"56701234O\", fullName: \"Rosa Camps Valls\", email: \"rosa.camps@institutbitacola.edu.cat\", phone: \"+34 93 567 12 34\", contractType: \"full_time\", status: \"active\", startDate: \"2022-09-01\" },\n      { userId: \"user-016\", institutionId: institution.id, departmentId: createdDepartments[2].id, dni: \"67012345P\", fullName: \"Lluís Naval Puche\", email: \"lluis.naval@institutbitacola.edu.cat\", phone: \"+34 93 601 23 45\", contractType: \"full_time\", status: \"active\", startDate: \"2021-09-01\" },\n      { userId: \"user-017\", institutionId: institution.id, departmentId: createdDepartments[3].id, dni: \"70123456Q\", fullName: \"Pilar Julià Ribó\", email: \"pilar.julia@institutbitacola.edu.cat\", phone: \"+34 93 012 34 67\", contractType: \"substitute\", status: \"active\", startDate: \"2025-01-15\" },\n      { userId: \"user-018\", institutionId: institution.id, departmentId: createdDepartments[4].id, dni: \"01234568R\", fullName: \"Enric Moya Llobera\", email: \"enric.moya@institutbitacola.edu.cat\", phone: \"+34 93 123 45 68\", contractType: \"full_time\", status: \"active\", startDate: \"2020-09-01\" },\n      { userId: \"user-019\", institutionId: institution.id, departmentId: createdDepartments[5].id, dni: \"12345679S\", fullName: \"Cristina Ramos Llull\", email: \"cristina.ramos@institutbitacola.edu.cat\", phone: \"+34 93 234 56 79\", contractType: \"full_time\", status: \"active\", startDate: \"2024-09-01\" },\n      { userId: \"user-020\", institutionId: institution.id, departmentId: createdDepartments[6].id, dni: \"23456780T\", fullName: \"Francesc Garcia Miró\", email: \"francesc.garcia@institutbitacola.edu.cat\", phone: \"+34 93 345 67 80\", contractType: \"full_time\", status: \"active\", startDate: \"2023-09-01\" }\n    ];\n\n    const createdEmployees = await db.insert(employees).values(employeesData).returning();\n    console.log(`✅ Created ${createdEmployees.length} employees`);\n\n    // 6. Create realistic schedules for teachers (Monday to Friday, different subjects)\n    const scheduleData: InsertSchedule[] = [];\n    \n    // Standard schedule: 8:00-14:30 Monday to Friday for full-time teachers\n    createdEmployees.forEach((employee, index) => {\n      if (employee.contractType === \"full_time\") {\n        for (let day = 1; day <= 5; day++) { // Monday to Friday\n          scheduleData.push({\n            employeeId: employee.id,\n            dayOfWeek: day,\n            startTime: \"08:00\",\n            endTime: \"14:30\",\n            isActive: true\n          });\n        }\n      } else if (employee.contractType === \"part_time\") {\n        // Part-time: alternate days or reduced hours\n        for (let day = 1; day <= 5; day += 2) { // Monday, Wednesday, Friday\n          scheduleData.push({\n            employeeId: employee.id,\n            dayOfWeek: day,\n            startTime: \"08:00\",\n            endTime: \"12:00\",\n            isActive: true\n          });\n        }\n      } else if (employee.contractType === \"substitute\") {\n        // Substitute: flexible schedule when needed\n        scheduleData.push({\n          employeeId: employee.id,\n          dayOfWeek: 1,\n          startTime: \"08:00\",\n          endTime: \"14:30\",\n          isActive: false\n        });\n      }\n    });\n\n    const createdSchedules = await db.insert(schedules).values(scheduleData).returning();\n    console.log(`✅ Created ${createdSchedules.length} schedule entries`);\n\n    // 7. Create institution settings\n    const settingsData: InsertSetting[] = [\n      { institutionId: institution.id, key: \"attendance_late_threshold\", value: \"15\" }, // 15 minutes\n      { institutionId: institution.id, key: \"attendance_very_late_threshold\", value: \"30\" }, // 30 minutes\n      { institutionId: institution.id, key: \"auto_alert_late_arrival\", value: \"true\" },\n      { institutionId: institution.id, key: \"auto_alert_missing_checkout\", value: \"true\" },\n      { institutionId: institution.id, key: \"notification_email_enabled\", value: \"true\" },\n      { institutionId: institution.id, key: \"timezone\", value: \"Europe/Barcelona\" },\n      { institutionId: institution.id, key: \"working_days\", value: \"1,2,3,4,5\" }, // Monday to Friday\n      { institutionId: institution.id, key: \"substitute_auto_assignment\", value: \"false\" }\n    ];\n\n    const createdSettings = await db.insert(settings).values(settingsData).returning();\n    console.log(`✅ Created ${createdSettings.length} institution settings`);\n\n    console.log(\"🎉 Database seeding completed successfully!\");\n    \n    return {\n      institution,\n      academicYear,\n      departments: createdDepartments,\n      users: createdUsers,\n      employees: createdEmployees,\n      schedules: createdSchedules,\n      settings: createdSettings\n    };\n\n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    throw error;\n  }\n}\n\n// Function to clear existing test data before reseeding\nexport async function clearTestData() {\n  console.log(\"🧹 Clearing existing test data...\");\n  \n  try {\n    // Clear in reverse order due to foreign key constraints\n    await db.delete(schedules);\n    await db.delete(employees);\n    await db.delete(users);\n    await db.delete(departments);\n    await db.delete(academicYears);\n    await db.delete(institutions);\n    await db.delete(settings);\n    \n    console.log(\"✅ Test data cleared successfully\");\n  } catch (error) {\n    console.error(\"❌ Error clearing test data:\", error);\n    throw error;\n  }\n}","size_bytes":15756},"server/storage.ts":{"content":"import {\n  users,\n  institutions,\n  academicYears,\n  employees,\n  departments,\n  schedules,\n  attendanceRecords,\n  absences,\n  alerts,\n  substituteAssignments,\n  settings,\n  attendanceNetworkSettings,\n  emailSettings,\n  absenceJustifications,\n  alertNotifications,\n  subjects,\n  classGroups,\n  classrooms,\n  untisScheduleSessions,\n  communications,\n  communicationAttachments,\n  communicationAuditLog,\n  messageTemplates,\n  weeklySchedule,\n  type User,\n  type UpsertUser,\n  type Institution,\n  type InsertInstitution,\n  type AcademicYear,\n  type InsertAcademicYear,\n  type Employee,\n  type InsertEmployee,\n  type Schedule,\n  type InsertSchedule,\n  type AttendanceRecord,\n  type InsertAttendanceRecord,\n  type Absence,\n  type InsertAbsence,\n  type Alert,\n  type InsertAlert,\n  type SubstituteAssignment,\n  type InsertSubstituteAssignment,\n  type Setting,\n  type InsertSetting,\n  type AttendanceNetworkSetting,\n  type InsertAttendanceNetworkSetting,\n  type EmailSetting,\n  type InsertEmailSetting,\n  type AbsenceJustification,\n  type InsertAbsenceJustification,\n  type AlertNotification,\n  type InsertAlertNotification,\n  type Subject,\n  type InsertSubject,\n  type ClassGroup,\n  type InsertClassGroup,\n  type Classroom,\n  type InsertClassroom,\n  type UntisScheduleSession,\n  type InsertUntisScheduleSession,\n  type Communication,\n  type InsertCommunication,\n  type CommunicationAttachment,\n  type InsertCommunicationAttachment,\n  type CommunicationAuditLog,\n  type InsertCommunicationAuditLog,\n  type MessageTemplate,\n  type InsertMessageTemplate,\n  type WeeklySchedule,\n  type InsertWeeklySchedule,\n} from \"@shared/schema\";\nimport { logger } from './logger';\nimport { db } from \"./db\";\nimport { eq, and, gte, lte, desc, asc, or, sql, count, ne, isNull } from \"drizzle-orm\";\nimport { alias } from \"drizzle-orm/pg-core\";\nimport { format } from \"date-fns\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Institution operations\n  getInstitutions(): Promise<Institution[]>;\n  createInstitution(institution: InsertInstitution): Promise<Institution>;\n\n  // Academic year operations\n  getAcademicYears(institutionId: string): Promise<AcademicYear[]>;\n  createAcademicYear(academicYear: InsertAcademicYear): Promise<AcademicYear>;\n  deleteInstitution(id: string): Promise<void>;\n\n  // Employee operations\n  getEmployees(institutionId: string): Promise<Employee[]>;\n  getEmployee(id: string): Promise<Employee | undefined>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  updateEmployee(id: string, employee: Partial<InsertEmployee>): Promise<Employee>;\n  deleteEmployee(id: string): Promise<void>;\n  searchEmployees(institutionId: string, query: string): Promise<Employee[]>;\n\n  // Schedule operations\n  getEmployeeSchedules(employeeId: string): Promise<Schedule[]>;\n  createSchedule(schedule: InsertSchedule): Promise<Schedule>;\n  updateSchedule(id: string, schedule: Partial<InsertSchedule>): Promise<Schedule>;\n  deleteSchedule(id: string): Promise<void>;\n\n  // Attendance operations\n  getAttendanceRecords(employeeId: string, startDate?: Date, endDate?: Date): Promise<AttendanceRecord[]>;\n  createAttendanceRecord(record: InsertAttendanceRecord): Promise<AttendanceRecord>;\n  getInstitutionAttendance(institutionId: string, date: Date): Promise<any[]>;\n\n  // Absence operations\n  getAbsences(employeeId?: string, institutionId?: string): Promise<Absence[]>;\n  createAbsence(absence: InsertAbsence): Promise<Absence>;\n  updateAbsence(id: string, absence: Partial<InsertAbsence>): Promise<Absence>;\n\n  // Alert operations\n  getActiveAlerts(institutionId: string): Promise<Alert[]>;\n  createAlert(alert: InsertAlert): Promise<Alert>;\n  resolveAlert(id: string, resolvedBy: string): Promise<Alert>;\n\n  // Substitute operations\n  getSubstituteAssignments(date: Date, institutionId: string): Promise<SubstituteAssignment[]>;\n  createSubstituteAssignment(assignment: InsertSubstituteAssignment): Promise<SubstituteAssignment>;\n\n  // Settings operations\n  getSettings(institutionId: string | null): Promise<Setting[]>;\n  getSetting(institutionId: string, key: string): Promise<Setting | undefined>;\n  upsertSetting(setting: InsertSetting): Promise<Setting>;\n\n  // Network settings operations\n  getAttendanceNetworkSettings(institutionId: string | null): Promise<AttendanceNetworkSetting | undefined>;\n  upsertAttendanceNetworkSettings(settings: InsertAttendanceNetworkSetting): Promise<AttendanceNetworkSetting>;\n  isIPAllowedForAttendance(institutionId: string, clientIP: string): Promise<boolean>;\n\n  // Email settings operations\n  getEmailSettings(institutionId: string | null): Promise<EmailSetting | undefined>;\n  upsertEmailSettings(settings: InsertEmailSetting): Promise<EmailSetting>;\n\n  // Absence justifications operations\n  getAbsenceJustifications(employeeId: string): Promise<AbsenceJustification[]>;\n  createAbsenceJustification(justification: InsertAbsenceJustification): Promise<AbsenceJustification>;\n  updateAbsenceJustificationStatus(id: string, status: string, adminResponse?: string): Promise<AbsenceJustification>;\n\n  // Alert notifications operations\n  createAlertNotification(notification: InsertAlertNotification): Promise<AlertNotification>;\n  getAlertNotifications(institutionId: string | null): Promise<AlertNotification[]>;\n\n  // Password management operations\n  updateUserPassword(userId: string, newPassword: string): Promise<User>;\n\n  // Weekly attendance operations\n  getWeeklyAttendance(employeeId: string, startDate: Date, endDate: Date): Promise<any[]>;\n\n  // Institution-wide absence justifications\n  getInstitutionAbsenceJustifications(institutionId: string): Promise<AbsenceJustification[]>;\n\n  // Dashboard statistics\n  getDashboardStats(institutionId: string): Promise<any>;\n\n  // Automated alert settings operations\n  getAutomatedAlertSettings(institutionId: string | null): Promise<any>;\n  updateAutomatedAlertSettings(institutionId: string | null, alertSettings: any): Promise<any>;\n  sendTestAlert(institutionId: string | null): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Institution operations\n  async getInstitutions(): Promise<Institution[]> {\n    return await db.select().from(institutions).orderBy(asc(institutions.name));\n  }\n\n  async getInstitution(id: string): Promise<Institution | undefined> {\n    const [institution] = await db.select().from(institutions).where(eq(institutions.id, id));\n    return institution;\n  }\n\n  async createInstitution(institution: InsertInstitution): Promise<Institution> {\n    const [newInstitution] = await db.insert(institutions).values(institution).returning();\n    return newInstitution;\n  }\n\n  async updateInstitution(id: string, institution: Partial<InsertInstitution>): Promise<Institution> {\n    const [updated] = await db\n      .update(institutions)\n      .set({ ...institution, updatedAt: new Date() })\n      .where(eq(institutions.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteInstitution(id: string): Promise<void> {\n    await db.delete(institutions).where(eq(institutions.id, id));\n  }\n\n  // Employee operations\n  async getEmployees(institutionId: string, searchQuery?: string): Promise<Employee[]> {\n    const query = db\n      .select()\n      .from(employees)\n      .where(eq(employees.institutionId, institutionId));\n\n    return await query.orderBy(asc(employees.fullName));\n  }\n\n  async getEmployee(id: string): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.id, id));\n    return employee;\n  }\n\n  async getEmployeeByUserId(userId: string): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.userId, userId));\n    return employee;\n  }\n\n\n\n  async searchEmployees(institutionId: string, searchQuery: string): Promise<Employee[]> {\n    return await db\n      .select()\n      .from(employees)\n      .where(\n        and(\n          eq(employees.institutionId, institutionId),\n          or(\n            sql`${employees.fullName} ILIKE ${`%${searchQuery}%`}`,\n            sql`${employees.email} ILIKE ${`%${searchQuery}%`}`,\n            sql`${employees.dni} ILIKE ${`%${searchQuery}%`}`\n          )\n        )\n      )\n      .orderBy(asc(employees.fullName));\n  }\n\n  async createEmployee(employee: InsertEmployee): Promise<Employee> {\n    const [newEmployee] = await db.insert(employees).values(employee).returning();\n    return newEmployee;\n  }\n\n  async updateEmployee(id: string, employee: Partial<InsertEmployee>): Promise<Employee> {\n    const [updated] = await db\n      .update(employees)\n      .set({ ...employee, updatedAt: new Date() })\n      .where(eq(employees.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Institution-wide absence justifications\n  async getInstitutionAbsenceJustifications(institutionId: string): Promise<AbsenceJustification[]> {\n    const justifications = await db\n      .select({\n        id: absenceJustifications.id,\n        employeeId: absenceJustifications.employeeId,\n        employeeName: employees.fullName,\n        updatedAt: absenceJustifications.updatedAt,\n        date: absenceJustifications.date,\n        reason: absenceJustifications.reason,\n        status: absenceJustifications.status,\n        adminResponse: absenceJustifications.adminResponse,\n        createdAt: absenceJustifications.createdAt,\n      })\n      .from(absenceJustifications)\n      .innerJoin(employees, eq(absenceJustifications.employeeId, employees.id))\n      .where(eq(employees.institutionId, institutionId))\n      .orderBy(desc(absenceJustifications.createdAt));\n\n    return justifications;\n  }\n\n  async deleteEmployee(id: string): Promise<void> {\n    await db.delete(employees).where(eq(employees.id, id));\n  }\n\n  // Schedule operations\n  async getEmployeeSchedules(employeeId: string): Promise<Schedule[]> {\n    return await db\n      .select()\n      .from(schedules)\n      .where(and(eq(schedules.employeeId, employeeId), eq(schedules.isActive, true)))\n      .orderBy(asc(schedules.dayOfWeek));\n  }\n\n  async createSchedule(schedule: InsertSchedule): Promise<Schedule> {\n    const [newSchedule] = await db.insert(schedules).values(schedule).returning();\n    return newSchedule;\n  }\n\n  async updateSchedule(id: string, schedule: Partial<InsertSchedule>): Promise<Schedule> {\n    const [updated] = await db\n      .update(schedules)\n      .set(schedule)\n      .where(eq(schedules.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteSchedule(id: string): Promise<void> {\n    await db.delete(schedules).where(eq(schedules.id, id));\n  }\n\n  // Attendance operations\n  async getAttendanceRecords(employeeId: string, startDate?: Date, endDate?: Date): Promise<AttendanceRecord[]> {\n    let conditions = [eq(attendanceRecords.employeeId, employeeId)];\n    \n    if (startDate && endDate) {\n      conditions.push(\n        gte(attendanceRecords.timestamp, startDate),\n        lte(attendanceRecords.timestamp, endDate)\n      );\n    }\n    \n    return await db\n      .select()\n      .from(attendanceRecords)\n      .where(and(...conditions))\n      .orderBy(desc(attendanceRecords.timestamp));\n  }\n\n  async createAttendanceRecord(record: InsertAttendanceRecord): Promise<AttendanceRecord> {\n    const [newRecord] = await db.insert(attendanceRecords).values(record).returning();\n    return newRecord;\n  }\n\n  async getInstitutionAttendance(institutionId: string, date: Date): Promise<any[]> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return await db\n      .select({\n        employee: employees,\n        records: attendanceRecords,\n      })\n      .from(employees)\n      .leftJoin(\n        attendanceRecords,\n        and(\n          eq(employees.id, attendanceRecords.employeeId),\n          gte(attendanceRecords.timestamp, startOfDay),\n          lte(attendanceRecords.timestamp, endOfDay)\n        )\n      )\n      .where(eq(employees.institutionId, institutionId));\n  }\n\n  // Absence operations\n  async getAbsences(employeeId?: string, institutionId?: string): Promise<Absence[]> {\n    if (employeeId) {\n      return await db\n        .select()\n        .from(absences)\n        .where(eq(absences.employeeId, employeeId))\n        .orderBy(desc(absences.createdAt));\n    } else if (institutionId) {\n      return await db\n        .select({\n          id: absences.id,\n          employeeId: absences.employeeId,\n          type: absences.type,\n          status: absences.status,\n          startDate: absences.startDate,\n          endDate: absences.endDate,\n          reason: absences.reason,\n          documentation: absences.documentation,\n          approvedBy: absences.approvedBy,\n          approvedAt: absences.approvedAt,\n          createdAt: absences.createdAt,\n        })\n        .from(absences)\n        .innerJoin(employees, eq(absences.employeeId, employees.id))\n        .where(eq(employees.institutionId, institutionId))\n        .orderBy(desc(absences.createdAt));\n    }\n    \n    return [];\n  }\n\n  async createAbsence(absence: InsertAbsence): Promise<Absence> {\n    const [newAbsence] = await db.insert(absences).values(absence).returning();\n    return newAbsence;\n  }\n\n  async updateAbsence(id: string, absence: Partial<InsertAbsence>): Promise<Absence> {\n    const [updated] = await db\n      .update(absences)\n      .set(absence)\n      .where(eq(absences.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Alert operations\n  async getActiveAlerts(institutionId: string): Promise<Alert[]> {\n    return await db\n      .select({\n        id: alerts.id,\n        employeeId: alerts.employeeId,\n        type: alerts.type,\n        status: alerts.status,\n        title: alerts.title,\n        description: alerts.description,\n        metadata: alerts.metadata,\n        resolvedBy: alerts.resolvedBy,\n        resolvedAt: alerts.resolvedAt,\n        createdAt: alerts.createdAt,\n      })\n      .from(alerts)\n      .innerJoin(employees, eq(alerts.employeeId, employees.id))\n      .where(\n        and(\n          eq(employees.institutionId, institutionId),\n          eq(alerts.status, \"active\")\n        )\n      )\n      .orderBy(desc(alerts.createdAt));\n  }\n\n  async createAlert(alert: InsertAlert): Promise<Alert> {\n    const [newAlert] = await db.insert(alerts).values(alert).returning();\n    return newAlert;\n  }\n\n  async resolveAlert(id: string, resolvedBy: string): Promise<Alert> {\n    const [resolved] = await db\n      .update(alerts)\n      .set({\n        status: \"resolved\",\n        resolvedBy,\n        resolvedAt: new Date(),\n      })\n      .where(eq(alerts.id, id))\n      .returning();\n    return resolved;\n  }\n\n  // Substitute operations\n  async getSubstituteAssignments(date: Date, institutionId: string): Promise<SubstituteAssignment[]> {\n    return await db\n      .select({\n        id: substituteAssignments.id,\n        absentEmployeeId: substituteAssignments.absentEmployeeId,\n        substituteEmployeeId: substituteAssignments.substituteEmployeeId,\n        date: substituteAssignments.date,\n        startTime: substituteAssignments.startTime,\n        endTime: substituteAssignments.endTime,\n        room: substituteAssignments.room,\n        notes: substituteAssignments.notes,\n        isAutoAssigned: substituteAssignments.isAutoAssigned,\n        createdAt: substituteAssignments.createdAt,\n      })\n      .from(substituteAssignments)\n      .innerJoin(employees, eq(substituteAssignments.absentEmployeeId, employees.id))\n      .where(\n        and(\n          eq(substituteAssignments.date, date.toISOString().split('T')[0]),\n          eq(employees.institutionId, institutionId)\n        )\n      );\n  }\n\n  async createSubstituteAssignment(assignment: InsertSubstituteAssignment): Promise<SubstituteAssignment> {\n    const [newAssignment] = await db.insert(substituteAssignments).values(assignment).returning();\n    return newAssignment;\n  }\n\n  // Settings operations\n  async getSettings(institutionId: string | null): Promise<Setting[]> {\n    return await db.select().from(settings).where(institutionId === null \n      ? sql`${settings.institutionId} IS NULL`\n      : eq(settings.institutionId, institutionId));\n  }\n\n  async getSetting(institutionId: string, key: string): Promise<Setting | undefined> {\n    const [setting] = await db\n      .select()\n      .from(settings)\n      .where(and(eq(settings.institutionId, institutionId), eq(settings.key, key)));\n    return setting;\n  }\n\n  async upsertSetting(setting: InsertSetting): Promise<Setting> {\n    // Check if setting exists first\n    const existing = await this.getSetting(setting.institutionId, setting.key);\n    \n    if (existing) {\n      // Update existing setting\n      const [updated] = await db\n        .update(settings)\n        .set({\n          value: setting.value,\n          updatedAt: new Date(),\n        })\n        .where(and(\n          eq(settings.institutionId, setting.institutionId),\n          eq(settings.key, setting.key)\n        ))\n        .returning();\n      return updated;\n    } else {\n      // Insert new setting\n      const [inserted] = await db\n        .insert(settings)\n        .values({\n          ...setting,\n          id: sql`gen_random_uuid()`,\n        })\n        .returning();\n      return inserted;\n    }\n  }\n\n  // Attendance network settings operations\n  async getAttendanceNetworkSettings(institutionId: string | null): Promise<AttendanceNetworkSetting | undefined> {\n    const [networkSettings] = await db\n      .select()\n      .from(attendanceNetworkSettings)\n      .where(institutionId === null \n        ? sql`${attendanceNetworkSettings.institutionId} IS NULL`\n        : eq(attendanceNetworkSettings.institutionId, institutionId));\n    return networkSettings;\n  }\n\n  async upsertAttendanceNetworkSettings(settings: InsertAttendanceNetworkSetting): Promise<AttendanceNetworkSetting> {\n    const [upserted] = await db\n      .insert(attendanceNetworkSettings)\n      .values(settings)\n      .onConflictDoUpdate({\n        target: [attendanceNetworkSettings.institutionId],\n        set: {\n          allowedNetworks: settings.allowedNetworks,\n          requireNetworkValidation: settings.requireNetworkValidation,\n          description: settings.description,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return upserted;\n  }\n\n  // Check if IP is allowed for attendance\n  async isIPAllowedForAttendance(institutionId: string, clientIP: string): Promise<boolean> {\n    let networkSettings = await this.getAttendanceNetworkSettings(institutionId);\n    \n    // If no settings for specific institution, try global settings (null)\n    if (!networkSettings && institutionId !== 'null') {\n      networkSettings = await this.getAttendanceNetworkSettings(null);\n    }\n    \n    if (!networkSettings || !networkSettings.requireNetworkValidation) {\n      return true; // No network validation required\n    }\n\n    // Check if client IP is in allowed networks\n    const allowedNetworks = networkSettings.allowedNetworks || [];\n    \n    for (const network of allowedNetworks) {\n      if (this.isIPInNetwork(clientIP, network)) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  private isIPInNetwork(ip: string, network: string): boolean {\n    // Simple implementation for IP/CIDR matching\n    if (network.includes('/')) {\n      // CIDR notation (e.g., 192.168.1.0/24)\n      const [networkIP, maskBits] = network.split('/');\n      const mask = parseInt(maskBits);\n      \n      const ipToNumber = (ip: string) => {\n        return ip.split('.').reduce((acc, octet) => (acc << 8) + parseInt(octet), 0) >>> 0;\n      };\n      \n      const ipNum = ipToNumber(ip);\n      const networkNum = ipToNumber(networkIP);\n      const maskNum = ((0xffffffff << (32 - mask)) >>> 0);\n      \n      return (ipNum & maskNum) === (networkNum & maskNum);\n    } else {\n      // Direct IP match\n      return ip === network;\n    }\n  }\n\n  // Email settings operations\n  async getEmailSettings(institutionId: string | null): Promise<EmailSetting | undefined> {\n    const [emailSetting] = await db\n      .select()\n      .from(emailSettings)\n      .where(institutionId === null \n        ? sql`${emailSettings.institutionId} IS NULL`\n        : eq(emailSettings.institutionId, institutionId));\n    return emailSetting;\n  }\n\n  async upsertEmailSettings(settings: InsertEmailSetting): Promise<EmailSetting> {\n    const existing = await this.getEmailSettings(settings.institutionId);\n    \n    if (existing) {\n      const [updated] = await db\n        .update(emailSettings)\n        .set({\n          ...settings,\n          updatedAt: new Date(),\n        })\n        .where(eq(emailSettings.institutionId, settings.institutionId))\n        .returning();\n      return updated;\n    } else {\n      const [inserted] = await db\n        .insert(emailSettings)\n        .values({\n          ...settings,\n          id: sql`gen_random_uuid()`,\n        })\n        .returning();\n      return inserted;\n    }\n  }\n\n  // Absence justifications operations\n  async getAbsenceJustifications(employeeId: string): Promise<AbsenceJustification[]> {\n    return await db\n      .select()\n      .from(absenceJustifications)\n      .where(eq(absenceJustifications.employeeId, employeeId))\n      .orderBy(desc(absenceJustifications.date));\n  }\n\n  async createAbsenceJustification(justification: InsertAbsenceJustification): Promise<AbsenceJustification> {\n    const [created] = await db\n      .insert(absenceJustifications)\n      .values({\n        ...justification,\n        id: sql`gen_random_uuid()`,\n      })\n      .returning();\n    return created;\n  }\n\n  async updateAbsenceJustificationStatus(id: string, status: string, adminResponse?: string): Promise<AbsenceJustification> {\n    const [updated] = await db\n      .update(absenceJustifications)\n      .set({\n        status,\n        adminResponse,\n        updatedAt: new Date(),\n      })\n      .where(eq(absenceJustifications.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Alert notifications operations\n  async createAlertNotification(notification: InsertAlertNotification): Promise<AlertNotification> {\n    const [created] = await db\n      .insert(alertNotifications)\n      .values({\n        ...notification,\n        id: sql`gen_random_uuid()`,\n      })\n      .returning();\n    return created;\n  }\n\n  async getAlertNotifications(institutionId: string | null): Promise<AlertNotification[]> {\n    return await db\n      .select()\n      .from(alertNotifications)\n      .where(institutionId === null \n        ? sql`${alertNotifications.institutionId} IS NULL`\n        : eq(alertNotifications.institutionId, institutionId))\n      .orderBy(desc(alertNotifications.sentAt));\n  }\n\n  // Password management operations\n  async updateUserPassword(userId: string, newPassword: string): Promise<User> {\n    const bcrypt = await import('bcrypt');\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    \n    const [updatedUser] = await db\n      .update(users)\n      .set({\n        passwordHash: hashedPassword,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    return updatedUser;\n  }\n\n  // Weekly attendance operations\n  async getWeeklyAttendance(employeeId: string, startDate: Date, endDate: Date): Promise<any[]> {\n    try {\n      // Adjust dates to cover the full day range in local timezone\n      const localStartDate = new Date(startDate);\n      localStartDate.setHours(0, 0, 0, 0); // Start of first day\n      \n      const localEndDate = new Date(endDate);\n      localEndDate.setHours(23, 59, 59, 999); // End of last day\n\n      console.log(`[getWeeklyAttendance] Query parameters:`, {\n        employeeId,\n        originalStartDate: startDate.toISOString(),\n        originalEndDate: endDate.toISOString(),\n        localStartDate: localStartDate.toISOString(),\n        localEndDate: localEndDate.toISOString()\n      });\n\n      // Get attendance records for the week using date range that covers full days\n      const records = await db\n        .select()\n        .from(attendanceRecords)\n        .where(\n          and(\n            eq(attendanceRecords.employeeId, employeeId),\n            gte(attendanceRecords.timestamp, localStartDate),\n            lte(attendanceRecords.timestamp, localEndDate)\n          )\n        )\n        .orderBy(attendanceRecords.timestamp);\n\n      console.log(`[getWeeklyAttendance] Found ${records.length} attendance records:`, records);\n\n    // Get absence justifications for the week\n    const justifications = await db\n      .select()\n      .from(absenceJustifications)\n      .where(\n        and(\n          eq(absenceJustifications.employeeId, employeeId),\n          sql`${absenceJustifications.date} >= ${startDate.toISOString().split('T')[0]}`,\n          sql`${absenceJustifications.date} <= ${endDate.toISOString().split('T')[0]}`\n        )\n      );\n\n    // Group attendance by date\n    const dailyAttendance = new Map();\n    \n    records.forEach((record: any) => {\n      // Ensure we handle timestamp correctly whether it's Date object or string\n      const timestamp = record.timestamp instanceof Date ? record.timestamp : new Date(record.timestamp);\n      const date = timestamp.toISOString().split('T')[0];\n      console.log(`[getWeeklyAttendance] Processing record:`, {\n        id: record.id,\n        type: record.type,\n        timestamp: record.timestamp,\n        dateExtracted: date\n      });\n      if (!dailyAttendance.has(date)) {\n        dailyAttendance.set(date, { date, records: [] });\n      }\n      dailyAttendance.get(date).records.push(record);\n    });\n    \n    console.log(`[getWeeklyAttendance] Daily attendance map:`, Object.fromEntries(dailyAttendance));\n\n    // Process each day's data - iterate through the original date range\n    const weeklyData = [];\n    const currentDate = new Date(startDate);\n    while (currentDate <= endDate) {\n      const dateStr = currentDate.toISOString().split('T')[0];\n      const dayData = dailyAttendance.get(dateStr);\n      const justification = justifications.find(j => \n        j.date === dateStr\n      );\n      \n      console.log(`[getWeeklyAttendance] Processing day ${dateStr}:`, {\n        dayData: dayData ? `Found ${dayData.records.length} records` : 'No records',\n        justification: justification ? 'Found justification' : 'No justification',\n        availableDates: Array.from(dailyAttendance.keys())\n      });\n\n      let checkInTime = null;\n      let checkOutTime = null;\n      let totalHours = null;\n\n      if (dayData) {\n        const checkInRecord = dayData.records.find((r: any) => r.type === 'check_in');\n        const checkOutRecord = dayData.records.find((r: any) => r.type === 'check_out');\n        \n        if (checkInRecord) {\n          const timestamp = checkInRecord.timestamp instanceof Date ? checkInRecord.timestamp : new Date(checkInRecord.timestamp);\n          checkInTime = timestamp.toLocaleTimeString('ca-ES', {\n            hour: '2-digit',\n            minute: '2-digit'\n          });\n          console.log(`[getWeeklyAttendance] Check-in found:`, { timestamp, checkInTime });\n        }\n        \n        if (checkOutRecord) {\n          const timestamp = checkOutRecord.timestamp instanceof Date ? checkOutRecord.timestamp : new Date(checkOutRecord.timestamp);\n          checkOutTime = timestamp.toLocaleTimeString('ca-ES', {\n            hour: '2-digit', \n            minute: '2-digit'\n          });\n          console.log(`[getWeeklyAttendance] Check-out found:`, { timestamp, checkOutTime });\n        }\n\n        if (checkInRecord && checkOutRecord) {\n          const checkInTimestamp = checkInRecord.timestamp instanceof Date ? checkInRecord.timestamp : new Date(checkInRecord.timestamp);\n          const checkOutTimestamp = checkOutRecord.timestamp instanceof Date ? checkOutRecord.timestamp : new Date(checkOutRecord.timestamp);\n          const diff = checkOutTimestamp.getTime() - checkInTimestamp.getTime();\n          totalHours = Math.round((diff / (1000 * 60 * 60)) * 100) / 100;\n        }\n      }\n      \n      // Move to next day\n      currentDate.setDate(currentDate.getDate() + 1);\n\n      weeklyData.push({\n        date: dateStr,\n        checkInTime,\n        checkOutTime,\n        totalHours,\n        justification: justification ? {\n          id: justification.id,\n          reason: justification.reason,\n          status: justification.status,\n          adminResponse: justification.adminResponse\n        } : null\n      });\n    }\n\n    console.log(`[getWeeklyAttendance] Returning weekly data:`, weeklyData);\n    return weeklyData;\n    } catch (error) {\n      console.error(\"Error in getWeeklyAttendance:\", error);\n      return [];\n    }\n  }\n\n\n\n  // Academic year operations\n  async getAcademicYears(institutionId: string): Promise<AcademicYear[]> {\n    return await db\n      .select()\n      .from(academicYears)\n      .where(eq(academicYears.institutionId, institutionId))\n      .orderBy(desc(academicYears.startDate));\n  }\n\n  async createAcademicYear(yearData: InsertAcademicYear): Promise<AcademicYear> {\n    const [academicYear] = await db.insert(academicYears).values(yearData).returning();\n    return academicYear;\n  }\n\n  // Dashboard statistics\n  async getDashboardStats(institutionId: string): Promise<any> {\n    const today = new Date();\n    const startOfDay = new Date(today);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(today);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    // Get total employees\n    const [totalEmployees] = await db\n      .select({ count: count() })\n      .from(employees)\n      .where(eq(employees.institutionId, institutionId));\n\n    // Get present employees today\n    const presentEmployees = await db\n      .select({ count: count() })\n      .from(attendanceRecords)\n      .innerJoin(employees, eq(attendanceRecords.employeeId, employees.id))\n      .where(\n        and(\n          eq(employees.institutionId, institutionId),\n          eq(attendanceRecords.type, \"check_in\"),\n          gte(attendanceRecords.timestamp, startOfDay),\n          lte(attendanceRecords.timestamp, endOfDay)\n        )\n      );\n\n    // Get active alerts count\n    const [activeAlerts] = await db\n      .select({ count: count() })\n      .from(alerts)\n      .innerJoin(employees, eq(alerts.employeeId, employees.id))\n      .where(\n        and(\n          eq(employees.institutionId, institutionId),\n          eq(alerts.status, \"active\")\n        )\n      );\n\n    return {\n      totalEmployees: totalEmployees.count,\n      presentEmployees: presentEmployees[0]?.count || 0,\n      activeAlerts: activeAlerts.count,\n    };\n  }\n\n  // Get admin users for an institution\n  async getAdminUsers(institutionId: string): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(\n        and(\n          eq(users.institutionId, institutionId),\n          or(eq(users.role, \"admin\"), eq(users.role, \"superadmin\"))\n        )\n      )\n      .orderBy(asc(users.firstName));\n  }\n\n  // Authenticate user for quick attendance\n  async authenticateUser(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user) return null;\n\n    const bcrypt = await import('bcrypt');\n    const isValid = await bcrypt.compare(password, user.passwordHash || '');\n    return isValid ? user : null;\n  }\n\n\n\n  // Get last attendance record for an employee\n  async getLastAttendanceRecord(employeeId: string): Promise<AttendanceRecord | null> {\n    const [record] = await db\n      .select()\n      .from(attendanceRecords)\n      .where(eq(attendanceRecords.employeeId, employeeId))\n      .orderBy(desc(attendanceRecords.timestamp))\n      .limit(1);\n    \n    return record || null;\n  }\n\n  // Get all users for dropdown (simplified data)\n  async getAllUsersForDropdown(): Promise<any[]> {\n    return await db\n      .select({\n        id: users.id,\n        email: users.email,\n        firstName: users.firstName,\n        lastName: users.lastName,\n      })\n      .from(users)\n      .where(eq(users.role, \"employee\"))\n      .orderBy(asc(users.firstName), asc(users.lastName));\n  }\n\n  // Automated alert settings operations\n  async getAutomatedAlertSettings(institutionId: string | null): Promise<any> {\n    const alertSettings = await db\n      .select()\n      .from(settings)\n      .where(\n        and(\n          institutionId === null \n            ? sql`${settings.institutionId} IS NULL`\n            : eq(settings.institutionId, institutionId),\n          eq(settings.key, 'automated_alerts')\n        )\n      )\n      .limit(1);\n\n    if (alertSettings.length === 0) {\n      return null;\n    }\n\n    // Parse JSON string from database\n    const value = alertSettings[0].value;\n    if (typeof value === 'string') {\n      try {\n        return JSON.parse(value);\n      } catch (e) {\n        console.error('Error parsing automated alert settings JSON:', e);\n        return null;\n      }\n    }\n    \n    return value;\n  }\n\n  async updateAutomatedAlertSettings(institutionId: string | null, alertSettings: any): Promise<any> {\n    const existingSettings = await db\n      .select()\n      .from(settings)\n      .where(\n        and(\n          institutionId === null \n            ? sql`${settings.institutionId} IS NULL`\n            : eq(settings.institutionId, institutionId),\n          eq(settings.key, 'automated_alerts')\n        )\n      )\n      .limit(1);\n\n    if (existingSettings.length > 0) {\n      // Update existing\n      const [updated] = await db\n        .update(settings)\n        .set({\n          value: alertSettings,\n          updatedAt: new Date(),\n        })\n        .where(eq(settings.id, existingSettings[0].id))\n        .returning();\n      return updated.value;\n    } else {\n      // Create new\n      const [created] = await db\n        .insert(settings)\n        .values({\n          id: sql`gen_random_uuid()`,\n          institutionId: institutionId as string,\n          key: 'automated_alerts',\n          value: alertSettings,\n          updatedAt: new Date(),\n        })\n        .returning();\n      return created.value;\n    }\n  }\n\n  async sendTestAlert(institutionId: string | null): Promise<void> {\n    // Get email settings first\n    const emailSettings = await this.getEmailSettings(institutionId);\n    if (!emailSettings || !emailSettings.senderEmail) {\n      throw new Error(\"Email configuration not found. Please configure email settings first.\");\n    }\n\n    // Get alert settings\n    const alertSettings = await this.getAutomatedAlertSettings(institutionId);\n    console.log('Alert settings for test:', alertSettings);\n    \n    if (!alertSettings) {\n      throw new Error(\"No alert settings configured.\");\n    }\n    \n    // Now alertSettings is already parsed as an object\n    const recipientEmails = alertSettings.recipientEmails || [];\n    \n    if (!recipientEmails || recipientEmails.length === 0) {\n      throw new Error(\"No recipients configured for alerts.\");\n    }\n\n    // Get institution info\n    const institution = institutionId ? await this.getInstitution(institutionId) : null;\n    const centerName = institution?.name || \"Sistema Global\";\n\n    // Prepare test email content\n    const subject = `[PROVA] ${centerName} - Test d'Alertes Automàtiques`;\n    \n    const body = `Estimat/da administrador/a,\n\nAquest és un email de prova del sistema d'alertes automàtiques d'EduPresència.\n\nCONFIGURACIÓ ACTUAL:\n- Centre: ${centerName}\n- Llindar de retard: ${alertSettings.delayThresholdMinutes || 15} minuts\n- Llindar d'absència: ${alertSettings.absenceThresholdDays || 3} dies\n- Freqüència d'informes: ${alertSettings.reportFrequency || 'setmanal'}\n- Hora d'enviament: ${alertSettings.reportTime || '09:00'}\n\nCOMPLIMENT LEGAL:\n${alertSettings.legalComplianceMode ? \n  'El sistema inclou referències legals per garantir el compliment de l\\'Article 34.9 de l\\'Estatut dels Treballadors.' :\n  'Mode de compliment legal desactivat.'}\n\nSi rebeu aquest email, la configuració és correcta.\n\nSalutacions cordials,\nSistema de Control d'Assistència EduPresència\n\n---\nAquest és un email automàtic generat pel sistema. Si us plau, no respongueu directament.\nData de prova: ${new Date().toLocaleString('ca-ES')}`;\n\n    // In a real implementation, this would send the actual email\n    // For now, we simulate the process\n    console.log(`Test alert sent to: ${recipientEmails.join(', ')}`);\n    console.log(`Subject: ${subject}`);\n    console.log(`Body preview: ${body.substring(0, 100)}...`);\n    \n    console.log('Test alert sent successfully to:', recipientEmails);\n    // Return void as expected by the function signature\n    \n    // In production, integrate with actual email service like SendGrid, SES, or SMTP\n    // Example pseudo-code:\n    // await emailService.send({\n    //   from: emailSettings.senderEmail,\n    //   to: alertSettings.recipientEmails,\n    //   subject,\n    //   text: body\n    // });\n  }\n\n  // GP Untis Import Functions\n  async parseUntisCSV(csvContent: string, institutionId: string, academicYearId: string) {\n    logger.scheduleImport('CSV_PARSE_START', `Starting GP Untis CSV parse for institution ${institutionId}`);\n    \n    const lines = csvContent.split('\\n');\n    const parsedSessions: any[] = [];\n    const teachers = new Set<string>();\n    const subjects = new Set<string>();\n    const classGroups = new Set<string>();\n    const classrooms = new Set<string>();\n    let lineNumber = 0;\n\n    try {\n      for (const line of lines) {\n        lineNumber++;\n        if (!line.trim() || line.startsWith('#')) continue;\n\n        // Parse format: #classe,\"grup\",\"id_docent\",\"id_materia\",\"aula\",dia,hora,,\n        // Example: 4,\"2n A\",\"MS\",\"MAT2\",\"2A\",2,3,,\n        const parts = line.split(',').map(p => p.trim().replace(/\"/g, ''));\n        \n        if (parts.length < 7) {\n          logger.scheduleImport('CSV_PARSE_WARNING', `Skipping malformed line ${lineNumber}: ${line}`);\n          continue;\n        }\n\n        const [classNumber, groupCode, teacherCode, subjectCode, classroomCode, dayOfWeek, hourPeriod] = parts;\n        \n        if (!teacherCode || !subjectCode || !groupCode || !dayOfWeek || !hourPeriod) {\n          logger.scheduleImport('CSV_PARSE_WARNING', `Skipping incomplete line ${lineNumber}: ${line}`);\n          continue;\n        }\n\n        const day = parseInt(dayOfWeek);\n        const hour = parseInt(hourPeriod);\n        \n        if (isNaN(day) || isNaN(hour) || day < 1 || day > 7 || hour < 1 || hour > 8) {\n          logger.scheduleImport('CSV_PARSE_WARNING', `Invalid day/hour on line ${lineNumber}: day=${day}, hour=${hour}`);\n          continue;\n        }\n\n        // Extract unique values\n        teachers.add(teacherCode);\n        subjects.add(subjectCode);\n        classGroups.add(groupCode);\n        if (classroomCode && classroomCode !== '') classrooms.add(classroomCode);\n\n        parsedSessions.push({\n          institutionId,\n          academicYearId,\n          classNumber: classNumber || null,\n          groupCode: groupCode,\n          teacherCode: teacherCode,\n          subjectCode: subjectCode,\n          classroomCode: classroomCode || null,\n          dayOfWeek: day,\n          hourPeriod: hour,\n          employeeId: null, // Will be linked later\n          createdAt: new Date(),\n          updatedAt: new Date()\n        });\n      }\n\n      logger.scheduleImport('CSV_PARSE_SUCCESS', `Parsed ${parsedSessions.length} sessions`, {\n        teachers: teachers.size,\n        subjects: subjects.size,\n        classGroups: classGroups.size,\n        classrooms: classrooms.size\n      });\n\n      return {\n        sessions: parsedSessions,\n        summary: {\n          teachers: Array.from(teachers),\n          subjects: Array.from(subjects),\n          classGroups: Array.from(classGroups),\n          classrooms: Array.from(classrooms)\n        }\n      };\n    } catch (error) {\n      logger.scheduleImportError('CSV_PARSE_ERROR', error as Error, { linesProcessed: parsedSessions.length });\n      throw error;\n    }\n  }\n\n  async importUntisSchedule(csvContent: string, institutionId: string, academicYearId: string) {\n    logger.scheduleImport('IMPORT_START', `Starting GP Untis import for institution ${institutionId}`);\n    \n    try {\n      // Parse CSV content\n      const { sessions, summary } = await this.parseUntisCSV(csvContent, institutionId, academicYearId);\n\n      // Clear existing schedule sessions for this academic year\n      logger.scheduleImport('CLEANUP', 'Removing existing schedule sessions');\n      await db.delete(untisScheduleSessions)\n        .where(\n          and(\n            eq(untisScheduleSessions.institutionId, institutionId),\n            eq(untisScheduleSessions.academicYearId, academicYearId)\n          )\n        );\n\n      // Create/update subjects\n      logger.scheduleImport('SUBJECTS_SYNC', `Syncing ${summary.subjects.length} subjects`);\n      for (const subjectCode of summary.subjects) {\n        await db.insert(subjects)\n          .values({\n            institutionId,\n            academicYearId,\n            code: subjectCode,\n            name: subjectCode, // Use code as name for now\n          })\n          .onConflictDoNothing();\n      }\n\n      // Create/update class groups\n      logger.scheduleImport('GROUPS_SYNC', `Syncing ${summary.classGroups.length} class groups`);\n      for (const groupCode of summary.classGroups) {\n        const level = groupCode.replace(/[ABC]$/, ''); // S1A -> S1\n        const section = groupCode.slice(-1); // S1A -> A\n        \n        await db.insert(classGroups)\n          .values({\n            institutionId,\n            academicYearId,\n            code: groupCode,\n            level,\n            section,\n          })\n          .onConflictDoNothing();\n      }\n\n      // Create/update classrooms\n      logger.scheduleImport('CLASSROOMS_SYNC', `Syncing ${summary.classrooms.length} classrooms`);\n      for (const classroomCode of summary.classrooms) {\n        await db.insert(classrooms)\n          .values({\n            institutionId,\n            code: classroomCode,\n            name: classroomCode,\n          })\n          .onConflictDoNothing();\n      }\n\n      // Insert schedule sessions with proper linking\n      logger.scheduleImport('SESSIONS_INSERT', `Inserting ${sessions.length} schedule sessions`);\n      const insertedSessions = await db.insert(untisScheduleSessions)\n        .values(sessions)\n        .returning();\n\n      // Update links to existing employees\n      logger.scheduleImport('EMPLOYEE_LINKING', 'Linking sessions to existing employees');\n      const employeeCount = await this.linkUntisScheduleToEmployees(institutionId, academicYearId);\n\n      logger.scheduleImport('IMPORT_SUCCESS', `Import completed successfully`, {\n        sessionsImported: insertedSessions.length,\n        employeesLinked: employeeCount,\n        summary\n      });\n\n      return {\n        success: true,\n        sessionsImported: insertedSessions.length,\n        employeesLinked: employeeCount,\n        summary\n      };\n\n    } catch (error) {\n      logger.scheduleImportError('IMPORT_FAILED', error as Error);\n      throw error;\n    }\n  }\n\n  async linkUntisScheduleToEmployees(institutionId: string, academicYearId: string) {\n    logger.scheduleImport('EMPLOYEE_LINKING_START', 'Starting employee linking process');\n    \n    try {\n      // Get all employees for this institution\n      const employeesList = await db.select().from(employees)\n        .where(eq(employees.institutionId, institutionId));\n\n      let linkedCount = 0;\n\n      // Link schedule sessions to employees by matching names\n      for (const employee of employeesList) {\n        const fullNameParts = employee.fullName.split(' ');\n        const lastName = fullNameParts[fullNameParts.length - 1];\n        const firstName = fullNameParts[0];\n        \n        // Try different name matching patterns\n        const namePatterns = [\n          employee.fullName.toUpperCase(),\n          `${firstName.charAt(0)}.${lastName}`.toUpperCase(),\n          `${lastName}`.toUpperCase(),\n          `${firstName} ${lastName}`.toUpperCase(),\n        ];\n\n        for (const pattern of namePatterns) {\n          const updated = await db.update(untisScheduleSessions)\n            .set({ employeeId: employee.id })\n            .where(\n              and(\n                eq(untisScheduleSessions.institutionId, institutionId),\n                eq(untisScheduleSessions.academicYearId, academicYearId),\n                eq(untisScheduleSessions.teacherCode, pattern),\n                isNull(untisScheduleSessions.employeeId)\n              )\n            )\n            .returning({ id: untisScheduleSessions.id });\n\n          if (updated.length > 0) {\n            linkedCount += updated.length;\n            logger.scheduleImport('EMPLOYEE_LINKED', `Linked ${updated.length} sessions to ${employee.fullName} using pattern: ${pattern}`);\n            break; // Stop trying other patterns for this employee\n          }\n        }\n      }\n\n      logger.scheduleImport('EMPLOYEE_LINKING_SUCCESS', `Linked ${linkedCount} sessions to employees`);\n      return linkedCount;\n\n    } catch (error) {\n      logger.scheduleImportError('EMPLOYEE_LINKING_ERROR', error as Error);\n      throw error;\n    }\n  }\n\n  async getUntisScheduleSessions(institutionId: string, academicYearId: string) {\n    logger.dbQuery('SELECT', 'untis_schedule_sessions', { institutionId, academicYearId });\n    \n    try {\n      return await db.select().from(untisScheduleSessions)\n        .where(\n          and(\n            eq(untisScheduleSessions.institutionId, institutionId),\n            eq(untisScheduleSessions.academicYearId, academicYearId)\n          )\n        )\n        .orderBy(\n          asc(untisScheduleSessions.dayOfWeek),\n          asc(untisScheduleSessions.hourPeriod),\n          asc(untisScheduleSessions.groupCode)\n        );\n    } catch (error) {\n      logger.dbError('SELECT', 'untis_schedule_sessions', error as Error, { institutionId, academicYearId });\n      throw error;\n    }\n  }\n\n  async getUntisScheduleStatistics(institutionId: string, academicYearId: string) {\n    logger.dbQuery('SELECT_STATS', 'untis_schedule_sessions', { institutionId, academicYearId });\n    \n    try {\n      const [stats] = await db.select({\n        totalSessions: count(),\n        linkedSessions: count(untisScheduleSessions.employeeId),\n        uniqueTeachers: sql<number>`COUNT(DISTINCT ${untisScheduleSessions.teacherCode})`,\n        uniqueSubjects: sql<number>`COUNT(DISTINCT ${untisScheduleSessions.subjectCode})`,\n        uniqueGroups: sql<number>`COUNT(DISTINCT ${untisScheduleSessions.groupCode})`,\n      }).from(untisScheduleSessions)\n        .where(\n          and(\n            eq(untisScheduleSessions.institutionId, institutionId),\n            eq(untisScheduleSessions.academicYearId, academicYearId)\n          )\n        );\n\n      return stats;\n    } catch (error) {\n      logger.dbError('SELECT_STATS', 'untis_schedule_sessions', error as Error, { institutionId, academicYearId });\n      throw error;\n    }\n  }\n\n  async getActiveAcademicYear(institutionId: string): Promise<AcademicYear | undefined> {  \n    logger.dbQuery('SELECT', 'academic_years', { institutionId, isActive: true });\n    \n    try {\n      const [activeYear] = await db\n        .select()\n        .from(academicYears)\n        .where(\n          and(\n            eq(academicYears.institutionId, institutionId),\n            eq(academicYears.isActive, true)\n          )\n        )\n        .limit(1);\n      \n      return activeYear || undefined;\n    } catch (error) {\n      logger.dbError('SELECT', 'academic_years', error as Error, { institutionId });\n      throw error;\n    }\n  }\n\n  async importUntisScheduleFromTXT(txtContent: string, institutionId: string, academicYearId: string) {\n    logger.scheduleImport('TXT_IMPORT_START', `Starting GP Untis TXT import for institution ${institutionId}`);\n    \n    try {\n      const lines = txtContent.trim().split('\\n');\n      const sessions: any[] = [];\n      const teachers = new Set<string>();\n      const subjects = new Set<string>();\n      const classGroups = new Set<string>();\n      const classrooms = new Set<string>();\n      \n      for (const line of lines) {\n        if (!line.trim()) continue;\n        \n        // Parse TXT format: sessionId,\"groupCode\",\"teacherCode\",\"subjectCode\",\"roomCode\",dayNum,hourNum,,\n        const parts = line.split(',');\n        if (parts.length < 7) continue;\n        \n        const sessionId = parts[0];\n        const groupCode = parts[1]?.replace(/\"/g, '') || '';\n        const teacherCode = parts[2]?.replace(/\"/g, '') || '';\n        const subjectCode = parts[3]?.replace(/\"/g, '') || '';\n        const roomCode = parts[4]?.replace(/\"/g, '') || '';\n        const dayNum = parseInt(parts[5]) || 0;\n        const hourNum = parseInt(parts[6]) || 0;\n        \n        if (!sessionId || !groupCode || !teacherCode || !subjectCode) continue;\n        \n        // Collect unique values\n        teachers.add(teacherCode);\n        subjects.add(subjectCode);\n        classGroups.add(groupCode);\n        if (roomCode) classrooms.add(roomCode);\n        \n        sessions.push({\n          institutionId,\n          academicYearId,\n          sessionId: sessionId.trim(),\n          groupCode: groupCode.trim(),\n          teacherCode: teacherCode.trim(),\n          subjectCode: subjectCode.trim(),\n          classroomCode: roomCode.trim() || null,\n          dayOfWeek: dayNum,\n          hourPeriod: hourNum,\n          employeeId: null, // Will be linked later\n          createdAt: new Date(),\n          updatedAt: new Date()\n        });\n      }\n      \n      if (sessions.length === 0) {\n        throw new Error('No valid schedule sessions found in the TXT file');\n      }\n      \n      logger.scheduleImport('TXT_PARSE_SUCCESS', `Parsed ${sessions.length} sessions from TXT`, {\n        teachers: teachers.size,\n        subjects: subjects.size,\n        classGroups: classGroups.size,\n        classrooms: classrooms.size\n      });\n      \n      // Clear existing sessions for this academic year\n      await db.delete(untisScheduleSessions)\n        .where(\n          and(\n            eq(untisScheduleSessions.institutionId, institutionId),\n            eq(untisScheduleSessions.academicYearId, academicYearId)\n          )\n        );\n      \n      // Insert new sessions\n      const insertedSessions = await db.insert(untisScheduleSessions)\n        .values(sessions)\n        .returning();\n      \n      // Try to link sessions to employees\n      const employeeCount = await this.linkUntisScheduleToEmployees(institutionId, academicYearId);\n      \n      return {\n        success: true,\n        sessionsImported: insertedSessions.length,\n        employeesLinked: employeeCount,\n        summary: {\n          teachers: Array.from(teachers),\n          subjects: Array.from(subjects),\n          classGroups: Array.from(classGroups),\n          classrooms: Array.from(classrooms)\n        }\n      };\n    } catch (error) {\n      logger.scheduleImportError('TXT_IMPORT_ERROR', error as Error);\n      throw error;\n    }\n  }\n\n  async importUntisTeachers(txtContent: string, institutionId: string, academicYearId: string) {\n    logger.scheduleImport('TEACHERS_IMPORT_START', `Starting GP Untis teachers import`);\n    \n    try {\n      const lines = txtContent.trim().split('\\n');\n      const teachersData: any[] = [];\n      \n      for (const line of lines) {\n        if (!line.trim()) continue;\n        \n        // Parse teacher format: \"CODE\",\"FULL_NAME\",...,HOURS,...\n        const parts = line.split(',');\n        if (parts.length < 16) continue;\n        \n        const teacherCode = parts[0]?.replace(/\"/g, '') || '';\n        const fullName = parts[1]?.replace(/\"/g, '') || teacherCode;\n        const hoursStr = parts[15]?.replace(/\"/g, '') || '0';\n        const hours = parseFloat(hoursStr) || 0;\n        \n        if (!teacherCode || teacherCode === '?') continue;\n        \n        // Generate email from teacher code\n        const email = `${teacherCode.toLowerCase().replace(/[^a-z0-9]/g, '.')}@insbitacola.cat`;\n        \n        teachersData.push({\n          institutionId,\n          fullName: fullName || teacherCode,\n          email,\n          teacherCode,\n          weeklyHours: hours,\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        });\n      }\n      \n      logger.scheduleImport('TEACHERS_PARSE_SUCCESS', `Parsed ${teachersData.length} teachers`);\n      \n      // Insert or update teachers\n      let createdCount = 0;\n      let updatedCount = 0;\n      \n      for (const teacherData of teachersData) {\n        const [existing] = await db.select()\n          .from(employees)\n          .where(\n            and(\n              eq(employees.institutionId, institutionId),\n              eq(employees.email, teacherData.email)\n            )\n          )\n          .limit(1);\n        \n        if (existing) {\n          await db.update(employees)\n            .set({\n              fullName: teacherData.fullName,\n              updatedAt: new Date()\n            })\n            .where(eq(employees.id, existing.id));\n          updatedCount++;\n        } else {\n          // Check if user exists, if not create one\n          let userId;\n          const [existingUser] = await db\n            .select()\n            .from(users)\n            .where(eq(users.email, teacherData.email));\n\n          if (existingUser) {\n            userId = existingUser.id;\n          } else {\n            // Create user for the teacher with default password\n            const bcrypt = await import('bcrypt');\n            const passwordHash = await bcrypt.hash('prof123', 10);\n            \n            const [newUser] = await db\n              .insert(users)\n              .values({\n                email: teacherData.email,\n                firstName: teacherData.fullName.split(' ')[0],\n                lastName: teacherData.fullName.split(' ').slice(1).join(' ') || '',\n                role: 'employee',\n                institutionId,\n                passwordHash\n              })\n              .returning();\n            userId = newUser.id;\n            logger.scheduleImport('USER_CREATED', `Created user for teacher: ${teacherData.email}`);\n          }\n\n          // Create employee with userId\n          await db.insert(employees).values({\n            ...teacherData,\n            userId,\n            dni: teacherData.teacherCode, // Use teacher code as DNI\n            startDate: new Date(),\n            contractType: 'full_time',\n            status: 'active'\n          });\n          createdCount++;\n        }\n      }\n      \n      return {\n        success: true,\n        teachersProcessed: teachersData.length,\n        created: createdCount,\n        updated: updatedCount\n      };\n    } catch (error) {\n      logger.scheduleImportError('TEACHERS_IMPORT_ERROR', error as Error);\n      throw error;\n    }\n  }\n\n  async importUntisSubjects(txtContent: string, institutionId: string, academicYearId: string) {\n    logger.scheduleImport('SUBJECTS_IMPORT_START', `Starting GP Untis subjects import`);\n    \n    try {\n      const lines = txtContent.trim().split('\\n');\n      const subjectsData: any[] = [];\n      \n      for (const line of lines) {\n        if (!line.trim()) continue;\n        \n        // Parse subject format: \"CODE\",\"NAME\",\"SHORTNAME\",\"ROOM\",...\n        const parts = line.split(',');\n        if (parts.length < 4) continue;\n        \n        const subjectCode = parts[0]?.replace(/\"/g, '') || '';\n        const subjectName = parts[1]?.replace(/\"/g, '') || subjectCode;\n        const shortName = parts[2]?.replace(/\"/g, '') || '';\n        const defaultRoom = parts[3]?.replace(/\"/g, '') || '';\n        \n        if (!subjectCode) continue;\n        \n        subjectsData.push({\n          institutionId,\n          academicYearId,\n          code: subjectCode,\n          name: subjectName,\n          shortName: shortName || subjectCode,\n          defaultClassroom: defaultRoom || null,\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        });\n      }\n      \n      logger.scheduleImport('SUBJECTS_PARSE_SUCCESS', `Parsed ${subjectsData.length} subjects`);\n      \n      // Clear existing subjects for this academic year\n      await db.delete(subjects)\n        .where(\n          and(\n            eq(subjects.institutionId, institutionId),\n            eq(subjects.academicYearId, academicYearId)\n          )\n        );\n      \n      // Insert new subjects\n      const insertedSubjects = await db.insert(subjects)\n        .values(subjectsData)\n        .returning();\n      \n      return {\n        success: true,\n        subjectsImported: insertedSubjects.length\n      };\n    } catch (error) {\n      logger.scheduleImportError('SUBJECTS_IMPORT_ERROR', error as Error);\n      throw error;\n    }\n  }\n\n  async importUntisClassGroups(txtContent: string, institutionId: string, academicYearId: string) {\n    logger.scheduleImport('GROUPS_IMPORT_START', `Starting GP Untis class groups import`);\n    \n    try {\n      const lines = txtContent.trim().split('\\n');\n      const groupsData: any[] = [];\n      \n      for (const line of lines) {\n        if (!line.trim()) continue;\n        \n        // Parse group format: \"GROUPCODE\",...\n        const parts = line.split(',');\n        if (parts.length < 1) continue;\n        \n        const groupCode = parts[0]?.replace(/\"/g, '') || '';\n        if (!groupCode) continue;\n        \n        // Determine level and section from group code (e.g., S1A -> level: S1, section: A)\n        const level = groupCode.replace(/[ABC]$/, ''); // S1A -> S1\n        const section = groupCode.slice(-1); // S1A -> A\n        \n        groupsData.push({\n          institutionId,\n          academicYearId,\n          code: groupCode,\n          level,\n          section,\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        });\n      }\n      \n      logger.scheduleImport('GROUPS_PARSE_SUCCESS', `Parsed ${groupsData.length} class groups`);\n      \n      // Clear existing groups for this academic year\n      await db.delete(classGroups)\n        .where(\n          and(\n            eq(classGroups.institutionId, institutionId),\n            eq(classGroups.academicYearId, academicYearId)\n          )\n        );\n      \n      // Insert new groups\n      const insertedGroups = await db.insert(classGroups)\n        .values(groupsData)\n        .returning();\n      \n      return {\n        success: true,\n        groupsImported: insertedGroups.length\n      };\n    } catch (error) {\n      logger.scheduleImportError('GROUPS_IMPORT_ERROR', error as Error);\n      throw error;\n    }\n  }\n\n  async importCompleteUntisData(institutionId: string, academicYearId: string) {\n    logger.scheduleImport('COMPLETE_IMPORT_START', `Starting complete GP Untis data import`);\n    \n    try {\n      const fs = await import('fs');\n      \n      // Initialize counters\n      let teachersCreated = 0, teachersUpdated = 0;\n      let subjectsImported = 0, groupsImported = 0, schedulesImported = 0;\n      \n      // Import teachers\n      const teachersPath = './attached_assets/PROFESSORAT_1755422511894.TXT';\n      if (fs.existsSync(teachersPath)) {\n        const teachersContent = fs.readFileSync(teachersPath, 'utf8');\n        const teachersResult = await this.importUntisTeachers(teachersContent, institutionId, academicYearId);\n        teachersCreated = teachersResult.created;\n        teachersUpdated = teachersResult.updated;\n        logger.scheduleImport('TEACHERS_IMPORTED', `Teachers: ${teachersCreated} created, ${teachersUpdated} updated`);\n      }\n      \n      // Import subjects\n      const subjectsPath = './attached_assets/MATÈRIES_1755422511894.TXT';\n      if (fs.existsSync(subjectsPath)) {\n        const subjectsContent = fs.readFileSync(subjectsPath, 'utf8');\n        const subjectsResult = await this.importUntisSubjects(subjectsContent, institutionId, academicYearId);\n        subjectsImported = subjectsResult.subjectsImported;\n        logger.scheduleImport('SUBJECTS_IMPORTED', `Subjects: ${subjectsImported} imported`);\n      }\n      \n      // Import class groups\n      const groupsPath = './attached_assets/GRUPS_1754044162024.TXT';\n      if (fs.existsSync(groupsPath)) {\n        const groupsContent = fs.readFileSync(groupsPath, 'utf8');\n        const groupsResult = await this.importUntisClassGroups(groupsContent, institutionId, academicYearId);\n        groupsImported = groupsResult.groupsImported;\n        logger.scheduleImport('GROUPS_IMPORTED', `Groups: ${groupsImported} imported`);\n      }\n      \n      // Import schedule sessions\n      const schedulePath = './attached_assets/HORARIS_1755422110445.TXT';\n      if (fs.existsSync(schedulePath)) {\n        const scheduleContent = fs.readFileSync(schedulePath, 'utf8');\n        const scheduleResult = await this.importUntisSchedule(scheduleContent, institutionId, academicYearId);\n        schedulesImported = scheduleResult.sessionsImported || 0;\n        logger.scheduleImport('SCHEDULE_IMPORTED', `Sessions: ${schedulesImported} imported, ${scheduleResult.employeesLinked} linked`);\n      }\n      \n      // Final employee linking with improved matching\n      const finalLinkCount = await this.linkUntisScheduleToEmployees(institutionId, academicYearId);\n      \n      return {\n        success: true,\n        teachersCreated,\n        teachersUpdated,\n        subjectsImported,\n        groupsImported,\n        schedulesImported,\n        message: 'Complete GP Untis data import successful',\n        finalEmployeesLinked: finalLinkCount\n      };\n    } catch (error) {\n      logger.scheduleImportError('COMPLETE_IMPORT_ERROR', error as Error);\n      throw error;\n    }\n  }\n  // Weekly schedule methods\n  async getWeeklySchedule(userId: string, weekStart?: string) {\n    try {\n      // Get user's employee record\n      const user = await this.getUser(userId);\n      if (!user) throw new Error('User not found');\n\n      // Find employee by email\n      const [employee] = await db.select()\n        .from(employees)\n        .where(eq(employees.email, user.email!))\n        .limit(1);\n\n      if (!employee) {\n        console.log('WeeklySchedule API - No employee found for user:', user.email);\n        return []; // Return empty if no employee record\n      }\n\n      // Get current academic year for the institution\n      const currentDate = weekStart ? new Date(weekStart) : new Date();\n      const [currentAcademicYear] = await db.select()\n        .from(academicYears)\n        .where(\n          and(\n            eq(academicYears.institutionId, employee.institutionId),\n            lte(academicYears.startDate, currentDate),\n            gte(academicYears.endDate, currentDate)\n          )\n        )\n        .limit(1);\n\n      if (!currentAcademicYear) {\n        console.log('WeeklySchedule API - No active academic year found for date:', currentDate.toISOString());\n        console.log('WeeklySchedule API - Institution:', employee.institutionId);\n        \n        // Get all academic years for debugging\n        const allAcademicYears = await db.select()\n          .from(academicYears)\n          .where(eq(academicYears.institutionId, employee.institutionId));\n        console.log('WeeklySchedule API - Available academic years:', JSON.stringify(allAcademicYears, null, 2));\n        \n        return []; // Return empty if no active academic year\n      }\n\n      console.log('WeeklySchedule API - Using academic year:', currentAcademicYear.name, currentAcademicYear.id);\n\n      // Get weekly schedule from Untis data for the active academic year\n      const schedule = await db.select({\n        id: weeklySchedule.id,\n        dayOfWeek: weeklySchedule.dayOfWeek,\n        hourPeriod: weeklySchedule.hourPeriod,\n        subjectCode: weeklySchedule.subjectCode,\n        subjectName: weeklySchedule.subjectName,\n        groupCode: weeklySchedule.groupCode,\n        classroomCode: weeklySchedule.classroomCode,\n        isLectiveHour: weeklySchedule.isLectiveHour\n      })\n      .from(weeklySchedule)\n      .where(\n        and(\n          eq(weeklySchedule.employeeId, employee.id),\n          eq(weeklySchedule.academicYearId, currentAcademicYear.id)\n        )\n      );\n\n      console.log(`WeeklySchedule API - Found ${schedule.length} sessions for employee ${employee.id} (${user.email}) in academic year ${currentAcademicYear.name}`);\n      if (schedule.length > 0) {\n        console.log('WeeklySchedule API - First session:', JSON.stringify(schedule[0], null, 2));\n      } else {\n        console.log('WeeklySchedule API - No sessions found, checking employee data...');\n        console.log('WeeklySchedule API - Employee found:', JSON.stringify(employee, null, 2));\n        console.log('WeeklySchedule API - Academic year used:', JSON.stringify(currentAcademicYear, null, 2));\n      }\n      \n      return schedule;\n    } catch (error) {\n      console.error('GET_WEEKLY_SCHEDULE_ERROR', error);\n      throw error;\n    }\n  }\n\n  // Communications methods\n\n  async createCommunication(communicationData: any) {\n    try {\n      console.log('CREATE_COMMUNICATION: Creating with data:', communicationData);\n      \n      // Direct SQL insert using correct column names from schema\n      const result = await db.execute(sql`\n        INSERT INTO communications (\n          id, institution_id, sender_id, recipient_id, message_type,\n          subject, message, status, priority, email_sent, created_at, updated_at\n        ) VALUES (\n          ${communicationData.id}, ${communicationData.institutionId}, \n          ${communicationData.senderId}, ${communicationData.recipientId},\n          ${communicationData.message_type}, ${communicationData.subject},\n          ${communicationData.content}, ${communicationData.status},\n          ${communicationData.priority}, ${communicationData.email_sent},\n          NOW(), NOW()\n        ) RETURNING *\n      `);\n\n      console.log('CREATE_COMMUNICATION: Successfully created');\n      return result.rows[0] || communicationData;\n    } catch (error) {\n      console.error('CREATE_COMMUNICATION_ERROR', error);\n      throw error;\n    }\n  }\n\n  async markCommunicationAsRead(communicationId: string, userId: string) {\n    try {\n      const readTime = new Date();\n      const [communication] = await db.update(communications)\n        .set({\n          status: 'read',\n          readAt: readTime\n        })\n        .where(and(\n          eq(communications.id, communicationId),\n          eq(communications.recipientId, userId)\n        ))\n        .returning();\n\n      // Add audit trail\n      if (communication) {\n        await db.insert(communicationAuditLog)\n          .values({\n            communicationId: communication.id,\n            userId: userId,\n            action: 'read',\n            metadata: { readAt: readTime.toISOString() }\n          });\n      }\n\n      return communication;\n    } catch (error) {\n      console.error('MARK_COMMUNICATION_READ_ERROR', error);\n      throw error;\n    }\n  }\n\n  async deleteCommunication(communicationId: string, userId: string) {\n    try {\n      const deleteTime = new Date();\n      const [communication] = await db.update(communications)\n        .set({\n          deletedByUserAt: deleteTime\n        })\n        .where(and(\n          eq(communications.id, communicationId),\n          or(\n            eq(communications.senderId, userId),\n            eq(communications.recipientId, userId)\n          )\n        ))\n        .returning();\n\n      // Add audit trail\n      if (communication) {\n        await db.insert(communicationAuditLog)\n          .values({\n            communicationId: communication.id,\n            userId: userId,\n            action: 'deleted',\n            metadata: { deletedAt: deleteTime.toISOString() }\n          });\n      }\n\n      return communication;\n    } catch (error) {\n      console.error('DELETE_COMMUNICATION_ERROR', error);\n      throw error;\n    }\n  }\n\n  async getCommunicationById(communicationId: string, userId: string) {\n    try {\n      const [communication] = await db.select({\n        id: communications.id,\n        institutionId: communications.institutionId,\n        senderId: communications.senderId,\n        recipientId: communications.recipientId,\n        messageType: communications.messageType,\n        subject: communications.subject,\n        message: communications.message,\n        status: communications.status,\n        priority: communications.priority,\n        emailSent: communications.emailSent,\n        emailSentAt: communications.emailSentAt,\n        readAt: communications.readAt,\n        deliveredAt: communications.deliveredAt,\n        deletedByUserAt: communications.deletedByUserAt,\n        createdAt: communications.createdAt,\n        updatedAt: communications.updatedAt,\n        sender: {\n          firstName: users.firstName,\n          lastName: users.lastName,\n          email: users.email\n        },\n        recipient: {\n          firstName: users.firstName,\n          lastName: users.lastName,\n          email: users.email\n        }\n      })\n      .from(communications)\n      .leftJoin(users, eq(communications.senderId, users.id))\n      .leftJoin(users, eq(communications.recipientId, users.id))\n      .where(and(\n        eq(communications.id, communicationId),\n        or(\n          eq(communications.senderId, userId),\n          eq(communications.recipientId, userId)\n        ),\n        isNull(communications.deletedByUserAt)\n      ));\n\n      return communication;\n    } catch (error) {\n      console.error('GET_COMMUNICATION_BY_ID_ERROR', error);\n      throw error;\n    }\n  }\n\n  async getCommunicationAttachments(communicationId: string) {\n    try {\n      const attachments = await db.select()\n        .from(communicationAttachments)\n        .where(eq(communicationAttachments.communicationId, communicationId));\n\n      return attachments;\n    } catch (error) {\n      console.error('GET_COMMUNICATION_ATTACHMENTS_ERROR', error);\n      throw error;\n    }\n  }\n\n  async addCommunicationAttachment(attachmentData: InsertCommunicationAttachment) {\n    try {\n      const [attachment] = await db.insert(communicationAttachments)\n        .values(attachmentData)\n        .returning();\n\n      return attachment;\n    } catch (error) {\n      console.error('ADD_COMMUNICATION_ATTACHMENT_ERROR', error);\n      throw error;\n    }\n  }\n\n  async updateCommunication(communicationId: string, updateData: Partial<InsertCommunication>) {\n    try {\n      const [communication] = await db.update(communications)\n        .set({\n          ...updateData,\n          updatedAt: new Date()\n        })\n        .where(eq(communications.id, communicationId))\n        .returning();\n\n      return communication;\n    } catch (error) {\n      console.error('UPDATE_COMMUNICATION_ERROR', error);\n      throw error;\n    }\n  }\n\n  async getCommunications(userId: string, filter?: string) {\n    try {\n      console.log('GET_COMMUNICATIONS: Fetching for user:', userId, 'filter:', filter);\n      \n      let whereClause = sql`(c.sender_id = ${userId} OR c.recipient_id = ${userId}) AND c.deleted_by_user_at IS NULL`;\n      \n      if (filter === 'sent') {\n        whereClause = sql`c.sender_id = ${userId} AND c.deleted_by_user_at IS NULL`;\n      } else if (filter === 'inbox') {\n        whereClause = sql`c.recipient_id = ${userId} AND c.deleted_by_user_at IS NULL`;\n      } else if (filter === 'unread') {\n        whereClause = sql`c.recipient_id = ${userId} AND c.read_at IS NULL AND c.deleted_by_user_at IS NULL`;\n      }\n      \n      // Enhanced SQL query with proper user joins and filtering\n      const result = await db.execute(sql`\n        SELECT \n          c.id,\n          c.institution_id as \"institutionId\",\n          c.sender_id as \"senderId\", \n          c.recipient_id as \"recipientId\",\n          c.message_type as \"messageType\",\n          c.subject,\n          c.message,\n          c.status,\n          c.priority,\n          c.email_sent as \"emailSent\",\n          c.email_sent_at as \"emailSentAt\",\n          c.read_at as \"readAt\",\n          c.delivered_at as \"deliveredAt\",\n          c.deleted_by_user_at as \"deletedByUserAt\",\n          c.created_at as \"createdAt\",\n          c.updated_at as \"updatedAt\",\n          COALESCE(s.first_name, 'Sistema') as \"senderFirstName\",\n          COALESCE(s.last_name, 'EduPresència') as \"senderLastName\", \n          COALESCE(s.email, 'sistema@bitacola.edu') as \"senderEmail\",\n          COALESCE(r.first_name, 'Usuari') as \"recipientFirstName\",\n          COALESCE(r.last_name, 'Centre') as \"recipientLastName\",\n          COALESCE(r.email, 'usuari@bitacola.edu') as \"recipientEmail\"\n        FROM communications c\n        LEFT JOIN users s ON c.sender_id = s.id\n        LEFT JOIN users r ON c.recipient_id = r.id\n        WHERE ${whereClause}\n        ORDER BY c.created_at DESC\n      `);\n\n      console.log('GET_COMMUNICATIONS: Found', result.rows.length, 'communications');\n      return result.rows;\n    } catch (error) {\n      console.error('GET_COMMUNICATIONS_ERROR', error);\n      throw error;\n    }\n  }\n\n  // Password change method\n  async changeUserPassword(userId: string, currentPassword: string, newPassword: string) {\n    try {\n      const user = await this.getUser(userId);\n      if (!user) throw new Error('User not found');\n\n      // Verify current password\n      const bcrypt = await import('bcrypt');\n      const isValidPassword = await bcrypt.compare(currentPassword, user.passwordHash!);\n      if (!isValidPassword) {\n        throw new Error('Current password is incorrect');\n      }\n\n      // Hash new password\n      const hashedNewPassword = await bcrypt.hash(newPassword, 10);\n\n      // Update password\n      await db.update(users)\n        .set({ passwordHash: hashedNewPassword })\n        .where(eq(users.id, userId));\n\n      return { success: true, message: 'Password updated successfully' };\n    } catch (error) {\n      console.error('CHANGE_PASSWORD_ERROR', error);\n      throw error;\n    }\n  }\n\n  // Get users by institution for communications\n  async getUsersByInstitution(institutionId: string) {\n    try {\n      const institutionUsers = await db.select({\n        id: users.id,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n        role: users.role\n      })\n      .from(users)\n      .where(eq(users.institutionId, institutionId));\n\n      return institutionUsers;\n    } catch (error) {\n      console.error('GET_USERS_BY_INSTITUTION_ERROR', error);\n      throw error;\n    }\n  }\n\n  // Generate weekly schedule from Untis sessions (for import process)\n  async generateWeeklyScheduleFromUntis(institutionId: string, academicYearId: string) {\n    try {\n      // Clear existing weekly schedule for this academic year\n      await db.delete(weeklySchedule)\n        .where(and(\n          eq(weeklySchedule.institutionId, institutionId),\n          eq(weeklySchedule.academicYearId, academicYearId)\n        ));\n\n      // Generate weekly schedule directly from Untis sessions using SQL for better performance\n      const result = await db.execute(sql`\n        INSERT INTO weekly_schedule (id, employee_id, institution_id, academic_year_id, day_of_week, hour_period, subject_code, subject_name, group_code, classroom_code, is_lective_hour, created_at, updated_at)\n        SELECT \n          gen_random_uuid(),\n          uss.employee_id,\n          uss.institution_id,\n          uss.academic_year_id,\n          uss.day_of_week,\n          uss.hour_period,\n          uss.subject_code,\n          uss.subject_code,\n          uss.group_code,\n          uss.classroom_code,\n          true,\n          NOW(),\n          NOW()\n        FROM untis_schedule_sessions uss\n        WHERE uss.institution_id = ${institutionId}\n        AND uss.academic_year_id = ${academicYearId}\n        AND uss.employee_id IS NOT NULL\n      `);\n\n      const insertedCount = result.rowCount || 0;\n      console.log('WEEKLY_SCHEDULE_GENERATED', `Generated ${insertedCount} weekly schedule entries from Untis data`);\n      return insertedCount;\n    } catch (error) {\n      console.error('GENERATE_WEEKLY_SCHEDULE_ERROR', error);\n      throw error;\n    }\n  }\n\n  // Reports functionality\n  async getAttendanceOverview(institutionId: string, startDate?: Date, endDate?: Date): Promise<{\n    totalEmployees: number;\n    attendanceRate: number;\n    averageHoursPerDay: number;\n    totalLatesThisMonth: number;\n    totalAbsencesThisMonth: number;\n  }> {\n    try {\n      const now = new Date();\n      const defaultStartDate = startDate || new Date(now.getFullYear(), now.getMonth(), 1);\n      const defaultEndDate = endDate || now;\n\n      // Get total employees in institution\n      const allEmployees = await db\n        .select({ count: count() })\n        .from(employees)\n        .where(eq(employees.institutionId, institutionId));\n      \n      const totalEmployees = allEmployees[0]?.count || 0;\n\n      if (totalEmployees === 0) {\n        return {\n          totalEmployees: 0,\n          attendanceRate: 0,\n          averageHoursPerDay: 0,\n          totalLatesThisMonth: 0,\n          totalAbsencesThisMonth: 0,\n        };\n      }\n\n      // Get attendance records for the period - SIMPLIFIED VERSION\n      const attendanceData = await db\n        .select({\n          employeeId: attendanceRecords.employeeId,\n          timestamp: attendanceRecords.timestamp,\n          type: attendanceRecords.type,\n        })\n        .from(attendanceRecords)\n        .innerJoin(employees, eq(attendanceRecords.employeeId, employees.id))\n        .where(eq(employees.institutionId, institutionId));\n\n      console.log(`DEBUG: Found ${attendanceData.length} attendance records for institution ${institutionId}`);\n\n      // Calculate attendance statistics\n      const employeeAttendance = new Map<string, { dates: Set<string>; totalHours: number; lateCount: number }>();\n      \n      for (const record of attendanceData) {\n        // Simple date formatting without date-fns\n        const dateStr = record.timestamp.toISOString().split('T')[0];\n        const employeeId = record.employeeId;\n        \n        if (!employeeAttendance.has(employeeId)) {\n          employeeAttendance.set(employeeId, { \n            dates: new Set(), \n            totalHours: 0, \n            lateCount: 0 \n          });\n        }\n        \n        const empData = employeeAttendance.get(employeeId)!;\n        empData.dates.add(dateStr);\n        \n        // Check if late (after 8:30)\n        const hour = record.timestamp.getHours();\n        const minute = record.timestamp.getMinutes();\n        if (record.type === 'check_in' && (hour > 8 || (hour === 8 && minute > 30))) {\n          empData.lateCount++;\n        }\n      }\n\n      // Get absences for the period - SIMPLIFIED VERSION\n      const absenceData = await db\n        .select({ employeeId: absences.employeeId })\n        .from(absences)\n        .innerJoin(employees, eq(absences.employeeId, employees.id))\n        .where(eq(employees.institutionId, institutionId));\n\n      console.log(`DEBUG: Found ${absenceData.length} absences for institution ${institutionId}`);\n\n      // Calculate metrics\n      const workingDays = Math.ceil((defaultEndDate.getTime() - defaultStartDate.getTime()) / (1000 * 60 * 60 * 24));\n      const expectedAttendanceDays = totalEmployees * Math.max(1, workingDays);\n      const actualAttendanceDays = Array.from(employeeAttendance.values()).reduce((sum, emp) => sum + emp.dates.size, 0);\n      \n      const attendanceRate = expectedAttendanceDays > 0 ? (actualAttendanceDays / expectedAttendanceDays) * 100 : 0;\n      const totalLatesThisMonth = Array.from(employeeAttendance.values()).reduce((sum, emp) => sum + emp.lateCount, 0);\n      const averageHoursPerDay = totalEmployees > 0 ? (actualAttendanceDays * 8) / Math.max(totalEmployees, 1) : 0;\n\n      return {\n        totalEmployees,\n        attendanceRate: Math.round(attendanceRate * 10) / 10,\n        averageHoursPerDay: Math.round(averageHoursPerDay * 10) / 10,\n        totalLatesThisMonth,\n        totalAbsencesThisMonth: absenceData.length,\n      };\n\n    } catch (error) {\n      console.error(\"Error getting attendance overview:\", error);\n      throw error;\n    }\n  }\n\n  // Employee-specific attendance overview (for employee role)\n  async getEmployeeAttendanceOverview(userId: string, startDate?: Date, endDate?: Date): Promise<{\n    totalEmployees: number;\n    attendanceRate: number;\n    averageHoursPerDay: number;\n    totalLatesThisMonth: number;\n    totalAbsencesThisMonth: number;\n  }> {\n    try {\n      const now = new Date();\n      const defaultStartDate = startDate || new Date(now.getFullYear(), now.getMonth(), 1);\n      const defaultEndDate = endDate || now;\n\n      // Get employee record for this user\n      const employee = await db\n        .select()\n        .from(employees)\n        .where(eq(employees.userId, userId))\n        .limit(1);\n\n      if (employee.length === 0) {\n        return {\n          totalEmployees: 0,\n          attendanceRate: 0,\n          averageHoursPerDay: 0,\n          totalLatesThisMonth: 0,\n          totalAbsencesThisMonth: 0,\n        };\n      }\n\n      const employeeRecord = employee[0];\n      console.log(`DEBUG: Found employee ${employeeRecord.fullName} for user ${userId}`);\n\n      // Get attendance records for this specific employee\n      const attendanceData = await db\n        .select({\n          timestamp: attendanceRecords.timestamp,\n          type: attendanceRecords.type,\n        })\n        .from(attendanceRecords)\n        .where(eq(attendanceRecords.employeeId, employeeRecord.id));\n\n      console.log(`DEBUG: Found ${attendanceData.length} attendance records for employee ${employeeRecord.id}`);\n\n      // Calculate attendance for this employee only\n      const workingDays = Math.ceil((defaultEndDate.getTime() - defaultStartDate.getTime()) / (1000 * 60 * 60 * 24));\n      const attendanceDays = new Set<string>();\n      let lateCount = 0;\n\n      for (const record of attendanceData) {\n        const dateStr = record.timestamp.toISOString().split('T')[0];\n        attendanceDays.add(dateStr);\n        \n        // Check if late (after 8:30)\n        const hour = record.timestamp.getHours();\n        const minute = record.timestamp.getMinutes();\n        if (record.type === 'check_in' && (hour > 8 || (hour === 8 && minute > 30))) {\n          lateCount++;\n        }\n      }\n\n      // Get absences for this employee\n      const absenceData = await db\n        .select()\n        .from(absences)\n        .where(eq(absences.employeeId, employeeRecord.id));\n\n      console.log(`DEBUG: Found ${absenceData.length} absences for employee ${employeeRecord.id}`);\n\n      const attendanceRate = workingDays > 0 ? (attendanceDays.size / Math.max(workingDays, 1)) * 100 : 0;\n      const averageHoursPerDay = attendanceDays.size > 0 ? (attendanceDays.size * 8) / Math.max(attendanceDays.size, 1) : 0;\n\n      return {\n        totalEmployees: 1, // For employee view, always 1\n        attendanceRate: Math.round(attendanceRate * 10) / 10,\n        averageHoursPerDay: Math.round(averageHoursPerDay * 10) / 10,\n        totalLatesThisMonth: lateCount,\n        totalAbsencesThisMonth: absenceData.length,\n      };\n\n    } catch (error) {\n      console.error(\"Error getting employee attendance overview:\", error);\n      throw error;\n    }\n  }\n\n  // Employee-specific monthly trends\n  async getEmployeeMonthlyTrends(userId: string, months: number = 12): Promise<Array<{\n    month: string;\n    attendanceRate: number;\n    totalHours: number;\n    lateCount: number;\n    absenceCount: number;\n  }>> {\n    try {\n      const results = [];\n      const now = new Date();\n      \n      for (let i = months - 1; i >= 0; i--) {\n        const monthDate = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        const startDate = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n        const endDate = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n        \n        const monthOverview = await this.getEmployeeAttendanceOverview(userId, startDate, endDate);\n        \n        results.push({\n          month: monthDate.toISOString().substring(0, 7),\n          attendanceRate: monthOverview.attendanceRate,\n          totalHours: monthOverview.averageHoursPerDay * 20, // Approximate working days\n          lateCount: monthOverview.totalLatesThisMonth,\n          absenceCount: monthOverview.totalAbsencesThisMonth,\n        });\n      }\n      \n      return results;\n    } catch (error) {\n      console.error(\"Error getting employee monthly trends:\", error);\n      throw error;\n    }\n  }\n\n  // Employee detailed attendance records\n  async getEmployeeDetailedAttendance(userId: string, startDate?: Date, endDate?: Date): Promise<Array<{\n    date: string;\n    checkIn: string | null;\n    checkOut: string | null;\n    hoursWorked: number;\n    status: 'on_time' | 'late' | 'absent' | 'incomplete';\n    lateMinutes: number;\n  }>> {\n    try {\n      const now = new Date();\n      const defaultStartDate = startDate || new Date(now.getFullYear(), now.getMonth(), 1);\n      const defaultEndDate = endDate || now;\n\n      // Get employee record\n      const employee = await db\n        .select()\n        .from(employees)\n        .where(eq(employees.userId, userId))\n        .limit(1);\n\n      if (employee.length === 0) return [];\n\n      const employeeRecord = employee[0];\n\n      // Get all attendance records for the period\n      const attendanceData = await db\n        .select({\n          timestamp: attendanceRecords.timestamp,\n          type: attendanceRecords.type,\n        })\n        .from(attendanceRecords)\n        .where(\n          and(\n            eq(attendanceRecords.employeeId, employeeRecord.id),\n            gte(attendanceRecords.timestamp, defaultStartDate),\n            lte(attendanceRecords.timestamp, defaultEndDate)\n          )\n        )\n        .orderBy(attendanceRecords.timestamp);\n\n      // Process by date\n      const results = [];\n      const currentDate = new Date(defaultStartDate);\n      \n      while (currentDate <= defaultEndDate) {\n        const dateStr = currentDate.toISOString().split('T')[0];\n        \n        // Get records for this date\n        const dayRecords = attendanceData.filter(record => \n          record.timestamp.toISOString().split('T')[0] === dateStr\n        );\n        \n        const checkInRecord = dayRecords.find(r => r.type === 'check_in');\n        const checkOutRecord = dayRecords.find(r => r.type === 'check_out');\n        \n        let status: 'on_time' | 'late' | 'absent' | 'incomplete' = 'absent';\n        let lateMinutes = 0;\n        let hoursWorked = 0;\n        \n        if (checkInRecord) {\n          const checkInTime = checkInRecord.timestamp;\n          const hour = checkInTime.getHours();\n          const minute = checkInTime.getMinutes();\n          \n          // Check if late (after 8:30)\n          if (hour > 8 || (hour === 8 && minute > 30)) {\n            const expectedTime = new Date(checkInTime);\n            expectedTime.setHours(8, 30, 0, 0);\n            lateMinutes = Math.round((checkInTime.getTime() - expectedTime.getTime()) / (1000 * 60));\n            status = 'late';\n          } else {\n            status = 'on_time';\n          }\n          \n          // Calculate hours worked if both check-in and check-out exist\n          if (checkOutRecord) {\n            hoursWorked = (checkOutRecord.timestamp.getTime() - checkInRecord.timestamp.getTime()) / (1000 * 60 * 60);\n          } else {\n            status = 'incomplete';\n          }\n        }\n        \n        results.push({\n          date: dateStr,\n          checkIn: checkInRecord ? checkInRecord.timestamp.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }) : null,\n          checkOut: checkOutRecord ? checkOutRecord.timestamp.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }) : null,\n          hoursWorked: Math.round(hoursWorked * 100) / 100,\n          status,\n          lateMinutes,\n        });\n        \n        currentDate.setDate(currentDate.getDate() + 1);\n      }\n      \n      return results;\n    } catch (error) {\n      console.error(\"Error getting employee detailed attendance:\", error);\n      throw error;\n    }\n  }\n\n  // Institution detailed attendance (for admins)\n  async getInstitutionDetailedAttendance(institutionId: string, startDate?: Date, endDate?: Date): Promise<Array<{\n    employeeName: string;\n    date: string;\n    checkIn: string | null;\n    checkOut: string | null;\n    hoursWorked: number;\n    status: 'on_time' | 'late' | 'absent' | 'incomplete';\n    lateMinutes: number;\n  }>> {\n    try {\n      const now = new Date();\n      const defaultStartDate = startDate || new Date(now.getFullYear(), now.getMonth(), 1);\n      const defaultEndDate = endDate || now;\n\n      // Get all employees in institution\n      const employeesList = await db\n        .select()\n        .from(employees)\n        .where(eq(employees.institutionId, institutionId));\n\n      const results = [];\n      \n      for (const employee of employeesList) {\n        // Get attendance records for this employee\n        const attendanceData = await db\n          .select({\n            timestamp: attendanceRecords.timestamp,\n            type: attendanceRecords.type,\n          })\n          .from(attendanceRecords)\n          .where(\n            and(\n              eq(attendanceRecords.employeeId, employee.id),\n              gte(attendanceRecords.timestamp, defaultStartDate),\n              lte(attendanceRecords.timestamp, defaultEndDate)\n            )\n          )\n          .orderBy(attendanceRecords.timestamp);\n\n        // Process by date for this employee\n        const currentDate = new Date(defaultStartDate);\n        \n        while (currentDate <= defaultEndDate) {\n          const dateStr = currentDate.toISOString().split('T')[0];\n          \n          const dayRecords = attendanceData.filter(record => \n            record.timestamp.toISOString().split('T')[0] === dateStr\n          );\n          \n          const checkInRecord = dayRecords.find(r => r.type === 'check_in');\n          const checkOutRecord = dayRecords.find(r => r.type === 'check_out');\n          \n          let status: 'on_time' | 'late' | 'absent' | 'incomplete' = 'absent';\n          let lateMinutes = 0;\n          let hoursWorked = 0;\n          \n          if (checkInRecord) {\n            const checkInTime = checkInRecord.timestamp;\n            const hour = checkInTime.getHours();\n            const minute = checkInTime.getMinutes();\n            \n            if (hour > 8 || (hour === 8 && minute > 30)) {\n              const expectedTime = new Date(checkInTime);\n              expectedTime.setHours(8, 30, 0, 0);\n              lateMinutes = Math.round((checkInTime.getTime() - expectedTime.getTime()) / (1000 * 60));\n              status = 'late';\n            } else {\n              status = 'on_time';\n            }\n            \n            if (checkOutRecord) {\n              hoursWorked = (checkOutRecord.timestamp.getTime() - checkInRecord.timestamp.getTime()) / (1000 * 60 * 60);\n            } else {\n              status = 'incomplete';\n            }\n          }\n          \n          results.push({\n            employeeName: employee.fullName,\n            date: dateStr,\n            checkIn: checkInRecord ? checkInRecord.timestamp.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }) : null,\n            checkOut: checkOutRecord ? checkOutRecord.timestamp.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }) : null,\n            hoursWorked: Math.round(hoursWorked * 100) / 100,\n            status,\n            lateMinutes,\n          });\n          \n          currentDate.setDate(currentDate.getDate() + 1);\n        }\n      }\n      \n      return results.sort((a, b) => b.date.localeCompare(a.date)); // Most recent first\n    } catch (error) {\n      console.error(\"Error getting institution detailed attendance:\", error);\n      throw error;\n    }\n  }\n\n  async getDepartmentComparison(institutionId: string, startDate?: Date, endDate?: Date): Promise<Array<{\n    departmentName: string;\n    totalEmployees: number;\n    attendanceRate: number;\n    averageHours: number;\n    lateCount: number;\n  }>> {\n    try {\n      const now = new Date();\n      const defaultStartDate = startDate || new Date(now.getFullYear(), now.getMonth(), 1);\n      const defaultEndDate = endDate || now;\n\n      // Get departments with employee counts\n      const departmentData = await db\n        .select({\n          departmentId: employees.departmentId,\n          departmentName: departments.name,\n          employeeId: employees.id,\n        })\n        .from(employees)\n        .leftJoin(departments, eq(employees.departmentId, departments.id))\n        .where(eq(employees.institutionId, institutionId));\n\n      if (departmentData.length === 0) {\n        return [];\n      }\n\n      // Group by department\n      const deptMap = new Map<string, { name: string; employeeIds: Set<string> }>();\n      \n      for (const emp of departmentData) {\n        const deptId = emp.departmentId || 'sin-departamento';\n        const deptName = emp.departmentName || 'Sin departamento';\n        \n        if (!deptMap.has(deptId)) {\n          deptMap.set(deptId, { name: deptName, employeeIds: new Set() });\n        }\n        deptMap.get(deptId)!.employeeIds.add(emp.employeeId);\n      }\n\n      // Get attendance data for all employees\n      const attendanceData = await db\n        .select({\n          employeeId: attendanceRecords.employeeId,\n          timestamp: attendanceRecords.timestamp,\n          type: attendanceRecords.type,\n        })\n        .from(attendanceRecords)\n        .innerJoin(employees, eq(attendanceRecords.employeeId, employees.id))\n        .where(\n          and(\n            eq(employees.institutionId, institutionId),\n            gte(attendanceRecords.timestamp, defaultStartDate),\n            lte(attendanceRecords.timestamp, defaultEndDate)\n          )\n        );\n\n      // Calculate department statistics\n      const results = [];\n      \n      for (const [deptId, deptInfo] of Array.from(deptMap.entries())) {\n        const employeeAttendance = new Map<string, { dates: Set<string>; lateCount: number }>();\n        \n        // Initialize for all employees in department\n        for (const empId of deptInfo.employeeIds) {\n          employeeAttendance.set(empId, { dates: new Set(), lateCount: 0 });\n        }\n        \n        // Process attendance records\n        for (const record of attendanceData) {\n          if (deptInfo.employeeIds.has(record.employeeId)) {\n            const dateStr = record.timestamp.toISOString().split('T')[0];\n            const empData = employeeAttendance.get(record.employeeId)!;\n            empData.dates.add(dateStr);\n            \n            // Check if late\n            const hour = record.timestamp.getHours();\n            const minute = record.timestamp.getMinutes();\n            if (record.type === 'check_in' && (hour > 8 || (hour === 8 && minute > 30))) {\n              empData.lateCount++;\n            }\n          }\n        }\n\n        // Calculate metrics\n        const totalEmployees = deptInfo.employeeIds.size;\n        const workingDays = Math.ceil((defaultEndDate.getTime() - defaultStartDate.getTime()) / (1000 * 60 * 60 * 24));\n        const expectedAttendanceDays = totalEmployees * Math.max(1, workingDays);\n        const actualAttendanceDays = Array.from(employeeAttendance.values()).reduce((sum, emp) => sum + emp.dates.size, 0);\n        const totalLates = Array.from(employeeAttendance.values()).reduce((sum, emp) => sum + emp.lateCount, 0);\n        \n        const attendanceRate = expectedAttendanceDays > 0 ? (actualAttendanceDays / expectedAttendanceDays) * 100 : 0;\n        const averageHours = totalEmployees > 0 ? (actualAttendanceDays * 8) / Math.max(totalEmployees, 1) : 0;\n\n        results.push({\n          departmentName: deptInfo.name,\n          totalEmployees,\n          attendanceRate: Math.round(attendanceRate * 10) / 10,\n          averageHours: Math.round(averageHours * 10) / 10,\n          lateCount: totalLates,\n        });\n      }\n\n      return results.sort((a, b) => b.attendanceRate - a.attendanceRate);\n\n    } catch (error) {\n      console.error(\"Error getting department comparison:\", error);\n      throw error;\n    }\n  }\n\n  async getMonthlyTrends(institutionId: string, months: number = 12): Promise<Array<{\n    month: string;\n    attendanceRate: number;\n    totalHours: number;\n    lateCount: number;\n    absenceCount: number;\n  }>> {\n    try {\n      const results = [];\n      const now = new Date();\n      \n      for (let i = months - 1; i >= 0; i--) {\n        const monthDate = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        const startDate = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n        const endDate = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n        \n        const monthOverview = await this.getAttendanceOverview(institutionId, startDate, endDate);\n        \n        results.push({\n          month: monthDate.toISOString().substring(0, 7),\n          attendanceRate: monthOverview.attendanceRate,\n          totalHours: monthOverview.averageHoursPerDay * monthOverview.totalEmployees,\n          lateCount: monthOverview.totalLatesThisMonth,\n          absenceCount: monthOverview.totalAbsencesThisMonth,\n        });\n      }\n      \n      return results;\n\n    } catch (error) {\n      console.error(\"Error getting monthly trends:\", error);\n      throw error;\n    }\n  }\n\n  async getAttendanceRatesByPeriod(institutionId: string, startDate: Date, endDate: Date): Promise<Array<{\n    date: string;\n    present: number;\n    absent: number;\n    late: number;\n    attendanceRate: number;\n  }>> {\n    try {\n      // Get all employees in institution\n      const allEmployees = await db\n        .select({ id: employees.id })\n        .from(employees)\n        .where(eq(employees.institutionId, institutionId));\n      \n      const totalEmployees = allEmployees.length;\n      if (totalEmployees === 0) return [];\n\n      // Get attendance records for the period\n      const attendanceData = await db\n        .select({\n          employeeId: attendanceRecords.employeeId,\n          timestamp: attendanceRecords.timestamp,\n          type: attendanceRecords.type,\n        })\n        .from(attendanceRecords)\n        .innerJoin(employees, eq(attendanceRecords.employeeId, employees.id))\n        .where(\n          and(\n            eq(employees.institutionId, institutionId),\n            gte(attendanceRecords.timestamp, startDate),\n            lte(attendanceRecords.timestamp, endDate)\n          )\n        );\n\n      // Get absences for the period\n      const absenceData = await db\n        .select({\n          employeeId: absences.employeeId,\n          date: absences.startDate,\n        })\n        .from(absences)\n        .innerJoin(employees, eq(absences.employeeId, employees.id))\n        .where(\n          and(\n            eq(employees.institutionId, institutionId),\n            gte(absences.startDate, startDate),\n            lte(absences.startDate, endDate)\n          )\n        );\n\n      // Process by date\n      const results = [];\n      const currentDate = new Date(startDate);\n      \n      while (currentDate <= endDate) {\n        const dateStr = currentDate.toISOString().split('T')[0];\n        \n        // Get attendance for this date\n        const dayAttendance = attendanceData.filter(record => \n          record.timestamp.toISOString().split('T')[0] === dateStr\n        );\n        \n        const dayAbsences = absenceData.filter(absence => \n          absence.date.toISOString().split('T')[0] === dateStr\n        );\n        \n        // Count unique employees who checked in\n        const presentEmployees = new Set(\n          dayAttendance\n            .filter(record => record.type === 'check_in')\n            .map(record => record.employeeId)\n        );\n        \n        // Count late arrivals (after 8:30)\n        const lateEmployees = dayAttendance.filter(record => \n          record.type === 'check_in' && \n          (record.timestamp.getHours() > 8 || \n           (record.timestamp.getHours() === 8 && record.timestamp.getMinutes() > 30))\n        ).length;\n        \n        const present = presentEmployees.size;\n        const absent = totalEmployees - present;\n        const attendanceRate = totalEmployees > 0 ? (present / totalEmployees) * 100 : 0;\n        \n        results.push({\n          date: dateStr,\n          present,\n          absent,\n          late: lateEmployees,\n          attendanceRate: Math.round(attendanceRate * 10) / 10,\n        });\n        \n        currentDate.setDate(currentDate.getDate() + 1);\n      }\n      \n      return results;\n\n    } catch (error) {\n      console.error(\"Error getting attendance rates by period:\", error);\n      throw error;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":101143},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  boolean,\n  integer,\n  decimal,\n  date,\n  time,\n  pgEnum,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  passwordHash: varchar(\"password_hash\"),\n  role: varchar(\"role\").notNull().default(\"employee\"), // superadmin, admin, employee\n  institutionId: varchar(\"institution_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Institutions/Centers\nexport const institutions = pgTable(\"institutions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  address: text(\"address\"),\n  timezone: varchar(\"timezone\").notNull().default(\"Europe/Barcelona\"),\n  defaultLanguage: varchar(\"default_language\").notNull().default(\"ca\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Academic Years\nexport const academicYears = pgTable(\"academic_years\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  name: varchar(\"name\").notNull(), // e.g., \"2024-2025\"\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(false),\n  status: varchar(\"status\").notNull().default(\"draft\"), // draft, active, archived\n  description: text(\"description\"),\n  settings: jsonb(\"settings\"), // Academic year specific settings\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  unique(\"unique_institution_active\").on(table.institutionId, table.isActive),\n  index(\"idx_academic_years_institution\").on(table.institutionId),\n  index(\"idx_academic_years_dates\").on(table.startDate, table.endDate),\n]);\n\n// Academic Year Migration Logs\nexport const academicYearMigrations = pgTable(\"academic_year_migrations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  sourceYearId: varchar(\"source_year_id\").notNull(),\n  targetYearId: varchar(\"target_year_id\").notNull(),\n  migrationType: varchar(\"migration_type\").notNull(), // employees, schedules, departments, all\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, in_progress, completed, failed\n  totalRecords: integer(\"total_records\").default(0),\n  migratedRecords: integer(\"migrated_records\").default(0),\n  failedRecords: integer(\"failed_records\").default(0),\n  errors: jsonb(\"errors\"),\n  migrationData: jsonb(\"migration_data\"), // Detailed migration information\n  initiatedBy: varchar(\"initiated_by\").notNull(),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_migrations_institution\").on(table.institutionId),\n  index(\"idx_migrations_status\").on(table.status),\n]);\n\n// Departments\nexport const departments = pgTable(\"departments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  academicYearId: varchar(\"academic_year_id\").notNull(), // Link to academic year\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  headOfDepartment: varchar(\"head_of_department\"), // Employee ID\n  budget: decimal(\"budget\", { precision: 12, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_departments_institution_year\").on(table.institutionId, table.academicYearId),\n]);\n\n// Employee contract types\nexport const contractTypeEnum = pgEnum(\"contract_type\", [\"full_time\", \"part_time\", \"substitute\"]);\nexport const employeeStatusEnum = pgEnum(\"employee_status\", [\"active\", \"inactive\", \"temporary_leave\"]);\n\n// Employees\nexport const employees = pgTable(\"employees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  institutionId: varchar(\"institution_id\").notNull(),\n  academicYearId: varchar(\"academic_year_id\").notNull(), // Link to academic year\n  departmentId: varchar(\"department_id\"),\n  dni: varchar(\"dni\").notNull(),\n  fullName: varchar(\"full_name\").notNull(),\n  email: varchar(\"email\").notNull(),\n  phone: varchar(\"phone\"),\n  contractType: contractTypeEnum(\"contract_type\").notNull(),\n  status: employeeStatusEnum(\"status\").notNull().default(\"active\"),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\"),\n  teacherCode: varchar(\"teacher_code\"), // For GP Untis integration\n  position: varchar(\"position\"),\n  contractHours: decimal(\"contract_hours\", { precision: 5, scale: 2 }),\n  salary: decimal(\"salary\", { precision: 10, scale: 2 }),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_employees_institution_year\").on(table.institutionId, table.academicYearId),\n  index(\"idx_employees_teacher_code\").on(table.teacherCode),\n  index(\"idx_employees_email\").on(table.email),\n]);\n\n// Subjects/Materies (GP Untis compatible)\nexport const subjects = pgTable(\"subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  academicYearId: varchar(\"academic_year_id\").notNull(),\n  code: varchar(\"code\").notNull(), // e.g., \"ANG 1.1\", \"MATES 1\"\n  name: varchar(\"name\").notNull(), // Full subject name\n  shortName: varchar(\"short_name\"),\n  defaultClassroom: varchar(\"default_classroom\"),\n  department: varchar(\"department\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Classes/Groups (S1A, S1B, etc.) - GP Untis compatible\nexport const classGroups = pgTable(\"class_groups\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  academicYearId: varchar(\"academic_year_id\").notNull(),\n  code: varchar(\"code\").notNull(), // e.g., \"S1A\", \"S2B\"\n  level: varchar(\"level\").notNull(), // e.g., \"1ESO\", \"2ESO\"\n  section: varchar(\"section\").notNull(), // e.g., \"A\", \"B\"\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Classrooms/Aules\nexport const classrooms = pgTable(\"classrooms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  code: varchar(\"code\").notNull(), // e.g., \"111\", \"GYM\", \"PATI\"\n  name: varchar(\"name\"), // Optional full name\n  capacity: integer(\"capacity\"),\n  type: varchar(\"type\"), // normal, gym, lab, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// GP Untis Schedule Sessions\nexport const untisScheduleSessions = pgTable(\"untis_schedule_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  academicYearId: varchar(\"academic_year_id\").notNull(),\n  sessionId: varchar(\"session_id\"),\n  classeId: varchar(\"classe_id\"), // CLASSE field from CSV\n  groupCode: varchar(\"group_code\").notNull(), // GRUP field (S1A, S1B)\n  teacherCode: varchar(\"teacher_code\").notNull(), // DOCENT field\n  subjectCode: varchar(\"subject_code\").notNull(), // MATÈRIA field\n  classroomCode: varchar(\"classroom_code\"), // AULA field (can be empty)\n  dayOfWeek: integer(\"day_of_week\").notNull(), // DIA field (1-5)\n  hourPeriod: integer(\"hour_period\").notNull(), // HORA field\n  employeeId: varchar(\"employee_id\"), // Linked to employees table\n  subjectId: varchar(\"subject_id\"), // Linked to subjects table\n  classGroupId: varchar(\"class_group_id\"), // Linked to class_groups table\n  classroomId: varchar(\"classroom_id\"), // Linked to classrooms table\n  importedAt: timestamp(\"imported_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Employee schedules (simplified - derived from Untis data)\nexport const schedules = pgTable(\"schedules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull(),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 1-7 (Monday-Sunday)\n  startTime: time(\"start_time\").notNull(),\n  endTime: time(\"end_time\").notNull(),\n  isLectiveTime: boolean(\"is_lective_time\").notNull().default(true),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Communications table removed - using newer definition below\n\n// Weekly schedule view for employees (derived from Untis sessions)\nexport const weeklySchedule = pgTable(\"weekly_schedule\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull(),\n  institutionId: varchar(\"institution_id\").notNull(),\n  academicYearId: varchar(\"academic_year_id\").notNull(),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 1-5 (Monday-Friday)\n  hourPeriod: integer(\"hour_period\").notNull(), // 1-8 typical class periods\n  subjectCode: varchar(\"subject_code\"),\n  subjectName: varchar(\"subject_name\"),\n  groupCode: varchar(\"group_code\"),\n  classroomCode: varchar(\"classroom_code\"),\n  isLectiveHour: boolean(\"is_lective_hour\").notNull().default(true), // true for teaching, false for non-teaching\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Attendance records\nexport const attendanceTypeEnum = pgEnum(\"attendance_type\", [\"check_in\", \"check_out\"]);\nexport const attendanceMethodEnum = pgEnum(\"attendance_method\", [\"web\", \"qr\", \"nfc\", \"manual\"]);\n\nexport const attendanceRecords = pgTable(\"attendance_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull(),\n  academicYearId: varchar(\"academic_year_id\").notNull(), // Link to academic year\n  type: attendanceTypeEnum(\"type\").notNull(),\n  timestamp: timestamp(\"timestamp\").notNull(),\n  method: attendanceMethodEnum(\"method\").notNull().default(\"web\"),\n  location: text(\"location\"), // For geolocation verification\n  notes: text(\"notes\"),\n  justificationId: varchar(\"justification_id\"), // Link to absence justification\n  isLate: boolean(\"is_late\").default(false),\n  lateMinutes: integer(\"late_minutes\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_attendance_employee_year\").on(table.employeeId, table.academicYearId),\n  index(\"idx_attendance_timestamp\").on(table.timestamp),\n]);\n\n// Absence types and reasons\nexport const absenceTypeEnum = pgEnum(\"absence_type\", [\"sick_leave\", \"personal\", \"vacation\", \"training\", \"other\"]);\nexport const absenceStatusEnum = pgEnum(\"absence_status\", [\"pending\", \"approved\", \"rejected\"]);\n\nexport const absences = pgTable(\"absences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull(),\n  type: absenceTypeEnum(\"type\").notNull(),\n  status: absenceStatusEnum(\"status\").notNull().default(\"pending\"),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  reason: text(\"reason\"),\n  documentation: text(\"documentation\"), // File path or URL\n  approvedBy: varchar(\"approved_by\"),\n  approvedAt: timestamp(\"approved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Alerts\nexport const alertTypeEnum = pgEnum(\"alert_type\", [\"late_arrival\", \"absence\", \"missing_checkout\", \"substitute_needed\"]);\nexport const alertStatusEnum = pgEnum(\"alert_status\", [\"active\", \"resolved\", \"dismissed\"]);\n\nexport const alerts = pgTable(\"alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull(),\n  type: alertTypeEnum(\"type\").notNull(),\n  status: alertStatusEnum(\"status\").notNull().default(\"active\"),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  metadata: jsonb(\"metadata\"), // Additional alert-specific data\n  resolvedBy: varchar(\"resolved_by\"),\n  resolvedAt: timestamp(\"resolved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Substitute assignments\nexport const substituteAssignments = pgTable(\"substitute_assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  absentEmployeeId: varchar(\"absent_employee_id\").notNull(),\n  substituteEmployeeId: varchar(\"substitute_employee_id\").notNull(),\n  date: date(\"date\").notNull(),\n  startTime: time(\"start_time\").notNull(),\n  endTime: time(\"end_time\").notNull(),\n  room: varchar(\"room\"),\n  notes: text(\"notes\"),\n  isAutoAssigned: boolean(\"is_auto_assigned\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Settings for alert thresholds and configurations - Fixed unique constraint\nexport const settings = pgTable(\"settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  key: varchar(\"key\").notNull(),\n  value: text(\"value\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  settingsUniqueInstitutionKey: unique(\"settings_institution_key_unique\").on(table.institutionId, table.key),\n}));\n\n// SMTP Configuration table for CONFIG-010  \nexport const smtpConfigurations = pgTable(\"smtp_configurations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  host: varchar(\"host\").notNull(),\n  port: integer(\"port\").notNull(),\n  username: varchar(\"username\").notNull(),\n  password: varchar(\"password\").notNull(), // Should be encrypted\n  isSecure: boolean(\"is_secure\").notNull().default(true),\n  fromEmail: varchar(\"from_email\").notNull(),\n  fromName: varchar(\"from_name\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Risk Assessment table for CONFIG-009\nexport const riskAssessments = pgTable(\"risk_assessments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull(),\n  institutionId: varchar(\"institution_id\").notNull(),\n  riskLevel: varchar(\"risk_level\").notNull(), // 'low', 'medium', 'high', 'critical'\n  delayMinutes: integer(\"delay_minutes\").notNull().default(0),\n  absenceDays: integer(\"absence_days\").notNull().default(0),\n  lastCalculated: timestamp(\"last_calculated\").notNull().defaultNow(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  riskAssessmentUniqueEmployee: unique(\"risk_assessment_employee_unique\").on(table.employeeId, table.institutionId),\n}));\n\n// Email configuration settings\nexport const emailSettings = pgTable(\"email_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull().unique(),\n  smtpHost: varchar(\"smtp_host\"),\n  smtpPort: integer(\"smtp_port\"),\n  smtpUser: varchar(\"smtp_user\"),\n  smtpPassword: varchar(\"smtp_password\"),\n  senderEmail: varchar(\"sender_email\"),\n  senderName: varchar(\"sender_name\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Absence justifications\nexport const absenceJustifications = pgTable(\"absence_justifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull(),\n  date: date(\"date\").notNull(),\n  reason: text(\"reason\").notNull(),\n  adminResponse: text(\"admin_response\"),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, approved, rejected\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Alert notifications log\nexport const alertNotifications = pgTable(\"alert_notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  employeeId: varchar(\"employee_id\").notNull(),\n  type: varchar(\"type\").notNull(), // delay_alert, accumulated_delay, manual_notification\n  subject: varchar(\"subject\").notNull(),\n  content: text(\"content\").notNull(),\n  delayMinutes: integer(\"delay_minutes\").default(0),\n  accumulatedMinutes: integer(\"accumulated_minutes\").default(0),\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n  emailSent: boolean(\"email_sent\").default(false),\n});\n\n// Network settings for attendance control - only allow attendance from specific networks\nexport const attendanceNetworkSettings = pgTable(\"attendance_network_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  allowedNetworks: text(\"allowed_networks\").array().notNull().default(sql`'{}'`),\n  requireNetworkValidation: boolean(\"require_network_validation\").default(false),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  uniqueInstitution: unique().on(table.institutionId),\n}));\n\n// Communication message types\nexport const messageTypeEnum = pgEnum(\"message_type\", [\n  \"alert\",          // Alertas automáticas del sistema\n  \"notification\",   // Notificaciones oficiales\n  \"communication\",  // Comunicaciones entre usuarios\n  \"announcement\",   // Comunicados generales\n  \"privacy_policy\"  // Comunicaciones política de privacidad\n]);\n\n// Communication message status\nexport const messageStatusEnum = pgEnum(\"message_status\", [\n  \"draft\",          // Borrador\n  \"sent\",           // Enviado\n  \"delivered\",      // Entregado\n  \"read\",           // Leído\n  \"deleted_by_user\", // Eliminado por usuario (soft delete)\n  \"failed\"          // Falló el envío\n]);\n\n// Main communications table\nexport const communications = pgTable(\"communications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  senderId: varchar(\"sender_id\").notNull(), // Usuario que envía\n  recipientId: varchar(\"recipient_id\").notNull(), // Usuario que recibe\n  messageType: messageTypeEnum(\"message_type\").notNull().default(\"communication\"),\n  subject: varchar(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  status: messageStatusEnum(\"status\").notNull().default(\"sent\"),\n  priority: varchar(\"priority\").notNull().default(\"normal\"), // low, normal, high, urgent\n  \n  // Email integration\n  emailSent: boolean(\"email_sent\").default(false),\n  emailSentAt: timestamp(\"email_sent_at\"),\n  \n  // Tracking\n  readAt: timestamp(\"read_at\"),\n  deliveredAt: timestamp(\"delivered_at\"),\n  deletedByUserAt: timestamp(\"deleted_by_user_at\"),\n  \n  // Metadata for forensic tracking\n  senderIpAddress: varchar(\"sender_ip_address\"),\n  userAgent: text(\"user_agent\"),\n  \n  // Timestamps\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Communication attachments (PDFs, justificantes, etc.)\nexport const communicationAttachments = pgTable(\"communication_attachments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  communicationId: varchar(\"communication_id\").notNull(),\n  fileName: varchar(\"file_name\").notNull(),\n  originalFileName: varchar(\"original_file_name\").notNull(),\n  fileSize: integer(\"file_size\").notNull(), // en bytes\n  mimeType: varchar(\"mime_type\").notNull(),\n  objectPath: varchar(\"object_path\").notNull(), // Path en object storage\n  uploadedBy: varchar(\"uploaded_by\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Audit log for forensic tracking of all communication actions\nexport const communicationAuditLog = pgTable(\"communication_audit_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  communicationId: varchar(\"communication_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  action: varchar(\"action\").notNull(), // created, sent, read, deleted, attempted_modification\n  oldValues: jsonb(\"old_values\"), // Valores anteriores para cambios\n  newValues: jsonb(\"new_values\"), // Valores nuevos para cambios\n  ipAddress: varchar(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  metadata: jsonb(\"metadata\"), // Información adicional para auditoría\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Message templates for automated communications\nexport const messageTemplates = pgTable(\"message_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  name: varchar(\"name\").notNull(),\n  messageType: messageTypeEnum(\"message_type\").notNull(),\n  subject: varchar(\"subject\").notNull(),\n  content: text(\"content\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdBy: varchar(\"created_by\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Employee import templates and logs\nexport const employeeImportLogs = pgTable(\"employee_import_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  importedBy: varchar(\"imported_by\").notNull(), // Admin user ID\n  fileName: varchar(\"file_name\").notNull(),\n  totalRecords: integer(\"total_records\").notNull(),\n  successfulImports: integer(\"successful_imports\").default(0),\n  failedImports: integer(\"failed_imports\").default(0),\n  errors: jsonb(\"errors\"), // Array of error objects\n  status: varchar(\"status\").notNull().default(\"processing\"), // processing, completed, failed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Admin alert configurations\nexport const adminAlertConfigs = pgTable(\"admin_alert_configs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  alertType: varchar(\"alert_type\").notNull(), // manual, scheduled, threshold\n  recipients: text(\"recipients\").array().notNull(), // Array of user IDs or 'all'\n  subject: varchar(\"subject\").notNull(),\n  messageTemplate: text(\"message_template\").notNull(),\n  scheduleSettings: jsonb(\"schedule_settings\"), // For scheduled alerts\n  thresholdSettings: jsonb(\"threshold_settings\"), // For threshold-based alerts\n  isActive: boolean(\"is_active\").default(true),\n  createdBy: varchar(\"created_by\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Privacy policy requests tracking\nexport const privacyRequests = pgTable(\"privacy_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  institutionId: varchar(\"institution_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(), // Usuario que hace la solicitud\n  requestType: varchar(\"request_type\").notNull(), // access, rectification, deletion, portability\n  description: text(\"description\"),\n  status: varchar(\"status\").notNull().default(\"initiated\"), // initiated, in_progress, resolved, rejected\n  adminResponse: text(\"admin_response\"),\n  assignedTo: varchar(\"assigned_to\"), // Admin user ID\n  dueDate: timestamp(\"due_date\"), // GDPR compliance deadlines\n  resolvedAt: timestamp(\"resolved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Weekly schedule templates for users (for the popup view)\nexport const userScheduleTemplates = pgTable(\"user_schedule_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  institutionId: varchar(\"institution_id\").notNull(),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 1=Monday, 7=Sunday\n  startTime: varchar(\"start_time\").notNull(), // HH:MM format\n  endTime: varchar(\"end_time\").notNull(), // HH:MM format\n  breakStart: varchar(\"break_start\"), // Optional break time\n  breakEnd: varchar(\"break_end\"), // Optional break time\n  location: varchar(\"location\"),\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  uniqueUserDay: unique().on(table.userId, table.dayOfWeek),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  institution: one(institutions, {\n    fields: [users.institutionId],\n    references: [institutions.id],\n  }),\n  employee: one(employees, {\n    fields: [users.id],\n    references: [employees.userId],\n  }),\n}));\n\nexport const subjectsRelations = relations(subjects, ({ one, many }) => ({\n  institution: one(institutions, {\n    fields: [subjects.institutionId],\n    references: [institutions.id],\n  }),\n  academicYear: one(academicYears, {\n    fields: [subjects.academicYearId],\n    references: [academicYears.id],\n  }),\n  scheduleSessions: many(untisScheduleSessions),\n}));\n\nexport const classGroupsRelations = relations(classGroups, ({ one, many }) => ({\n  institution: one(institutions, {\n    fields: [classGroups.institutionId],\n    references: [institutions.id],\n  }),\n  academicYear: one(academicYears, {\n    fields: [classGroups.academicYearId],\n    references: [academicYears.id],\n  }),\n  scheduleSessions: many(untisScheduleSessions),\n}));\n\nexport const classroomsRelations = relations(classrooms, ({ one, many }) => ({\n  institution: one(institutions, {\n    fields: [classrooms.institutionId],\n    references: [institutions.id],\n  }),\n  scheduleSessions: many(untisScheduleSessions),\n}));\n\nexport const untisScheduleSessionsRelations = relations(untisScheduleSessions, ({ one }) => ({\n  institution: one(institutions, {\n    fields: [untisScheduleSessions.institutionId],\n    references: [institutions.id],\n  }),\n  academicYear: one(academicYears, {\n    fields: [untisScheduleSessions.academicYearId],\n    references: [academicYears.id],\n  }),\n  employee: one(employees, {\n    fields: [untisScheduleSessions.employeeId],\n    references: [employees.id],\n  }),\n  subject: one(subjects, {\n    fields: [untisScheduleSessions.subjectId],\n    references: [subjects.id],\n  }),\n  classGroup: one(classGroups, {\n    fields: [untisScheduleSessions.classGroupId],\n    references: [classGroups.id],\n  }),\n  classroom: one(classrooms, {\n    fields: [untisScheduleSessions.classroomId],\n    references: [classrooms.id],\n  }),\n}));\n\nexport const institutionsRelations = relations(institutions, ({ many }) => ({\n  users: many(users),\n  employees: many(employees),\n  departments: many(departments),\n  academicYears: many(academicYears),\n  settings: many(settings),\n}));\n\nexport const employeesRelations = relations(employees, ({ one, many }) => ({\n  user: one(users, {\n    fields: [employees.userId],\n    references: [users.id],\n  }),\n  institution: one(institutions, {\n    fields: [employees.institutionId],\n    references: [institutions.id],\n  }),\n  department: one(departments, {\n    fields: [employees.departmentId],\n    references: [departments.id],\n  }),\n  schedules: many(schedules),\n  attendanceRecords: many(attendanceRecords),\n  absences: many(absences),\n  alerts: many(alerts),\n  substituteAssignments: many(substituteAssignments, {\n    relationName: \"substitute\",\n  }),\n  absentAssignments: many(substituteAssignments, {\n    relationName: \"absent\",\n  }),\n}));\n\nexport const departmentsRelations = relations(departments, ({ one, many }) => ({\n  institution: one(institutions, {\n    fields: [departments.institutionId],\n    references: [institutions.id],\n  }),\n  employees: many(employees),\n}));\n\nexport const schedulesRelations = relations(schedules, ({ one }) => ({\n  employee: one(employees, {\n    fields: [schedules.employeeId],\n    references: [employees.id],\n  }),\n}));\n\nexport const attendanceRecordsRelations = relations(attendanceRecords, ({ one }) => ({\n  employee: one(employees, {\n    fields: [attendanceRecords.employeeId],\n    references: [employees.id],\n  }),\n}));\n\nexport const absencesRelations = relations(absences, ({ one }) => ({\n  employee: one(employees, {\n    fields: [absences.employeeId],\n    references: [employees.id],\n  }),\n  approver: one(users, {\n    fields: [absences.approvedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const alertsRelations = relations(alerts, ({ one }) => ({\n  employee: one(employees, {\n    fields: [alerts.employeeId],\n    references: [employees.id],\n  }),\n  resolver: one(users, {\n    fields: [alerts.resolvedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const substituteAssignmentsRelations = relations(substituteAssignments, ({ one }) => ({\n  absentEmployee: one(employees, {\n    fields: [substituteAssignments.absentEmployeeId],\n    references: [employees.id],\n    relationName: \"absent\",\n  }),\n  substituteEmployee: one(employees, {\n    fields: [substituteAssignments.substituteEmployeeId],\n    references: [employees.id],\n    relationName: \"substitute\",\n  }),\n}));\n\nexport const settingsRelations = relations(settings, ({ one }) => ({\n  institution: one(institutions, {\n    fields: [settings.institutionId],\n    references: [institutions.id],\n  }),\n}));\n\nexport const attendanceNetworkSettingsRelations = relations(attendanceNetworkSettings, ({ one }) => ({\n  institution: one(institutions, {\n    fields: [attendanceNetworkSettings.institutionId],\n    references: [institutions.id],\n  }),\n}));\n\n// Communications relations\nexport const communicationsRelations = relations(communications, ({ one, many }) => ({\n  institution: one(institutions, {\n    fields: [communications.institutionId],\n    references: [institutions.id],\n  }),\n  sender: one(users, {\n    fields: [communications.senderId],\n    references: [users.id],\n    relationName: \"sentMessages\",\n  }),\n  recipient: one(users, {\n    fields: [communications.recipientId],\n    references: [users.id],\n    relationName: \"receivedMessages\",\n  }),\n  attachments: many(communicationAttachments),\n  auditLogs: many(communicationAuditLog),\n}));\n\nexport const communicationAttachmentsRelations = relations(communicationAttachments, ({ one }) => ({\n  communication: one(communications, {\n    fields: [communicationAttachments.communicationId],\n    references: [communications.id],\n  }),\n  uploadedByUser: one(users, {\n    fields: [communicationAttachments.uploadedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const communicationAuditLogRelations = relations(communicationAuditLog, ({ one }) => ({\n  communication: one(communications, {\n    fields: [communicationAuditLog.communicationId],\n    references: [communications.id],\n  }),\n  user: one(users, {\n    fields: [communicationAuditLog.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const messageTemplatesRelations = relations(messageTemplates, ({ one }) => ({\n  institution: one(institutions, {\n    fields: [messageTemplates.institutionId],\n    references: [institutions.id],\n  }),\n  createdByUser: one(users, {\n    fields: [messageTemplates.createdBy],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertInstitutionSchema = createInsertSchema(institutions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertScheduleSchema = createInsertSchema(schedules).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAttendanceRecordSchema = createInsertSchema(attendanceRecords).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAbsenceSchema = createInsertSchema(absences).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAlertSchema = createInsertSchema(alerts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSubstituteAssignmentSchema = createInsertSchema(substituteAssignments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSettingSchema = createInsertSchema(settings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertAttendanceNetworkSettingSchema = createInsertSchema(attendanceNetworkSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmailSettingSchema = createInsertSchema(emailSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAbsenceJustificationSchema = createInsertSchema(absenceJustifications).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAlertNotificationSchema = createInsertSchema(alertNotifications).omit({\n  id: true,\n  sentAt: true,\n});\n\nexport const insertAcademicYearSchema = createInsertSchema(academicYears).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSubjectSchema = createInsertSchema(subjects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClassGroupSchema = createInsertSchema(classGroups).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClassroomSchema = createInsertSchema(classrooms).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUntisScheduleSessionSchema = createInsertSchema(untisScheduleSessions).omit({\n  id: true,\n  createdAt: true,\n  importedAt: true,\n});\n\nexport const insertCommunicationSchema = createInsertSchema(communications).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCommunicationAttachmentSchema = createInsertSchema(communicationAttachments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCommunicationAuditLogSchema = createInsertSchema(communicationAuditLog).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMessageTemplateSchema = createInsertSchema(messageTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWeeklyScheduleSchema = createInsertSchema(weeklySchedule).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type Subject = typeof subjects.$inferSelect;\nexport type InsertSubject = typeof subjects.$inferInsert;\nexport type ClassGroup = typeof classGroups.$inferSelect;\nexport type InsertClassGroup = typeof classGroups.$inferInsert;\nexport type Classroom = typeof classrooms.$inferSelect;\nexport type InsertClassroom = typeof classrooms.$inferInsert;\nexport type UntisScheduleSession = typeof untisScheduleSessions.$inferSelect;\nexport type InsertUntisScheduleSession = typeof untisScheduleSessions.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Institution = typeof institutions.$inferSelect;\nexport type InsertInstitution = z.infer<typeof insertInstitutionSchema>;\nexport type AcademicYear = typeof academicYears.$inferSelect;\nexport type InsertAcademicYear = z.infer<typeof insertAcademicYearSchema>;\nexport type Department = typeof departments.$inferSelect;\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type Schedule = typeof schedules.$inferSelect;\nexport type InsertSchedule = z.infer<typeof insertScheduleSchema>;\nexport type AttendanceRecord = typeof attendanceRecords.$inferSelect;\nexport type InsertAttendanceRecord = z.infer<typeof insertAttendanceRecordSchema>;\nexport type Absence = typeof absences.$inferSelect;\nexport type InsertAbsence = z.infer<typeof insertAbsenceSchema>;\nexport type Alert = typeof alerts.$inferSelect;\nexport type InsertAlert = z.infer<typeof insertAlertSchema>;\nexport type SubstituteAssignment = typeof substituteAssignments.$inferSelect;\nexport type InsertSubstituteAssignment = z.infer<typeof insertSubstituteAssignmentSchema>;\nexport type Setting = typeof settings.$inferSelect;\nexport type InsertSetting = z.infer<typeof insertSettingSchema>;\nexport type AttendanceNetworkSetting = typeof attendanceNetworkSettings.$inferSelect;\nexport type InsertAttendanceNetworkSetting = z.infer<typeof insertAttendanceNetworkSettingSchema>;\nexport type EmailSetting = typeof emailSettings.$inferSelect;\nexport type InsertEmailSetting = z.infer<typeof insertEmailSettingSchema>;\nexport type AbsenceJustification = typeof absenceJustifications.$inferSelect;\nexport type InsertAbsenceJustification = z.infer<typeof insertAbsenceJustificationSchema>;\nexport type AlertNotification = typeof alertNotifications.$inferSelect;\nexport type InsertAlertNotification = z.infer<typeof insertAlertNotificationSchema>;\n\nexport type Communication = typeof communications.$inferSelect;\nexport type InsertCommunication = z.infer<typeof insertCommunicationSchema>;\n\n// Extended communication type with user information\nexport type CommunicationWithUsers = Communication & {\n  senderFirstName?: string;\n  senderLastName?: string;\n  senderEmail?: string;\n  recipientFirstName?: string; \n  recipientLastName?: string;\n  recipientEmail?: string;\n};\nexport type CommunicationAttachment = typeof communicationAttachments.$inferSelect;\nexport type InsertCommunicationAttachment = z.infer<typeof insertCommunicationAttachmentSchema>;\nexport type CommunicationAuditLog = typeof communicationAuditLog.$inferSelect;\nexport type InsertCommunicationAuditLog = z.infer<typeof insertCommunicationAuditLogSchema>;\nexport type MessageTemplate = typeof messageTemplates.$inferSelect;\nexport type InsertMessageTemplate = z.infer<typeof insertMessageTemplateSchema>;\n\nexport type WeeklySchedule = typeof weeklySchedule.$inferSelect;\nexport type InsertWeeklySchedule = z.infer<typeof insertWeeklyScheduleSchema>;\n","size_bytes":38211},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nimport Sidebar from \"@/components/Sidebar\";\nimport Header from \"@/components/Header\";\nimport MobileHeader from \"@/components/MobileHeader\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport Login from \"@/pages/LoginFixed\";\nimport Register from \"@/pages/Register\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Employees from \"@/pages/Employees\";\nimport Attendance from \"@/pages/Attendance\";\nimport Alerts from \"@/pages/Alerts\";\nimport AlertsAdmin from \"@/pages/AlertsAdmin\";\nimport AlertConfig from \"@/pages/AlertConfig\";\nimport Reports from \"@/pages/Reports\";\nimport Settings from \"@/pages/Settings\";\nimport SettingsSimple from \"@/pages/SettingsSimple\";\nimport SettingsTest from \"@/pages/SettingsTest\";\nimport ScheduleImport from \"@/pages/ScheduleImport\";\nimport Privacy from \"@/pages/Privacy\";\nimport DataSubjectRights from \"@/pages/DataSubjectRights\";\nimport AdminManagement from \"@/pages/AdminManagement\";\nimport InstitutionManagement from \"@/pages/InstitutionManagement\";\nimport AcademicYearManagement from \"@/pages/AcademicYearManagement\";\nimport WeeklySchedule from \"@/pages/WeeklySchedule\";\nimport WeeklyScheduleAdmin from \"@/pages/WeeklyScheduleAdmin\";\nimport Communications from \"@/pages/Communications\";\nimport QRAttendancePage from \"@/pages/QRAttendance\";\nimport AcademicDataMigration from \"@/pages/AcademicDataMigration\";\n\nimport EmployeeQRGenerator from \"@/pages/EmployeeQRGenerator\";\nimport MyQRCode from \"@/pages/MyQRCode\";\nimport QRScanner from \"@/pages/QRScanner\";\nimport UnifiedQR from \"@/pages/UnifiedQR\";\nimport NotFound from \"@/pages/not-found\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { t } from \"@/lib/i18n\";\nimport { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport QuickAttendanceModal from \"@/components/modals/QuickAttendanceModal\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isQuickAttendanceOpen, setIsQuickAttendanceOpen] = useState(false);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  // Update time every second - TEMPORALMENTE DESACTIVADO PARA EVITAR RE-RENDERS\n  // useEffect(() => {\n  //   const timer = setInterval(() => {\n  //     setCurrentTime(new Date());\n  //   }, 1000);\n  //   return () => clearInterval(timer);\n  // }, []);\n\n  // Get last attendance record to determine button states (memoized to prevent re-renders)\n  const { data: attendanceRecords } = useQuery({\n    queryKey: [\"/api/attendance\", user?.id],\n    enabled: !!user?.id && isAuthenticated,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    staleTime: 10 * 60 * 1000, // 10 minutes - longer cache\n    gcTime: 15 * 60 * 1000, // 15 minutes garbage collection\n  });\n\n  const lastAttendanceRecord = Array.isArray(attendanceRecords) && attendanceRecords.length > 0 \n    ? attendanceRecords[attendanceRecords.length - 1] \n    : null;\n\n  // Quick attendance mutation\n  const quickAttendanceMutation = useMutation({\n    mutationFn: async (data: { type: \"check_in\" | \"check_out\"; timestamp: Date }) => {\n      return await apiRequest(\"POST\", \"/api/attendance\", {\n        ...data,\n        method: \"web\",\n        location: \"quick_attendance_modal\"\n      });\n    },\n    onSuccess: (data, variables) => {\n      // Force refetch of attendance data to update button states\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance\", user?.id] });\n      // Update all weekly calendar components with user ID for immediate updates\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance/weekly\", user?.id] });\n      // Also invalidate schedule queries for attendance validation\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule/weekly\", user?.id] });\n      toast({\n        title: \"Éxito\",\n        description: variables.type === \"check_in\" \n          ? (language === \"ca\" ? \"Entrada registrada correctament\" : \"Entrada registrada correctamente\")\n          : (language === \"ca\" ? \"Sortida registrada correctament\" : \"Salida registrada correctamente\"),\n      });\n      setIsQuickAttendanceOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || (language === \"ca\" ? \"Error registrant el fitxatge\" : \"Error registrando el fichaje\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Button state logic (memoized to prevent recalculations)\n  const shouldDisableCheckIn = useCallback(() => {\n    if (!lastAttendanceRecord) return false;\n    const today = new Date().toDateString();\n    const lastDate = new Date(lastAttendanceRecord.timestamp).toDateString();\n    if (today !== lastDate) return false;\n    return lastAttendanceRecord.type === 'check_in';\n  }, [lastAttendanceRecord]);\n  \n  const shouldDisableCheckOut = useCallback(() => {\n    if (!lastAttendanceRecord) return true;\n    const today = new Date().toDateString();\n    const lastDate = new Date(lastAttendanceRecord.timestamp).toDateString();\n    if (today !== lastDate) return true;\n    return lastAttendanceRecord.type === 'check_out';\n  }, [lastAttendanceRecord]);\n\n  // Memoize button states based on attendance records (force recalculation when records change)\n  const checkInDisabled = useMemo(() => {\n    if (!lastAttendanceRecord) return false;\n    const today = new Date().toDateString();\n    const lastDate = new Date(lastAttendanceRecord.timestamp).toDateString();\n    if (today !== lastDate) return false;\n    return lastAttendanceRecord.type === 'check_in';\n  }, [lastAttendanceRecord]);\n  \n  const checkOutDisabled = useMemo(() => {\n    if (!lastAttendanceRecord) return true;\n    const today = new Date().toDateString();\n    const lastDate = new Date(lastAttendanceRecord.timestamp).toDateString();\n    if (today !== lastDate) return true;\n    return lastAttendanceRecord.type === 'check_out';\n  }, [lastAttendanceRecord]);\n\n  const handleQuickCheckIn = useCallback(() => {\n    if (!checkInDisabled) {\n      quickAttendanceMutation.mutate({\n        type: \"check_in\",\n        timestamp: new Date()\n      });\n    }\n  }, [checkInDisabled, quickAttendanceMutation]);\n\n  const handleQuickCheckOut = useCallback(() => {\n    if (!checkOutDisabled) {\n      quickAttendanceMutation.mutate({\n        type: \"check_out\",\n        timestamp: new Date()\n      });\n    }\n  }, [checkOutDisabled, quickAttendanceMutation]);\n\n  const getPageTitle = (path: string) => {\n    const titles = {\n      \"/dashboard\": t(\"dashboard\", language),\n      \"/employees\": t(\"employee_management\", language),\n      \"/attendance\": t(\"attendance\", language),\n      \"/alerts\": t(\"alerts\", language),\n      \"/reports\": t(\"reports\", language),\n      \"/settings\": t(\"settings\", language),\n    };\n    return titles[path as keyof typeof titles] || t(\"dashboard\", language);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n          <p className=\"mt-4 text-gray-600\">{t(\"loading\", language)}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Switch>\n          <Route path=\"/register\" component={Register} />\n          <Route component={Login} />\n        </Switch>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gradient-to-br from-rose-50/40 via-pink-50/30 to-purple-50/40 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900\">\n      <Sidebar isMobileMenuOpen={isMobileMenuOpen} setIsMobileMenuOpen={setIsMobileMenuOpen} />\n      \n      {/* Mobile Header */}\n      <MobileHeader \n        isMobileMenuOpen={isMobileMenuOpen}\n        setIsMobileMenuOpen={setIsMobileMenuOpen}\n        onLogout={async () => {\n          try {\n            const response = await fetch('/api/logout', {\n              method: 'POST',\n              credentials: 'include',\n              headers: { 'Content-Type': 'application/json' }\n            });\n            if (response.ok) {\n              window.location.href = '/';\n            } else {\n              window.location.href = '/api/logout';\n            }\n          } catch (error) {\n            window.location.href = '/api/logout';\n          }\n        }}\n      />\n      \n      <div className=\"flex-1 flex flex-col ml-0 md:ml-16 lg:ml-60 transition-all duration-300 min-h-0 pt-14 md:pt-0\">\n        <Switch>\n          <Route path=\"/\" component={() => \n            <ProtectedRoute>\n              {/* Redirect employees directly to Unified QR */}\n              {user?.role === 'employee' ? (\n                <UnifiedQR />\n              ) : (\n                <>\n                  <Header \n                    title={t(\"dashboard\", language)}\n                    onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n                  />\n                  <Dashboard />\n                </>\n              )}\n            </ProtectedRoute>\n          } />\n          \n          <Route path=\"/dashboard\" component={() => \n            <ProtectedRoute>\n              <Header \n                title={t(\"dashboard\", language)}\n                onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n              />\n              <Dashboard />\n            </ProtectedRoute>\n          } />\n          \n          <Route path=\"/employees\" component={() => \n            <ProtectedRoute requiredRoles={['superadmin', 'admin']}>\n              <Header \n                title={t(\"employee_management\", language)}\n                onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n              />\n              <Employees />\n            </ProtectedRoute>\n          } />\n          \n          <Route path=\"/attendance\" component={() => \n            <ProtectedRoute>\n              <Header \n                title={t(\"attendance\", language)}\n                onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n              />\n              <Attendance />\n            </ProtectedRoute>\n          } />\n          \n          <Route path=\"/alerts\" component={() => \n            <ProtectedRoute requiredRoles={['superadmin', 'admin']}>\n              <Header \n                title={t(\"alerts\", language)}\n                onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n              />\n              <AlertsAdmin />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/alert-config\" component={() => \n            <ProtectedRoute requiredRoles={['superadmin', 'admin']}>\n              <Header \n                title={language === \"ca\" ? \"Configuració d'Alertes\" : \"Configuración de Alertas\"}\n                onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n              />\n              <AlertConfig />\n            </ProtectedRoute>\n          } />\n          \n          <Route path=\"/reports\" component={() => \n            <ProtectedRoute>\n              <Header \n                title={t(\"reports\", language)}\n                onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n              />\n              <Reports />\n            </ProtectedRoute>\n          } />\n          \n          <Route path=\"/schedule-import\" component={() => \n            <ProtectedRoute requiredRoles={['superadmin', 'admin']}>\n              <Header \n                title={language === \"ca\" ? \"Importació d'Horaris\" : \"Importación de Horarios\"}\n                onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n              />\n              <ScheduleImport />\n            </ProtectedRoute>\n          } />\n          \n          <Route path=\"/settings\" component={() => \n            <ProtectedRoute requiredRoles={['superadmin', 'admin']}>\n              <Header \n                title={t(\"settings\", language)}\n              />\n              <Settings />\n            </ProtectedRoute>\n          } />\n          \n          <Route path=\"/settings-test\" component={() => \n            <ProtectedRoute requiredRoles={['superadmin', 'admin']}>\n              <Header \n                title=\"Test de Configuración\"\n              />\n              <SettingsTest />\n            </ProtectedRoute>\n          } />\n\n          {/* Rutes en català per compatibilitat */}\n          <Route path=\"/configuracio\" component={() => \n            <ProtectedRoute requiredRoles={['superadmin', 'admin']}>\n              <Header \n                title={t(\"settings\", language)}\n              />\n              <Settings />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/configuracio-alertes\" component={() => \n            <ProtectedRoute requiredRoles={['superadmin', 'admin']}>\n              <Header \n                title={language === \"ca\" ? \"Configuració d'Alertes\" : \"Configuración de Alertas\"}\n                onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n              />\n              <AlertConfig />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/privacy\" component={() => \n            <ProtectedRoute>\n              <Header \n                title={language === \"ca\" ? \"Política de Privacitat\" : \"Política de Privacidad\"}\n              />\n              <Privacy />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/data-rights\" component={() => \n            <ProtectedRoute>\n              <Header \n                title={language === \"ca\" ? \"Exercici de Drets\" : \"Ejercicio de Derechos\"}\n              />\n              <DataSubjectRights />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/institutions\" component={() => \n            <ProtectedRoute requiredRoles={['superadmin']}>\n              <Header \n                title={language === \"ca\" ? \"Gestió d'Institucions\" : \"Gestión de Instituciones\"}\n              />\n              <InstitutionManagement />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/academic-years\" component={() => \n            <ProtectedRoute requiredRoles={['superadmin', 'admin']}>\n              <Header \n                title={language === \"ca\" ? \"Gestió de Cursos Acadèmics\" : \"Gestión de Cursos Académicos\"}\n              />\n              <AcademicYearManagement />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/academic-migration\" component={() => \n            <ProtectedRoute requiredRoles={['superadmin', 'admin']}>\n              <Header \n                title={language === \"ca\" ? \"Migració de Dades Acadèmiques\" : \"Migración de Datos Académicos\"}\n                onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n              />\n              <AcademicDataMigration />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/weekly-schedule\" component={() => \n            <ProtectedRoute>\n              <Header \n                title={language === \"ca\" ? \"Horari Personal\" : \"Horario Personal\"}\n              />\n              <WeeklySchedule />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/admin/weekly-schedule\" component={() => \n            <ProtectedRoute requiredRoles={['superadmin', 'admin']}>\n              <Header \n                title=\"Horaris Personal - Administració\"\n                onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n              />\n              <WeeklyScheduleAdmin />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/communications\" component={() => \n            <ProtectedRoute>\n              <Header \n                title={language === \"ca\" ? \"Comunicacions\" : \"Comunicaciones\"}\n              />\n              <Communications />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/qr-attendance\" component={() => \n            <ProtectedRoute>\n              <Header \n                title=\"Fitxatge QR Personal\"\n                onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n              />\n              <QRAttendancePage />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/my-qr\" component={() => \n            <ProtectedRoute>\n              <Header \n                title={language === \"ca\" ? \"El Meu Codi QR\" : \"Mi Código QR\"}\n                onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n              />\n              <MyQRCode />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/qr-scanner\" component={() => \n            <ProtectedRoute>\n              <QRScanner />\n            </ProtectedRoute>\n          } />\n          \n          <Route path=\"/unified-qr\" component={() => \n            <ProtectedRoute>\n              <UnifiedQR />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/qr-generator\" component={() => \n            <ProtectedRoute requiredRoles={['superadmin', 'admin']}>\n              <Header \n                title=\"Generador de Códigos QR\"\n                onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n              />\n              <EmployeeQRGenerator />\n            </ProtectedRoute>\n          } />\n\n          <Route path=\"/admin\" component={() => \n            <ProtectedRoute requiredRoles={['admin', 'superadmin']}>\n              <Header \n                title=\"Gestió Administrativa\"\n                onQuickAttendance={() => setIsQuickAttendanceOpen(true)}\n              />\n              <AdminManagement />\n            </ProtectedRoute>\n          } />\n          \n          <Route component={NotFound} />\n        </Switch>\n      </div>\n\n      <QuickAttendanceModal \n        isOpen={isQuickAttendanceOpen}\n        onClose={() => setIsQuickAttendanceOpen(false)}\n        onCheckIn={handleQuickCheckIn}\n        onCheckOut={handleQuickCheckOut}\n        currentTime={currentTime.toLocaleTimeString(\"ca-ES\", {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          second: \"2-digit\",\n          hour12: false,\n        })}\n        shouldDisableCheckIn={checkInDisabled}\n        shouldDisableCheckOut={checkOutDisabled}\n        isLoading={quickAttendanceMutation.isPending}\n      />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":18843},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 210 40% 98%;\n    --secondary-foreground: 222.2 84% 4.9%;\n    --muted: 210 40% 98%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 98%;\n    --accent-foreground: 222.2 84% 4.9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n    --radius: 0.75rem;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 84% 4.9%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n\n/* Modal NO TRANSPARENCY classes - Modern UX/UI without transparency */\n.modal-overlay-solid {\n  background: hsl(0 0% 0% / 0.95) !important;\n  backdrop-filter: none !important;\n}\n\n.modal-content-solid {\n  background: hsl(0 0% 100%) !important;\n  border: 2px solid hsl(214.3 31.8% 85%) !important;\n  box-shadow: 0 25px 50px -12px hsl(0 0% 0% / 0.4) !important;\n}\n\n.dark .modal-content-solid {\n  background: hsl(222.2 84% 4.9%) !important;\n  border: 2px solid hsl(217.2 32.6% 25%) !important;\n  box-shadow: 0 25px 50px -12px hsl(0 0% 100% / 0.2) !important;\n}\n\n/* Override all shadcn transparency styles */\n[data-radix-popper-content-wrapper] {\n  background: hsl(0 0% 0% / 0.9) !important;\n}\n\n/* Force solid backgrounds for all modal overlays - MAXIMUM OPACITY */\n[data-radix-dialog-overlay] {\n  background: hsl(0 0% 0% / 0.98) !important;\n  backdrop-filter: none !important;\n}\n\n/* Force solid content for dialog content */\n[data-radix-dialog-content] {\n  background: hsl(0 0% 100%) !important;\n  border: 2px solid hsl(214.3 31.8% 85%) !important;\n  box-shadow: 0 25px 50px -12px hsl(0 0% 0% / 0.5) !important;\n}\n\n.dark [data-radix-dialog-content] {\n  background: hsl(222.2 84% 4.9%) !important;\n  border: 2px solid hsl(217.2 32.6% 25%) !important;\n}\n\n/* Force solid backgrounds for all popover/dropdown content */\n[data-radix-popper-content] {\n  background: hsl(0 0% 100%) !important;\n  border: 1px solid hsl(214.3 31.8% 91.4%) !important;\n  box-shadow: 0 25px 50px -12px hsl(0 0% 0% / 0.25) !important;\n}\n\n.dark [data-radix-popper-content] {\n  background: hsl(222.2 84% 4.9%) !important;\n  border: 1px solid hsl(217.2 32.6% 17.5%) !important;\n}\n\n/* Force solid backgrounds for dropdown items */\n[data-radix-select-item] {\n  background: transparent !important;\n}\n\n[data-radix-select-item][data-highlighted] {\n  background: hsl(210 40% 96%) !important;\n}\n\n.dark [data-radix-select-item][data-highlighted] {\n  background: hsl(217.2 32.6% 17.5%) !important;\n}\n\n.select-content-solid {\n  background: hsl(0 0% 100%) !important;\n  border: 1px solid hsl(214.3 31.8% 91.4%) !important;\n}\n\n.dark .select-content-solid {\n  background: hsl(222.2 84% 4.9%) !important;\n  border: 1px solid hsl(217.2 32.6% 17.5%) !important;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground font-sans;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  }\n\n  /* Scrollbar styles */\n  .scrollbar-thin {\n    scrollbar-width: thin;\n    scrollbar-color: hsl(var(--border)) transparent;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar-track {\n    background: transparent;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar-thumb {\n    background-color: hsl(var(--border));\n    border-radius: 3px;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar-thumb:hover {\n    background-color: hsl(var(--muted-foreground));\n  }\n\n  /* Focus ring improvements */\n  .focus-ring {\n    outline: 2px solid transparent;\n    outline-offset: 2px;\n  }\n}\n\n@layer components {\n  /* Modern navigation styles */\n  .nav-link {\n    @apply relative flex items-center px-3 py-2.5 mx-1 text-sm font-medium rounded-xl border\n    transition-all duration-200 ease-in-out\n    text-slate-600 dark:text-slate-300 hover:text-rose-700 dark:hover:text-rose-300 hover:bg-rose-50 dark:hover:bg-slate-700 hover:border-rose-200 dark:hover:border-slate-600 hover:translate-x-1 hover:shadow-sm\n    border-transparent focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-rose-400;\n  }\n\n  .nav-link.active {\n    @apply bg-gradient-to-r from-rose-400 via-pink-400 to-purple-500 text-white shadow-lg\n    translate-x-2 border-rose-400 hover:opacity-95;\n  }\n\n  .nav-link.active::before {\n    content: '';\n    @apply absolute left-0 top-1/2 -translate-y-1/2 w-1 h-6 \n    bg-white rounded-r-full shadow-sm opacity-80;\n  }\n\n  /* Language switcher styles */\n  .language-btn {\n    @apply px-3 py-1.5 text-xs font-medium rounded-md border \n    transition-all duration-200 hover:bg-accent;\n  }\n\n  .language-btn.active {\n    @apply bg-primary text-primary-foreground border-primary \n    shadow-sm hover:opacity-90;\n  }\n\n  /* Smooth page transitions */\n  .page-transition {\n    animation: fadeInUp 0.3s ease-out forwards;\n  }\n\n  @keyframes fadeInUp {\n    from { \n      opacity: 0; \n      transform: translateY(20px); \n    }\n    to { \n      opacity: 1; \n      transform: translateY(0); \n    }\n  }\n\n  /* Loading animations */\n  .spinner {\n    animation: spin 1s linear infinite;\n  }\n\n  @keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n  }\n\n  /* Enhanced focus styles */\n  .focus-ring {\n    @apply focus-visible:outline-none focus-visible:ring-2 \n    focus-visible:ring-primary focus-visible:ring-offset-2 \n    focus-visible:ring-offset-background;\n  }\n\n  /* Sidebar hover effects */\n  .sidebar-item-hover {\n    @apply relative overflow-hidden group cursor-pointer;\n  }\n\n  .sidebar-item-hover::before {\n    content: '';\n    @apply absolute inset-0 bg-gradient-to-r from-primary/10 to-primary/5 \n    transform -translate-x-full transition-transform duration-300 \n    group-hover:translate-x-0;\n  }\n\n  /* Enhanced card styles */\n  .card-modern {\n    @apply bg-rose-50/50 dark:bg-slate-800/50 border border-rose-100 dark:border-slate-600 rounded-xl shadow-sm \n    hover:shadow-md hover:bg-rose-50/70 dark:hover:bg-slate-700/70 transition-all duration-200;\n  }\n\n  /* Modal and Dialog fixes - COMPLETE TRANSPARENCY ELIMINATION */\n  \n  /* FORCE SOLID BACKGROUNDS FOR ALL RADIX COMPONENTS */\n  [data-radix-dialog-content],\n  [data-radix-dropdown-menu-content],\n  [data-radix-context-menu-content],\n  [data-radix-popover-content],\n  [data-radix-hover-card-content],\n  [data-radix-select-content],\n  [data-radix-alert-dialog-content],\n  .vaul-drawer-wrapper {\n    background: rgb(248 250 252) !important;\n    border: 2px solid rgb(226 232 240) !important;\n    backdrop-filter: none !important;\n  }\n\n  .dark [data-radix-dialog-content],\n  .dark [data-radix-dropdown-menu-content], \n  .dark [data-radix-context-menu-content],\n  .dark [data-radix-popover-content],\n  .dark [data-radix-hover-card-content],\n  .dark [data-radix-select-content],\n  .dark [data-radix-alert-dialog-content],\n  .dark .vaul-drawer-wrapper {\n    background: rgb(15 23 42) !important;\n    border: 2px solid rgb(51 65 85) !important;\n  }\n  \n  /* FORCE SOLID OVERLAYS */\n  [data-radix-dialog-overlay],\n  [data-radix-alert-dialog-overlay] {\n    background: rgba(0, 0, 0, 0.90) !important;\n    backdrop-filter: none !important;\n  }\n  \n  /* SPECIFIC MODAL TRANSPARENCY FIXES */\n  .modal-content-solid {\n    background: rgb(248 250 252) !important;\n    border: 2px solid rgb(226 232 240) !important;\n    backdrop-filter: none !important;\n  }\n  \n  .dark .modal-content-solid {\n    background: rgb(15 23 42) !important;\n    border: 2px solid rgb(51 65 85) !important;\n  }\n  \n  .select-content-solid {\n    background: rgb(248 250 252) !important;\n    border: 2px solid rgb(226 232 240) !important;\n  }\n  \n  .dark .select-content-solid {\n    background: rgb(15 23 42) !important;\n    border: 2px solid rgb(51 65 85) !important;\n  }\n\n  [role=\"dialog\"] {\n    @apply bg-background border shadow-2xl !important;\n    z-index: 9999 !important;\n  }\n\n  [data-radix-popper-content-wrapper] {\n    z-index: 9999 !important;\n  }\n\n  .dialog-overlay {\n    @apply fixed inset-0 bg-black/60 backdrop-blur-sm z-50 !important;\n  }\n\n  .dialog-content {\n    @apply fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg -translate-x-1/2 -translate-y-1/2\n    gap-4 border bg-background p-6 shadow-2xl duration-200 rounded-xl !important;\n  }\n\n  /* Status indicators */\n  .status-online {\n    @apply w-3 h-3 bg-green-500 rounded-full animate-pulse;\n  }\n\n  .status-offline {\n    @apply w-3 h-3 bg-gray-400 rounded-full;\n  }\n\n  /* Status badges */\n  .status-active {\n    @apply bg-secondary/10 text-secondary;\n  }\n\n  .status-inactive {\n    @apply bg-gray-100 text-gray-600;\n  }\n\n  .status-warning {\n    @apply bg-accent/10 text-accent;\n  }\n\n  .status-error {\n    @apply bg-destructive/10 text-destructive;\n  }\n\n  /* Alert variations */\n  .alert-error {\n    @apply border-l-4 border-destructive bg-destructive/5;\n  }\n\n  .alert-warning {\n    @apply border-l-4 border-yellow-500 bg-yellow-50;\n  }\n\n  .alert-info {\n    @apply border-l-4 border-primary bg-primary/5;\n  }\n\n  .alert-success {\n    @apply border-l-4 border-green-500 bg-green-50;\n  }\n}\n\n@layer utilities {\n  /* Utility classes for modern layout */\n  .backdrop-blur-glass {\n    backdrop-filter: blur(20px) saturate(180%);\n  }\n  \n  .text-gradient-primary {\n    @apply text-primary font-semibold;\n  }\n\n  /* Animation utilities */\n  .animate-slide-in {\n    animation: slideIn 0.3s ease-out;\n  }\n\n  @keyframes slideIn {\n    from {\n      transform: translateX(-100%);\n    }\n    to {\n      transform: translateX(0);\n    }\n  }\n\n  /* Mobile responsive utilities */\n  .safe-top {\n    padding-top: env(safe-area-inset-top);\n  }\n\n  .safe-bottom {\n    padding-bottom: env(safe-area-inset-bottom);\n  }\n}","size_bytes":10871},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AbsenceJustificationReview.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle, \n  DialogDescription,\n  DialogFooter\n} from \"@/components/ui/dialog\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Calendar, \n  Check, \n  X, \n  MessageCircle, \n  Clock,\n  User,\n  FileText\n} from \"lucide-react\";\n\ninterface AbsenceJustificationReviewProps {\n  institutionId: string | null | undefined;\n  language: string;\n}\n\ninterface AbsenceJustification {\n  id: string;\n  employeeId: string;\n  employeeName: string;\n  date: string;\n  reason: string;\n  status: 'pending' | 'approved' | 'rejected';\n  adminResponse?: string;\n  createdAt: string;\n}\n\nexport default function AbsenceJustificationReview({ institutionId, language }: AbsenceJustificationReviewProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedJustification, setSelectedJustification] = useState<AbsenceJustification | null>(null);\n  const [showReviewModal, setShowReviewModal] = useState(false);\n  const [adminResponse, setAdminResponse] = useState(\"\");\n  const [reviewAction, setReviewAction] = useState<'approve' | 'reject' | null>(null);\n\n  // Fetch pending absence justifications\n  const { data: justifications = [], isLoading } = useQuery<AbsenceJustification[]>({\n    queryKey: [\"/api/absence-justifications/admin\", institutionId],\n    queryFn: async () => {\n      const response = await fetch(`/api/absence-justifications/admin/${institutionId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch absence justifications');\n      }\n      const data = await response.json();\n      // Transform the data to match expected interface\n      return data.map((absence: any) => ({\n        id: absence.id,\n        employeeId: absence.employeeId,\n        employeeName: absence.employeeName,\n        date: absence.startDate, // Map startDate to date\n        reason: absence.reason,\n        status: absence.justificationStatus === 'pending' ? 'pending' : \n                absence.justificationStatus === 'approved' ? 'approved' : \n                absence.justificationStatus === 'rejected' ? 'rejected' : 'pending',\n        adminResponse: absence.adminResponse,\n        createdAt: absence.createdAt,\n      }));\n    },\n    enabled: !!institutionId,\n  });\n\n  // Review justification mutation\n  const reviewMutation = useMutation({\n    mutationFn: async (data: { id: string; status: string; adminResponse: string }) => {\n      return await apiRequest(\"PUT\", `/api/absence-justifications/${data.id}/status`, {\n        status: data.status,\n        adminResponse: data.adminResponse\n      });\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: language === \"ca\" ? \"Revisió completada\" : \"Revisión completada\",\n        description: variables.status === 'approved'\n          ? (language === \"ca\" ? \"Justificació aprovada correctament\" : \"Justificación aprobada correctamente\")\n          : (language === \"ca\" ? \"Justificació rebutjada correctament\" : \"Justificación rechazada correctamente\"),\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/absence-justifications\"] });\n      handleCloseModal();\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: error.message || (language === \"ca\" \n          ? \"Error processant la revisió\" \n          : \"Error procesando la revisión\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleOpenReviewModal = (justification: AbsenceJustification, action: 'approve' | 'reject') => {\n    setSelectedJustification(justification);\n    setReviewAction(action);\n    setAdminResponse(\"\");\n    setShowReviewModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setSelectedJustification(null);\n    setReviewAction(null);\n    setAdminResponse(\"\");\n    setShowReviewModal(false);\n  };\n\n  const handleSubmitReview = () => {\n    if (selectedJustification && reviewAction) {\n      reviewMutation.mutate({\n        id: selectedJustification.id,\n        status: reviewAction === 'approve' ? 'approved' : 'rejected',\n        adminResponse: adminResponse.trim()\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <Badge className=\"bg-green-100 text-green-800\">{language === \"ca\" ? \"Aprovat\" : \"Aprobado\"}</Badge>;\n      case 'rejected':\n        return <Badge className=\"bg-red-100 text-red-800\">{language === \"ca\" ? \"Rebutjat\" : \"Rechazado\"}</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">{language === \"ca\" ? \"Pendent\" : \"Pendiente\"}</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const pendingJustifications = justifications.filter(j => j.status === 'pending');\n  const reviewedJustifications = justifications.filter(j => j.status !== 'pending');\n\n  if (isLoading) {\n    return (\n      <Card data-testid=\"justification-review-loading\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <FileText className=\"mr-2 h-5 w-5\" />\n            {language === \"ca\" ? \"Revisió de Justificacions\" : \"Revisión de Justificaciones\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"h-16 bg-gray-200 rounded-lg\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Pending Justifications */}\n      <Card data-testid=\"pending-justifications\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Clock className=\"mr-2 h-5 w-5 text-yellow-600\" />\n              {language === \"ca\" ? \"Justificacions Pendents\" : \"Justificaciones Pendientes\"}\n            </div>\n            <Badge variant=\"secondary\">\n              {pendingJustifications.length}\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {pendingJustifications.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Clock className=\"mx-auto h-12 w-12 text-gray-300 mb-4\" />\n              <p>{language === \"ca\" ? \"No hi ha justificacions pendents\" : \"No hay justificaciones pendientes\"}</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>{language === \"ca\" ? \"Empleat\" : \"Empleado\"}</TableHead>\n                    <TableHead>{language === \"ca\" ? \"Data\" : \"Fecha\"}</TableHead>\n                    <TableHead>{language === \"ca\" ? \"Motiu\" : \"Motivo\"}</TableHead>\n                    <TableHead>{language === \"ca\" ? \"Sol·licitat\" : \"Solicitado\"}</TableHead>\n                    <TableHead>{language === \"ca\" ? \"Accions\" : \"Acciones\"}</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {pendingJustifications.map((justification) => (\n                    <TableRow key={justification.id} data-testid={`pending-justification-${justification.id}`}>\n                      <TableCell>\n                        <div className=\"flex items-center\">\n                          <User className=\"mr-2 h-4 w-4 text-gray-500\" />\n                          <span className=\"font-medium\">{justification.employeeName}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {new Date(justification.date).toLocaleDateString(language === \"ca\" ? \"ca-ES\" : \"es-ES\")}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"max-w-xs truncate\" title={justification.reason}>\n                          {justification.reason}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {new Date(justification.createdAt).toLocaleDateString(language === \"ca\" ? \"ca-ES\" : \"es-ES\")}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            size=\"sm\"\n                            className=\"bg-green-600 hover:bg-green-700\"\n                            onClick={() => handleOpenReviewModal(justification, 'approve')}\n                            data-testid={`approve-${justification.id}`}\n                          >\n                            <Check className=\"h-4 w-4 mr-1\" />\n                            {language === \"ca\" ? \"Aprovar\" : \"Aprobar\"}\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            onClick={() => handleOpenReviewModal(justification, 'reject')}\n                            data-testid={`reject-${justification.id}`}\n                          >\n                            <X className=\"h-4 w-4 mr-1\" />\n                            {language === \"ca\" ? \"Rebutjar\" : \"Rechazar\"}\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Reviewed Justifications */}\n      {reviewedJustifications.length > 0 && (\n        <Card data-testid=\"reviewed-justifications\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <MessageCircle className=\"mr-2 h-5 w-5 text-blue-600\" />\n              {language === \"ca\" ? \"Justificacions Revisades\" : \"Justificaciones Revisadas\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>{language === \"ca\" ? \"Empleat\" : \"Empleado\"}</TableHead>\n                    <TableHead>{language === \"ca\" ? \"Data\" : \"Fecha\"}</TableHead>\n                    <TableHead>{language === \"ca\" ? \"Estat\" : \"Estado\"}</TableHead>\n                    <TableHead>{language === \"ca\" ? \"Resposta Admin\" : \"Respuesta Admin\"}</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {reviewedJustifications.slice(0, 10).map((justification) => (\n                    <TableRow key={justification.id} data-testid={`reviewed-justification-${justification.id}`}>\n                      <TableCell>\n                        <div className=\"flex items-center\">\n                          <User className=\"mr-2 h-4 w-4 text-gray-500\" />\n                          <span className=\"font-medium\">{justification.employeeName}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {new Date(justification.date).toLocaleDateString(language === \"ca\" ? \"ca-ES\" : \"es-ES\")}\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(justification.status)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"max-w-xs truncate\" title={justification.adminResponse}>\n                          {justification.adminResponse || (language === \"ca\" ? \"Sense comentaris\" : \"Sin comentarios\")}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Review Modal */}\n      <Dialog open={showReviewModal} onOpenChange={setShowReviewModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              {reviewAction === 'approve' ? (\n                <Check className=\"mr-2 h-5 w-5 text-green-600\" />\n              ) : (\n                <X className=\"mr-2 h-5 w-5 text-red-600\" />\n              )}\n              {reviewAction === 'approve'\n                ? (language === \"ca\" ? \"Aprovar Justificació\" : \"Aprobar Justificación\")\n                : (language === \"ca\" ? \"Rebutjar Justificació\" : \"Rechazar Justificación\")}\n            </DialogTitle>\n            <DialogDescription>\n              {selectedJustification && (\n                <div className=\"space-y-2 mt-4\">\n                  <p><strong>{language === \"ca\" ? \"Empleat:\" : \"Empleado:\"}</strong> {selectedJustification.employeeName}</p>\n                  <p><strong>{language === \"ca\" ? \"Data:\" : \"Fecha:\"}</strong> {new Date(selectedJustification.date).toLocaleDateString(language === \"ca\" ? \"ca-ES\" : \"es-ES\")}</p>\n                  <p><strong>{language === \"ca\" ? \"Motiu:\" : \"Motivo:\"}</strong> {selectedJustification.reason}</p>\n                </div>\n              )}\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"admin-response\">\n                {reviewAction === 'approve'\n                  ? (language === \"ca\" ? \"Comentaris d'aprovació (opcional)\" : \"Comentarios de aprobación (opcional)\")\n                  : (language === \"ca\" ? \"Motiu del rebuig\" : \"Motivo del rechazo\")}\n              </Label>\n              <Textarea\n                id=\"admin-response\"\n                value={adminResponse}\n                onChange={(e) => setAdminResponse(e.target.value)}\n                placeholder={reviewAction === 'approve'\n                  ? (language === \"ca\" ? \"Afegeix comentaris sobre l'aprovació...\" : \"Añade comentarios sobre la aprobación...\")\n                  : (language === \"ca\" ? \"Explica el motiu del rebuig...\" : \"Explica el motivo del rechazo...\")}\n                rows={3}\n                data-testid=\"admin-response-input\"\n              />\n            </div>\n          </div>\n\n          <DialogFooter className=\"flex space-x-2\">\n            <Button\n              variant=\"outline\"\n              onClick={handleCloseModal}\n              data-testid=\"cancel-review\"\n            >\n              {language === \"ca\" ? \"Cancel·lar\" : \"Cancelar\"}\n            </Button>\n            <Button\n              onClick={handleSubmitReview}\n              disabled={reviewMutation.isPending || (reviewAction === 'reject' && !adminResponse.trim())}\n              className={reviewAction === 'approve' ? \"bg-green-600 hover:bg-green-700\" : \"bg-red-600 hover:bg-red-700\"}\n              data-testid=\"submit-review\"\n            >\n              {reviewMutation.isPending\n                ? (language === \"ca\" ? \"Processant...\" : \"Procesando...\")\n                : reviewAction === 'approve'\n                ? (language === \"ca\" ? \"Aprovar\" : \"Aprobar\")\n                : (language === \"ca\" ? \"Rebutjar\" : \"Rechazar\")}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":15778},"client/src/components/AutomatedAlertsConfig.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue \n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  AlertTriangle, \n  Clock, \n  Mail, \n  Calendar,\n  Settings,\n  Info,\n  CheckCircle\n} from \"lucide-react\";\n\ninterface AutomatedAlertsConfigProps {\n  institutionId: string | null | undefined;\n  language: string;\n}\n\ninterface AlertSettings {\n  enabled: boolean;\n  delayThresholdMinutes: number;\n  absenceThresholdDays: number;\n  reportFrequency: 'daily' | 'weekly' | 'monthly';\n  reportTime: string;\n  recipientEmails: string[];\n  emailSubjectTemplate: string;\n  emailBodyTemplate: string;\n  legalComplianceMode: boolean;\n}\n\nexport default function AutomatedAlertsConfig({ institutionId, language }: AutomatedAlertsConfigProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [alertSettings, setAlertSettings] = useState<AlertSettings>({\n    enabled: false,\n    delayThresholdMinutes: 15,\n    absenceThresholdDays: 3,\n    reportFrequency: 'weekly',\n    reportTime: '09:00',\n    recipientEmails: [],\n    emailSubjectTemplate: '',\n    emailBodyTemplate: '',\n    legalComplianceMode: true,\n  });\n\n  const [newRecipientEmail, setNewRecipientEmail] = useState('');\n\n  // Fetch current alert settings\n  const { data: settings, isLoading } = useQuery<any>({\n    queryKey: [\"/api/automated-alerts-settings\", institutionId || \"null\"],\n    enabled: institutionId !== undefined,\n  });\n\n  // Update settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (settings: AlertSettings) => {\n      const finalInstitutionId = institutionId || \"null\";\n      return await apiRequest(\"PUT\", `/api/automated-alerts-settings/${finalInstitutionId}`, settings);\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Configuració guardada\" : \"Configuración guardada\",\n        description: language === \"ca\" \n          ? \"Les alertes automàtiques s'han configurat correctament\" \n          : \"Las alertas automáticas se han configurado correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/automated-alerts-settings\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: error.message || (language === \"ca\" \n          ? \"Error guardant la configuració\" \n          : \"Error guardando la configuración\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Test alert mutation\n  const testAlertMutation = useMutation({\n    mutationFn: async () => {\n      const finalInstitutionId = institutionId || \"null\";\n      return await apiRequest(\"POST\", `/api/automated-alerts-settings/${finalInstitutionId}/test`);\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Alerta de prova enviada\" : \"Alerta de prueba enviada\",\n        description: language === \"ca\" \n          ? \"Revisa la teva bústia per confirmar la configuració\" \n          : \"Revisa tu bandeja para confirmar la configuración\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: error.message || (language === \"ca\" \n          ? \"Error enviant l'alerta de prova\" \n          : \"Error enviando la alerta de prueba\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (settings && typeof settings === 'object') {\n      console.log('Loading alert settings:', settings);\n      setAlertSettings({\n        enabled: (settings as any).enabled || false,\n        delayThresholdMinutes: (settings as any).delayThresholdMinutes || 15,\n        absenceThresholdDays: (settings as any).absenceThresholdDays || 3,\n        reportFrequency: (settings as any).reportFrequency || 'weekly',\n        reportTime: (settings as any).reportTime || '09:00',\n        recipientEmails: (settings as any).recipientEmails || [],\n        emailSubjectTemplate: (settings as any).emailSubjectTemplate || getDefaultSubjectTemplate(),\n        emailBodyTemplate: (settings as any).emailBodyTemplate || getDefaultBodyTemplate(),\n        legalComplianceMode: (settings as any).legalComplianceMode !== false,\n      });\n    } else {\n      // Set default templates\n      setAlertSettings(prev => ({\n        ...prev,\n        emailSubjectTemplate: getDefaultSubjectTemplate(),\n        emailBodyTemplate: getDefaultBodyTemplate(),\n      }));\n    }\n  }, [settings, language]);\n\n  const getDefaultSubjectTemplate = () => {\n    return language === \"ca\" \n      ? \"Informe d'Assistència - {centerName} - {date}\"\n      : \"Informe de Asistencia - {centerName} - {date}\";\n  };\n\n  const getDefaultBodyTemplate = () => {\n    return language === \"ca\" \n      ? `Estimat/da administrador/a,\n\nAdjuntem l'informe d'assistència corresponent al període {period}.\n\nRESUM:\n- Total empleats: {totalEmployees}\n- Empleats amb retards: {delayedEmployees}\n- Empleats amb absències: {absentEmployees}\n- Minuts acumulats de retard: {totalDelayMinutes}\n\nCOMPLIMENT LEGAL:\nAquest informe es genera automàticament per garantir el compliment de la normativa laboral vigent sobre control horari (Article 34.9 de l'Estatut dels Treballadors).\n\nSalutacions cordials,\nSistema de Control d'Assistència`\n      : `Estimado/a administrador/a,\n\nAdjuntamos el informe de asistencia correspondiente al período {period}.\n\nRESUMEN:\n- Total empleados: {totalEmployees}\n- Empleados con retrasos: {delayedEmployees}\n- Empleados con ausencias: {absentEmployees}\n- Minutos acumulados de retraso: {totalDelayMinutes}\n\nCUMPLIMIENTO LEGAL:\nEste informe se genera automáticamente para garantizar el cumplimiento de la normativa laboral vigente sobre control horario (Artículo 34.9 del Estatuto de los Trabajadores).\n\nSaludos cordiales,\nSistema de Control de Asistencia`;\n  };\n\n  const handleInputChange = (field: keyof AlertSettings, value: any) => {\n    setAlertSettings(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleAddRecipient = () => {\n    if (newRecipientEmail && newRecipientEmail.includes('@')) {\n      setAlertSettings(prev => ({\n        ...prev,\n        recipientEmails: [...prev.recipientEmails, newRecipientEmail]\n      }));\n      setNewRecipientEmail('');\n    }\n  };\n\n  const handleRemoveRecipient = (email: string) => {\n    setAlertSettings(prev => ({\n      ...prev,\n      recipientEmails: prev.recipientEmails.filter(e => e !== email)\n    }));\n  };\n\n  const handleSave = () => {\n    updateSettingsMutation.mutate(alertSettings);\n  };\n\n  const handleTestAlert = () => {\n    testAlertMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <Card data-testid=\"automated-alerts-loading\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <AlertTriangle className=\"mr-2 h-5 w-5\" />\n            {language === \"ca\" ? \"Alertes Automàtiques\" : \"Alertas Automáticas\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded\"></div>\n            <div className=\"h-20 bg-gray-200 rounded\"></div>\n            <div className=\"h-8 bg-gray-200 rounded\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card data-testid=\"automated-alerts-config\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <AlertTriangle className=\"mr-2 h-5 w-5\" />\n            {language === \"ca\" ? \"Alertes Automàtiques\" : \"Alertas Automáticas\"}\n          </div>\n          <Switch\n            checked={alertSettings.enabled}\n            onCheckedChange={(enabled) => handleInputChange('enabled', enabled)}\n            data-testid=\"alerts-enabled-switch\"\n          />\n        </CardTitle>\n        <p className=\"text-sm text-gray-600\">\n          {language === \"ca\" \n            ? \"Configura les notificacions automàtiques per garantir el compliment legal del control horari\"\n            : \"Configura las notificaciones automáticas para garantizar el cumplimiento legal del control horario\"}\n        </p>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Legal Compliance Notice */}\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <div className=\"flex items-start\">\n            <Info className=\"text-blue-600 mr-3 h-5 w-5 mt-0.5\" />\n            <div>\n              <p className=\"text-sm font-medium text-blue-800 mb-1\">\n                {language === \"ca\" ? \"Compliment Legal Obligatori\" : \"Cumplimiento Legal Obligatorio\"}\n              </p>\n              <p className=\"text-sm text-blue-700\">\n                {language === \"ca\" \n                  ? \"L'Article 34.9 de l'Estatut dels Treballadors obliga a les empreses a portar un registre diari de jornada. Aquestes alertes garanteixen el seguiment adequat.\"\n                  : \"El Artículo 34.9 del Estatuto de los Trabajadores obliga a las empresas a llevar un registro diario de jornada. Estas alertas garantizan el seguimiento adecuado.\"}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {alertSettings.enabled && (\n          <>\n            {/* Threshold Configuration */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label htmlFor=\"delay-threshold\">\n                  {language === \"ca\" ? \"Llindar de retard (minuts)\" : \"Umbral de retraso (minutos)\"}\n                </Label>\n                <Input\n                  id=\"delay-threshold\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"120\"\n                  value={alertSettings.delayThresholdMinutes}\n                  onChange={(e) => handleInputChange('delayThresholdMinutes', parseInt(e.target.value) || 15)}\n                  data-testid=\"delay-threshold-input\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  {language === \"ca\" \n                    ? \"Retards superiors a aquests minuts es consideraran significatius\"\n                    : \"Retrasos superiores a estos minutos se considerarán significativos\"}\n                </p>\n              </div>\n\n              <div>\n                <Label htmlFor=\"absence-threshold\">\n                  {language === \"ca\" ? \"Llindar d'absència (dies)\" : \"Umbral de ausencia (días)\"}\n                </Label>\n                <Input\n                  id=\"absence-threshold\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"30\"\n                  value={alertSettings.absenceThresholdDays}\n                  onChange={(e) => handleInputChange('absenceThresholdDays', parseInt(e.target.value) || 3)}\n                  data-testid=\"absence-threshold-input\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  {language === \"ca\" \n                    ? \"Absències consecutives que triggeraran alertes\"\n                    : \"Ausencias consecutivas que activarán alertas\"}\n                </p>\n              </div>\n            </div>\n\n            {/* Report Frequency */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label htmlFor=\"report-frequency\">\n                  {language === \"ca\" ? \"Freqüència d'informes\" : \"Frecuencia de informes\"}\n                </Label>\n                <Select\n                  value={alertSettings.reportFrequency}\n                  onValueChange={(value: 'daily' | 'weekly' | 'monthly') => \n                    handleInputChange('reportFrequency', value)}\n                >\n                  <SelectTrigger id=\"report-frequency\" data-testid=\"report-frequency-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"daily\">\n                      {language === \"ca\" ? \"Diari\" : \"Diario\"}\n                    </SelectItem>\n                    <SelectItem value=\"weekly\">\n                      {language === \"ca\" ? \"Setmanal\" : \"Semanal\"}\n                    </SelectItem>\n                    <SelectItem value=\"monthly\">\n                      {language === \"ca\" ? \"Mensual\" : \"Mensual\"}\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"report-time\">\n                  {language === \"ca\" ? \"Hora d'enviament\" : \"Hora de envío\"}\n                </Label>\n                <Input\n                  id=\"report-time\"\n                  type=\"time\"\n                  value={alertSettings.reportTime}\n                  onChange={(e) => handleInputChange('reportTime', e.target.value)}\n                  data-testid=\"report-time-input\"\n                />\n              </div>\n            </div>\n\n            {/* Recipients */}\n            <div>\n              <Label>\n                {language === \"ca\" ? \"Destinataris\" : \"Destinatarios\"}\n              </Label>\n              <div className=\"flex space-x-2 mt-2 mb-3\">\n                <Input\n                  type=\"email\"\n                  placeholder={language === \"ca\" ? \"afegir@email.com\" : \"agregar@email.com\"}\n                  value={newRecipientEmail}\n                  onChange={(e) => setNewRecipientEmail(e.target.value)}\n                  data-testid=\"new-recipient-input\"\n                />\n                <Button\n                  onClick={handleAddRecipient}\n                  disabled={!newRecipientEmail || !newRecipientEmail.includes('@')}\n                  data-testid=\"add-recipient-button\"\n                >\n                  {language === \"ca\" ? \"Afegir\" : \"Agregar\"}\n                </Button>\n              </div>\n              <div className=\"flex flex-wrap gap-2\">\n                {alertSettings.recipientEmails.map((email, index) => (\n                  <Badge\n                    key={index}\n                    variant=\"secondary\"\n                    className=\"cursor-pointer\"\n                    onClick={() => handleRemoveRecipient(email)}\n                    data-testid={`recipient-${index}`}\n                  >\n                    {email} ✕\n                  </Badge>\n                ))}\n              </div>\n            </div>\n\n            {/* Email Templates */}\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email-subject\">\n                  {language === \"ca\" ? \"Plantilla d'assumpte\" : \"Plantilla de asunto\"}\n                </Label>\n                <Input\n                  id=\"email-subject\"\n                  value={alertSettings.emailSubjectTemplate}\n                  onChange={(e) => handleInputChange('emailSubjectTemplate', e.target.value)}\n                  placeholder={getDefaultSubjectTemplate()}\n                  data-testid=\"email-subject-input\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  {language === \"ca\" \n                    ? \"Variables disponibles: {centerName}, {date}, {period}\"\n                    : \"Variables disponibles: {centerName}, {date}, {period}\"}\n                </p>\n              </div>\n\n              <div>\n                <Label htmlFor=\"email-body\">\n                  {language === \"ca\" ? \"Plantilla del cos\" : \"Plantilla del cuerpo\"}\n                </Label>\n                <Textarea\n                  id=\"email-body\"\n                  rows={8}\n                  value={alertSettings.emailBodyTemplate}\n                  onChange={(e) => handleInputChange('emailBodyTemplate', e.target.value)}\n                  placeholder={getDefaultBodyTemplate()}\n                  data-testid=\"email-body-input\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  {language === \"ca\" \n                    ? \"Variables: {centerName}, {period}, {totalEmployees}, {delayedEmployees}, {absentEmployees}, {totalDelayMinutes}\"\n                    : \"Variables: {centerName}, {period}, {totalEmployees}, {delayedEmployees}, {absentEmployees}, {totalDelayMinutes}\"}\n                </p>\n              </div>\n            </div>\n\n            {/* Legal Compliance Mode */}\n            <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n              <div>\n                <p className=\"font-medium\">\n                  {language === \"ca\" ? \"Mode de compliment legal\" : \"Modo de cumplimiento legal\"}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  {language === \"ca\" \n                    ? \"Inclou referències legals obligatòries als informes\"\n                    : \"Incluye referencias legales obligatorias en los informes\"}\n                </p>\n              </div>\n              <Switch\n                checked={alertSettings.legalComplianceMode}\n                onCheckedChange={(enabled) => handleInputChange('legalComplianceMode', enabled)}\n                data-testid=\"legal-compliance-switch\"\n              />\n            </div>\n          </>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex space-x-4 pt-4\">\n          <Button\n            onClick={handleSave}\n            disabled={updateSettingsMutation.isPending}\n            className=\"flex-1\"\n            data-testid=\"save-alerts-button\"\n          >\n            {updateSettingsMutation.isPending\n              ? (language === \"ca\" ? \"Guardant...\" : \"Guardando...\")\n              : (language === \"ca\" ? \"Guardar Configuració\" : \"Guardar Configuración\")}\n          </Button>\n          \n          {alertSettings.enabled && alertSettings.recipientEmails.length > 0 && (\n            <Button\n              onClick={handleTestAlert}\n              disabled={testAlertMutation.isPending}\n              variant=\"outline\"\n              data-testid=\"test-alert-button\"\n            >\n              {testAlertMutation.isPending\n                ? (language === \"ca\" ? \"Enviant...\" : \"Enviando...\")\n                : (language === \"ca\" ? \"Prova d'Alerta\" : \"Prueba de Alerta\")}\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":18719},"client/src/components/EmailSettingsForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Mail, Server, User, Lock, Eye, EyeOff } from \"lucide-react\";\n\ninterface EmailSettingsFormProps {\n  institutionId: string | null | undefined;\n  language: string;\n}\n\ninterface EmailSettings {\n  smtpHost: string;\n  smtpPort: number;\n  smtpUser: string;\n  smtpPassword: string;\n  senderEmail: string;\n  senderName: string;\n}\n\ninterface SmtpConfig {\n  id?: string;\n  host: string;\n  port: number;\n  username: string;\n  isSecure: boolean;\n  fromEmail: string;\n  fromName: string;\n  isActive: boolean;\n}\n\nexport default function EmailSettingsForm({ institutionId, language }: EmailSettingsFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [emailSettings, setEmailSettings] = useState<EmailSettings>({\n    smtpHost: \"\",\n    smtpPort: 587,\n    smtpUser: \"\",\n    smtpPassword: \"\",\n    senderEmail: \"\",\n    senderName: \"\",\n  });\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  const { data: settings, isLoading } = useQuery<EmailSettings | null>({\n    queryKey: [\"/api/admin/smtp-config\", institutionId || \"null\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/admin/smtp-config/${institutionId || \"null\"}`);\n      if (!response.ok) {\n        return null;\n      }\n      const data: SmtpConfig | null = await response.json();\n      if (!data) return null;\n      \n      // Transform the SMTP response to EmailSettings format\n      return {\n        smtpHost: data.host || \"\",\n        smtpPort: data.port || 587,\n        smtpUser: data.username || \"\",\n        smtpPassword: \"\", // Don't return password for security\n        senderEmail: data.fromEmail || \"\",\n        senderName: data.fromName || \"\",\n      };\n    },\n  });\n\n  useEffect(() => {\n    if (settings) {\n      setEmailSettings({\n        smtpHost: settings.smtpHost || \"\",\n        smtpPort: settings.smtpPort || 587,\n        smtpUser: settings.smtpUser || \"\",\n        smtpPassword: settings.smtpPassword || \"\",\n        senderEmail: settings.senderEmail || \"\",\n        senderName: settings.senderName || \"\",\n      });\n    }\n  }, [settings]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: EmailSettings) => {\n      // Transform EmailSettings to SMTP format\n      const smtpData = {\n        host: data.smtpHost,\n        port: data.smtpPort,\n        username: data.smtpUser,\n        password: data.smtpPassword,\n        isSecure: true, // Default to secure connection\n        fromEmail: data.senderEmail,\n        fromName: data.senderName,\n        isActive: true\n      };\n      return await apiRequest(\"POST\", \"/api/admin/smtp-config\", smtpData);\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Èxit\" : \"Éxito\",\n        description: language === \"ca\" ? \"Configuració SMTP guardada\" : \"Configuración SMTP guardada\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/smtp-config\", institutionId || \"null\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: error.message || (language === \"ca\" ? \"Error guardant la configuració\" : \"Error guardando la configuración\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const testEmailMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", `/api/email-settings/${institutionId || \"null\"}/test`, emailSettings);\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Email de prova enviat\" : \"Email de prueba enviado\",\n        description: language === \"ca\" ? \"Comprova la safata d'entrada\" : \"Comprueba la bandeja de entrada\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: error.message || (language === \"ca\" ? \"Error enviant email de prova\" : \"Error enviando email de prueba\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (field: keyof EmailSettings, value: string | number) => {\n    setEmailSettings(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSave = () => {\n    updateMutation.mutate(emailSettings);\n  };\n\n  const handleTestEmail = () => {\n    testEmailMutation.mutate();\n  };\n\n  if (isLoading) {\n    return <div className=\"animate-pulse h-32 bg-gray-100 rounded\"></div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* SMTP Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Server className=\"h-5 w-5\" />\n            <span>\n              {language === \"ca\" ? \"Configuració del Servidor SMTP\" : \"Configuración del Servidor SMTP\"}\n            </span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"smtp-host\">\n                {language === \"ca\" ? \"Servidor SMTP\" : \"Servidor SMTP\"}\n              </Label>\n              <Input\n                id=\"smtp-host\"\n                placeholder=\"smtp.gmail.com\"\n                value={emailSettings.smtpHost}\n                onChange={(e) => handleInputChange(\"smtpHost\", e.target.value)}\n                data-testid=\"smtp-host-input\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"smtp-port\">\n                {language === \"ca\" ? \"Port\" : \"Puerto\"}\n              </Label>\n              <Input\n                id=\"smtp-port\"\n                type=\"number\"\n                placeholder=\"587\"\n                value={emailSettings.smtpPort}\n                onChange={(e) => handleInputChange(\"smtpPort\", parseInt(e.target.value) || 587)}\n                data-testid=\"smtp-port-input\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"smtp-user\">\n                {language === \"ca\" ? \"Usuari SMTP\" : \"Usuario SMTP\"}\n              </Label>\n              <Input\n                id=\"smtp-user\"\n                placeholder=\"example@gmail.com\"\n                value={emailSettings.smtpUser}\n                onChange={(e) => handleInputChange(\"smtpUser\", e.target.value)}\n                data-testid=\"smtp-user-input\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"smtp-password\">\n                {language === \"ca\" ? \"Contrasenya SMTP\" : \"Contraseña SMTP\"}\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"smtp-password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"••••••••\"\n                  value={emailSettings.smtpPassword}\n                  onChange={(e) => handleInputChange(\"smtpPassword\", e.target.value)}\n                  data-testid=\"smtp-password-input\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Sender Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <User className=\"h-5 w-5\" />\n            <span>\n              {language === \"ca\" ? \"Configuració del Remitent\" : \"Configuración del Remitente\"}\n            </span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"sender-email\">\n                {language === \"ca\" ? \"Email del remitent\" : \"Email del remitente\"}\n              </Label>\n              <Input\n                id=\"sender-email\"\n                type=\"email\"\n                placeholder=\"noreply@centre.edu\"\n                value={emailSettings.senderEmail}\n                onChange={(e) => handleInputChange(\"senderEmail\", e.target.value)}\n                data-testid=\"sender-email-input\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"sender-name\">\n                {language === \"ca\" ? \"Nom del remitent\" : \"Nombre del remitente\"}\n              </Label>\n              <Input\n                id=\"sender-name\"\n                placeholder=\"Centre Educatiu\"\n                value={emailSettings.senderName}\n                onChange={(e) => handleInputChange(\"senderName\", e.target.value)}\n                data-testid=\"sender-name-input\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Help Text */}\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n        <h4 className=\"font-medium text-yellow-800 mb-2\">\n          {language === \"ca\" ? \"Configuració recomanada per Gmail:\" : \"Configuración recomendada para Gmail:\"}\n        </h4>\n        <ul className=\"text-sm text-yellow-700 space-y-1\">\n          <li>• <strong>Servidor:</strong> smtp.gmail.com</li>\n          <li>• <strong>Port:</strong> 587</li>\n          <li>• <strong>{language === \"ca\" ? \"Contrasenya d'aplicació\" : \"Contraseña de aplicación\"}:</strong> {language === \"ca\" ? \"Utilitzar contrasenya d'aplicació, no la contrasenya normal\" : \"Usar contraseña de aplicación, no la contraseña normal\"}</li>\n        </ul>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex space-x-4\">\n        <Button\n          onClick={handleSave}\n          disabled={updateMutation.isPending}\n          className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white\"\n          data-testid=\"save-email-settings-button\"\n        >\n          {updateMutation.isPending\n            ? (language === \"ca\" ? \"Guardant...\" : \"Guardando...\")\n            : (language === \"ca\" ? \"Guardar Configuració\" : \"Guardar Configuración\")}\n        </Button>\n        \n        <Button\n          onClick={handleTestEmail}\n          disabled={testEmailMutation.isPending || !emailSettings.senderEmail}\n          variant=\"outline\"\n          className=\"flex items-center space-x-2\"\n          data-testid=\"test-email-button\"\n        >\n          <Mail className=\"h-4 w-4\" />\n          <span>\n            {testEmailMutation.isPending\n              ? (language === \"ca\" ? \"Enviant...\" : \"Enviando...\")\n              : (language === \"ca\" ? \"Provar Email\" : \"Probar Email\")}\n          </span>\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":11204},"client/src/components/Header.tsx":{"content":"import { useLanguage } from \"@/hooks/useLanguage\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { t } from \"@/lib/i18n\";\nimport { Bell, Clock, Search, Sun, Moon, Globe, QrCode } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator \n} from \"@/components/ui/dropdown-menu\";\nimport { cn } from \"@/lib/utils\";\n\ninterface HeaderProps {\n  title: string;\n  onQuickAttendance?: () => void;\n}\n\nexport default function Header({ title, onQuickAttendance }: HeaderProps) {\n  const { language, setLanguage } = useLanguage();\n  const { user } = useAuth();\n\n  return (\n    <header className={cn(\n      \"sticky top-0 z-40 bg-rose-50/95 dark:bg-slate-800/95 backdrop-blur supports-[backdrop-filter]:bg-rose-50/60 dark:supports-[backdrop-filter]:bg-slate-800/60\",\n      \"border-b border-rose-100 dark:border-slate-600 shadow-sm\",\n      \"hidden md:block\" // Ocultar en mòbil\n    )}>\n      <div className=\"flex h-16 items-center justify-between px-4 md:px-6\">\n        \n        {/* Left section with title */}\n        <div className=\"flex items-center space-x-4 flex-1 min-w-0\">\n          <div className=\"min-w-0 flex-1\">\n            <h1 className=\"text-lg md:text-xl font-bold text-foreground truncate\" data-testid=\"page-title\">\n              {title}\n            </h1>\n            <p className=\"text-xs text-muted-foreground hidden sm:block\">\n              {user?.firstName && `Benvingut/da, ${user.firstName}`}\n            </p>\n          </div>\n        </div>\n\n        {/* Center section with search (hidden on mobile) */}\n        <div className=\"hidden md:flex items-center flex-1 max-w-sm mx-4\">\n          <div className=\"relative w-full\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              placeholder={language === \"ca\" ? \"Cercar...\" : \"Buscar...\"}\n              className=\"pl-9 bg-rose-50/50 dark:bg-slate-700/50 border-0 focus:bg-rose-100 dark:focus:bg-slate-600 transition-colors\"\n            />\n          </div>\n        </div>\n\n        {/* Right section with actions */}\n        <div className=\"flex items-center space-x-3\">\n          {/* QR Unified Access */}\n          <Button \n            onClick={() => window.open('/unified-qr', '_blank')}\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"border-blue-600 text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 hidden sm:flex\"\n            data-testid=\"unified-qr-button\"\n          >\n            <QrCode className=\"mr-2 h-4 w-4\" />\n            {language === \"ca\" ? \"Fitxatge QR\" : \"Fichaje QR\"}\n          </Button>\n\n          {onQuickAttendance && (\n            <Button \n              onClick={onQuickAttendance}\n              size=\"sm\"\n              className=\"bg-gradient-to-r from-rose-400 via-pink-400 to-purple-500 hover:from-rose-500 hover:via-pink-500 hover:to-purple-600 shadow-lg hover:shadow-rose-400/25 text-white hidden sm:flex\"\n              data-testid=\"quick-attendance-button\"\n            >\n              <Clock className=\"mr-2 h-4 w-4\" />\n              {t(\"quick_checkin\", language)}\n            </Button>\n          )}\n\n          {/* Quick attendance mobile button */}\n          {onQuickAttendance && (\n            <Button \n              onClick={onQuickAttendance}\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"sm:hidden\"\n              data-testid=\"quick-attendance-mobile-button\"\n            >\n              <Clock className=\"h-4 w-4\" />\n            </Button>\n          )}\n\n          {/* Language selector */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-rose-100 dark:hover:bg-slate-700 text-slate-600 dark:text-slate-300\">\n                <Globe className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"min-w-[120px] bg-rose-50 dark:bg-slate-800 border-rose-200 dark:border-slate-600\">\n              <DropdownMenuItem \n                onClick={() => setLanguage(\"ca\")}\n                className={cn(\"cursor-pointer hover:bg-rose-100 dark:hover:bg-slate-700\", language === \"ca\" && \"bg-rose-100 dark:bg-slate-700\")}\n              >\n                🏴󠁥󠁳󠁣󠁴󠁿 Català\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={() => setLanguage(\"es\")}\n                className={cn(\"cursor-pointer hover:bg-rose-100 dark:hover:bg-slate-700\", language === \"es\" && \"bg-rose-100 dark:bg-slate-700\")}\n              >\n                🇪🇸 Español\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {/* Notifications */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"relative hover:bg-rose-100 dark:hover:bg-slate-700 text-slate-600 dark:text-slate-300\"\n                data-testid=\"notifications-button\"\n              >\n                <Bell className=\"h-4 w-4\" />\n                <Badge \n                  variant=\"destructive\" \n                  className=\"absolute -top-1 -right-1 h-4 w-4 p-0 flex items-center justify-center text-[10px] font-semibold\"\n                  data-testid=\"notification-count\"\n                >\n                  3\n                </Badge>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-80 bg-rose-50 dark:bg-slate-800 border-rose-200 dark:border-slate-600\">\n              <div className=\"p-3 border-b\">\n                <h3 className=\"font-semibold text-sm\">\n                  {language === \"ca\" ? \"Notificacions\" : \"Notificaciones\"}\n                </h3>\n              </div>\n              <div className=\"p-2\">\n                <DropdownMenuItem className=\"flex items-start space-x-3 p-3 rounded-lg cursor-pointer\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium\">Nova alerta de tardança</p>\n                    <p className=\"text-xs text-muted-foreground\">Professor X ha arribat 15 minuts tard</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Fa 5 minuts</p>\n                  </div>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem className=\"flex items-center justify-center p-3 text-xs text-primary cursor-pointer\">\n                  {language === \"ca\" ? \"Veure totes\" : \"Ver todas\"}\n                </DropdownMenuItem>\n              </div>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {/* Mobile search button */}\n          <Button variant=\"ghost\" size=\"sm\" className=\"md:hidden hover:bg-accent\">\n            <Search className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":7240},"client/src/components/LanguageSwitcher.tsx":{"content":"import { useLanguage } from \"@/hooks/useLanguage\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function LanguageSwitcher() {\n  const { language, setLanguage } = useLanguage();\n\n  return (\n    <div className=\"fixed top-4 right-4 z-50\">\n      <div className=\"bg-surface rounded-lg shadow-md border border-gray-200 overflow-hidden\">\n        <Button\n          variant={language === \"ca\" ? \"default\" : \"ghost\"}\n          size=\"sm\"\n          onClick={() => setLanguage(\"ca\")}\n          className=\"rounded-none border-r font-semibold\"\n          data-testid=\"language-ca\"\n        >\n          CA\n        </Button>\n        <Button\n          variant={language === \"es\" ? \"default\" : \"ghost\"}\n          size=\"sm\"\n          onClick={() => setLanguage(\"es\")}\n          className=\"rounded-none font-semibold\"\n          data-testid=\"language-es\"\n        >\n          ES\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":923},"client/src/components/NetworkSettingsForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Trash2, Wifi, Shield, Network } from \"lucide-react\";\n\ninterface NetworkSettings {\n  allowedNetworks: string[];\n  requireNetworkValidation: boolean;\n  description: string;\n}\n\ninterface NetworkSettingsFormProps {\n  institutionId: string | null | undefined;\n  language: string;\n}\n\nexport default function NetworkSettingsForm({ institutionId, language }: NetworkSettingsFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [allowedNetworks, setAllowedNetworks] = useState<string[]>([]);\n  const [requireValidation, setRequireValidation] = useState(false);\n  const [description, setDescription] = useState(\"\");\n  const [newNetwork, setNewNetwork] = useState(\"\");\n\n  const { data: networkSettings, isLoading } = useQuery<NetworkSettings>({\n    queryKey: [\"/api/attendance-network-settings\", institutionId || \"null\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/attendance-network-settings/${institutionId || \"null\"}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch network settings');\n      }\n      return response.json();\n    },\n  });\n\n  // Load existing data when received from server\n  useEffect(() => {\n    if (networkSettings) {\n      setAllowedNetworks(networkSettings.allowedNetworks || []);\n      setRequireValidation(networkSettings.requireNetworkValidation || false);\n      setDescription(networkSettings.description || \"\");\n    }\n  }, [networkSettings]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"PUT\", `/api/attendance-network-settings/${institutionId || \"null\"}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Èxit\" : \"Éxito\",\n        description: language === \"ca\" ? \"Configuració de xarxa guardada\" : \"Configuración de red guardada\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance-network-settings\", institutionId || \"null\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: error.message || (language === \"ca\" ? \"Error guardant la configuració\" : \"Error guardando la configuración\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addNetwork = () => {\n    if (newNetwork.trim() && !allowedNetworks.includes(newNetwork.trim())) {\n      setAllowedNetworks([...allowedNetworks, newNetwork.trim()]);\n      setNewNetwork(\"\");\n    }\n  };\n\n  const removeNetwork = (index: number) => {\n    setAllowedNetworks(allowedNetworks.filter((_, i) => i !== index));\n  };\n\n  const handleSave = () => {\n    updateMutation.mutate({\n      allowedNetworks,\n      requireNetworkValidation: requireValidation,\n      description,\n    });\n  };\n\n  if (isLoading) {\n    return <div className=\"animate-pulse h-32 bg-gray-100 rounded\"></div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Network Validation Toggle */}\n      <div className=\"flex items-center justify-between p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n        <div className=\"flex items-center space-x-3\">\n          <Shield className=\"h-5 w-5 text-blue-600\" />\n          <div>\n            <Label className=\"text-blue-800 font-medium\">\n              {language === \"ca\" ? \"Restringir fitxatge per xarxa\" : \"Restringir fichaje por red\"}\n            </Label>\n            <p className=\"text-sm text-blue-600\">\n              {language === \"ca\" \n                ? \"Només permet fitxatge des de les IPs especificades\"\n                : \"Solo permite fichaje desde las IPs especificadas\"}\n            </p>\n          </div>\n        </div>\n        <Switch\n          checked={requireValidation}\n          onCheckedChange={setRequireValidation}\n          data-testid=\"require-validation-switch\"\n        />\n      </div>\n\n      {/* Allowed Networks List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Network className=\"h-5 w-5\" />\n            <span>\n              {language === \"ca\" ? \"Xarxes Autoritzades\" : \"Redes Autorizadas\"}\n            </span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Add New Network */}\n          <div className=\"flex space-x-2\">\n            <Input\n              placeholder={language === \"ca\" ? \"192.168.1.0/24 o 192.168.1.100\" : \"192.168.1.0/24 o 192.168.1.100\"}\n              value={newNetwork}\n              onChange={(e) => setNewNetwork(e.target.value)}\n              onKeyPress={(e) => e.key === \"Enter\" && addNetwork()}\n              data-testid=\"new-network-input\"\n            />\n            <Button onClick={addNetwork} size=\"sm\" data-testid=\"add-network-button\">\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Network List */}\n          <div className=\"space-y-2\">\n            {allowedNetworks.map((network, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center space-x-2\">\n                  <Wifi className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"font-mono text-sm\">{network}</span>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeNetwork(index)}\n                  className=\"text-red-600 hover:text-red-700\"\n                  data-testid={`remove-network-${index}`}\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n            {allowedNetworks.length === 0 && (\n              <p className=\"text-sm text-gray-500 text-center py-4\">\n                {language === \"ca\" \n                  ? \"No hi ha xarxes configurades. Afegeix una IP o rang CIDR.\"\n                  : \"No hay redes configuradas. Añade una IP o rango CIDR.\"}\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Description */}\n      <div>\n        <Label htmlFor=\"network-description\">\n          {language === \"ca\" ? \"Descripció\" : \"Descripción\"}\n        </Label>\n        <Textarea\n          id=\"network-description\"\n          placeholder={language === \"ca\" \n            ? \"Descripció opcional de la configuració de xarxa\"\n            : \"Descripción opcional de la configuración de red\"}\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          data-testid=\"network-description\"\n        />\n      </div>\n\n      {/* Help Text */}\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n        <h4 className=\"font-medium text-yellow-800 mb-2\">\n          {language === \"ca\" ? \"Exemples de configuració:\" : \"Ejemplos de configuración:\"}\n        </h4>\n        <ul className=\"text-sm text-yellow-700 space-y-1\">\n          <li>• <code>192.168.1.0/24</code> - {language === \"ca\" ? \"Tota la xarxa local\" : \"Toda la red local\"}</li>\n          <li>• <code>192.168.1.100</code> - {language === \"ca\" ? \"IP específica\" : \"IP específica\"}</li>\n          <li>• <code>10.0.0.0/8</code> - {language === \"ca\" ? \"Xarxa privada gran\" : \"Red privada grande\"}</li>\n        </ul>\n      </div>\n\n      {/* Save Button */}\n      <Button\n        onClick={handleSave}\n        disabled={updateMutation.isPending}\n        className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n        data-testid=\"save-network-settings-button\"\n      >\n        {updateMutation.isPending\n          ? (language === \"ca\" ? \"Guardant...\" : \"Guardando...\")\n          : (language === \"ca\" ? \"Guardar Configuració de Xarxa\" : \"Guardar Configuración de Red\")}\n      </Button>\n    </div>\n  );\n}","size_bytes":8306},"client/src/components/PasswordChangeModal.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { Lock, Eye, EyeOff } from \"lucide-react\";\n\ninterface PasswordChangeModalProps {\n  children: React.ReactNode;\n}\n\nexport function PasswordChangeModal({ children }: PasswordChangeModalProps) {\n  const [open, setOpen] = useState(false);\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  \n  const { language } = useLanguage();\n  const { toast } = useToast();\n\n  const passwordValidation = {\n    minLength: newPassword.length >= 8,\n    hasNumber: /\\d/.test(newPassword),\n    hasSpecial: /[!@#$%^&*(),.?\":{}|<>]/.test(newPassword),\n    hasLetter: /[a-zA-Z]/.test(newPassword),\n  };\n\n  const isPasswordValid = Object.values(passwordValidation).every(Boolean);\n  const passwordsMatch = newPassword === confirmPassword && confirmPassword !== \"\";\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Contrasenya canviada\" : \"Contraseña cambiada\",\n        description: language === \"ca\" \n          ? \"La contrasenya s'ha actualitzat correctament\" \n          : \"La contraseña se ha actualizado correctamente\",\n        variant: \"default\",\n      });\n      setOpen(false);\n      setCurrentPassword(\"\");\n      setNewPassword(\"\");\n      setConfirmPassword(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: error.message || (language === \"ca\" \n          ? \"No s'ha pogut canviar la contrasenya\" \n          : \"No se pudo cambiar la contraseña\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!isPasswordValid || !passwordsMatch) return;\n    changePasswordMutation.mutate();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md modal-content-solid\" data-testid=\"password-change-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Lock className=\"h-5 w-5\" />\n            {language === \"ca\" ? \"Canviar contrasenya\" : \"Cambiar contraseña\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"current-password\">\n              {language === \"ca\" ? \"Contrasenya actual\" : \"Contraseña actual\"}\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"current-password\"\n                type={showCurrentPassword ? \"text\" : \"password\"}\n                value={currentPassword}\n                onChange={(e) => setCurrentPassword(e.target.value)}\n                required\n                data-testid=\"input-current-password\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 p-0\"\n                onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                data-testid=\"button-toggle-current-password\"\n              >\n                {showCurrentPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"new-password\">\n              {language === \"ca\" ? \"Nova contrasenya\" : \"Nueva contraseña\"}\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"new-password\"\n                type={showNewPassword ? \"text\" : \"password\"}\n                value={newPassword}\n                onChange={(e) => setNewPassword(e.target.value)}\n                required\n                data-testid=\"input-new-password\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 p-0\"\n                onClick={() => setShowNewPassword(!showNewPassword)}\n                data-testid=\"button-toggle-new-password\"\n              >\n                {showNewPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n            \n            {newPassword && (\n              <div className=\"text-sm space-y-1\">\n                <div className={`flex items-center gap-2 ${passwordValidation.minLength ? 'text-green-600' : 'text-red-600'}`}>\n                  <span className=\"text-xs\">•</span>\n                  {language === \"ca\" ? \"Mínim 8 caràcters\" : \"Mínimo 8 caracteres\"}\n                </div>\n                <div className={`flex items-center gap-2 ${passwordValidation.hasLetter ? 'text-green-600' : 'text-red-600'}`}>\n                  <span className=\"text-xs\">•</span>\n                  {language === \"ca\" ? \"Almenys una lletra\" : \"Al menos una letra\"}\n                </div>\n                <div className={`flex items-center gap-2 ${passwordValidation.hasNumber ? 'text-green-600' : 'text-red-600'}`}>\n                  <span className=\"text-xs\">•</span>\n                  {language === \"ca\" ? \"Almenys un número\" : \"Al menos un número\"}\n                </div>\n                <div className={`flex items-center gap-2 ${passwordValidation.hasSpecial ? 'text-green-600' : 'text-red-600'}`}>\n                  <span className=\"text-xs\">•</span>\n                  {language === \"ca\" ? \"Almenys un caràcter especial\" : \"Al menos un carácter especial\"}\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirm-password\">\n              {language === \"ca\" ? \"Confirmar nova contrasenya\" : \"Confirmar nueva contraseña\"}\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"confirm-password\"\n                type={showConfirmPassword ? \"text\" : \"password\"}\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                required\n                data-testid=\"input-confirm-password\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 p-0\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                data-testid=\"button-toggle-confirm-password\"\n              >\n                {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n            \n            {confirmPassword && !passwordsMatch && (\n              <p className=\"text-sm text-red-600\">\n                {language === \"ca\" ? \"Les contrasenyes no coincideixen\" : \"Las contraseñas no coinciden\"}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex gap-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={() => setOpen(false)}\n              data-testid=\"button-cancel\"\n            >\n              {language === \"ca\" ? \"Cancel·lar\" : \"Cancelar\"}\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"flex-1\"\n              disabled={!isPasswordValid || !passwordsMatch || !currentPassword || changePasswordMutation.isPending}\n              data-testid=\"button-change-password\"\n            >\n              {changePasswordMutation.isPending \n                ? (language === \"ca\" ? \"Canviant...\" : \"Cambiando...\")\n                : (language === \"ca\" ? \"Canviar contrasenya\" : \"Cambiar contraseña\")\n              }\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8967},"client/src/components/ProtectedRoute.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRoles?: Array<'superadmin' | 'admin' | 'employee'>;\n  fallback?: React.ReactNode;\n}\n\nexport default function ProtectedRoute({ \n  children, \n  requiredRoles = [], \n  fallback \n}: ProtectedRouteProps) {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { language } = useLanguage();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && isAuthenticated && requiredRoles.length > 0) {\n      const userRole = user?.role;\n      const hasPermission = requiredRoles.includes(userRole as any);\n      \n      if (!hasPermission) {\n        toast({\n          title: language === \"ca\" ? \"Accés denegat\" : \"Acceso denegado\",\n          description: language === \"ca\" \n            ? \"No tens permisos per accedir a aquesta pàgina\"\n            : \"No tienes permisos para acceder a esta página\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  }, [isLoading, isAuthenticated, user?.role, requiredRoles, language, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return fallback || (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\">\n            {language === \"ca\" ? \"Accés requerit\" : \"Acceso requerido\"}\n          </h2>\n          <p className=\"text-muted-foreground\">\n            {language === \"ca\" \n              ? \"Has d'iniciar sessió per accedir a aquesta pàgina\"\n              : \"Debes iniciar sesión para acceder a esta página\"}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (requiredRoles.length > 0) {\n    const userRole = user?.role;\n    const hasPermission = requiredRoles.includes(userRole as any);\n    \n    if (!hasPermission) {\n      return fallback || (\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold mb-4\">\n              {language === \"ca\" ? \"Accés denegat\" : \"Acceso denegado\"}\n            </h2>\n            <p className=\"text-muted-foreground\">\n              {language === \"ca\" \n                ? \"No tens permisos per accedir a aquesta pàgina\"\n                : \"No tienes permisos para acceder a esta página\"}\n            </p>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  return <>{children}</>;\n}","size_bytes":2763},"client/src/components/Sidebar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePermissions } from \"@/hooks/usePermissions\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { t } from \"@/lib/i18n\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Home,\n  Users,\n  Calendar,\n  AlertTriangle,\n  FileText,\n  Settings,\n  Cog,\n  Building2,\n  GraduationCap,\n  ChevronLeft,\n  ChevronRight,\n  LogOut,\n  Clock,\n  Upload,\n  UserCheck,\n  MessageSquare,\n  CalendarDays,\n  Menu,\n  X,\n  Activity,\n  Shield,\n  Bell,\n  BarChart3,\n  Briefcase,\n  QrCode,\n  Database\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface SidebarProps {\n  isMobileMenuOpen?: boolean;\n  setIsMobileMenuOpen?: (open: boolean) => void;\n}\n\nexport default function Sidebar(props: SidebarProps = {}) {\n  const { isMobileMenuOpen, setIsMobileMenuOpen } = props;\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const permissions = usePermissions();\n  const { language } = useLanguage();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [internalMobileMenuOpen, setInternalMobileMenuOpen] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n  \n  // Use props if provided, otherwise use internal state\n  const mobileMenuOpen = isMobileMenuOpen !== undefined ? isMobileMenuOpen : internalMobileMenuOpen;\n  const setMobileMenuOpen = setIsMobileMenuOpen ?? setInternalMobileMenuOpen;\n\n  // Get alert count for badge\n  const { data: alerts = [] } = useQuery({\n    queryKey: [\"/api/alerts\", user?.institutionId],\n    enabled: !!user?.institutionId && permissions.canViewAlerts,\n    refetchInterval: 5 * 60 * 1000, // Refetch every 5 minutes\n  });\n\n  // Detect mobile and handle responsive behavior\n  useEffect(() => {\n    const checkMobile = () => {\n      const mobile = window.innerWidth < 768;\n      setIsMobile(mobile);\n      if (mobile) {\n        setIsCollapsed(true);\n        setMobileMenuOpen(false);\n      }\n    };\n\n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  // Close mobile menu on route change\n  useEffect(() => {\n    if (isMobile) {\n      setMobileMenuOpen(false);\n    }\n  }, [location, isMobile]);\n\n  // Organized navigation structure by category\n  const navigationSections = [\n    {\n      title: language === \"ca\" ? \"Principal\" : \"Principal\",\n      items: [\n        {\n          name: t(\"dashboard\", language),\n          href: \"/dashboard\",\n          icon: Home,\n          show: true,\n          badge: null,\n        },\n        {\n          name: t(\"attendance\", language),\n          href: \"/attendance\",\n          icon: Clock,\n          show: permissions.canViewOwnAttendance || permissions.canViewAllAttendance,\n          badge: null,\n        },\n        {\n          name: language === \"ca\" ? \"Fitxatge QR Unificat\" : \"Fichaje QR Unificado\",\n          href: \"/unified-qr\",\n          icon: UserCheck,\n          show: true,\n          badge: null,\n        },\n        {\n          name: language === \"ca\" ? \"Generador de QR\" : \"Generador de QR\",\n          href: \"/qr-generator\",\n          icon: QrCode,\n          show: (user?.role === 'admin' || user?.role === 'superadmin'),\n          badge: null,\n        },\n        {\n          name: language === \"ca\" ? \"Horari Personal\" : \"Horario Personal\",\n          href: \"/weekly-schedule\",\n          icon: CalendarDays,\n          show: permissions.canViewOwnAttendance,\n          badge: null,\n        },\n      ]\n    },\n    {\n      title: language === \"ca\" ? \"Gestió\" : \"Gestión\",\n      items: [\n        {\n          name: t(\"employee_management\", language),\n          href: \"/employees\",\n          icon: Users,\n          show: permissions.canViewEmployees,\n          badge: null,\n        },\n        {\n          name: language === \"ca\" ? \"Horaris Personal (Admin)\" : \"Horarios Personal (Admin)\",\n          href: \"/admin/weekly-schedule\",\n          icon: Calendar,\n          show: (user?.role === 'admin' || user?.role === 'superadmin'),\n          badge: null,\n        },\n        {\n          name: language === \"ca\" ? \"Importar Horaris\" : \"Importar Horarios\",\n          href: \"/schedule-import\",\n          icon: Upload,\n          show: permissions.canEditSchedules,\n          badge: null,\n        },\n      ]\n    },\n    {\n      title: language === \"ca\" ? \"Monitoratge\" : \"Monitoreo\",\n      items: [\n        {\n          name: language === \"ca\" ? \"Gestió d'Alertes\" : \"Gestión de Alertas\",\n          href: \"/alerts\",\n          icon: AlertTriangle,\n          show: permissions.canViewAlerts,\n          badge: Array.isArray(alerts) && alerts.filter((alert: any) => alert.status === 'active').length > 0 ? alerts.filter((alert: any) => alert.status === 'active').length.toString() : null,\n        },\n\n        {\n          name: t(\"reports\", language),\n          href: \"/reports\",\n          icon: BarChart3,\n          show: permissions.canGeneratePersonalReports || permissions.canGenerateInstitutionReports,\n          badge: null,\n        },\n        {\n          name: language === \"ca\" ? \"Comunicacions\" : \"Comunicaciones\",\n          href: \"/communications\",\n          icon: MessageSquare,\n          show: true,\n          badge: null,\n        },\n      ]\n    },\n    {\n      title: language === \"ca\" ? \"Administració\" : \"Administración\",\n      items: [\n        {\n          name: language === \"ca\" ? \"Gestió d'Institucions\" : \"Gestión de Instituciones\",\n          href: \"/institutions\",\n          icon: Building2,\n          show: permissions.canViewInstitutions,\n          badge: null,\n        },\n        {\n          name: language === \"ca\" ? \"Cursos Acadèmics\" : \"Cursos Académicos\",\n          href: \"/academic-years\",\n          icon: GraduationCap,\n          show: permissions.canCreateAcademicYear || permissions.canEditAcademicYear,\n          badge: null,\n        },\n        {\n          name: language === \"ca\" ? \"Migració de Dades\" : \"Migración de Datos\",\n          href: \"/academic-migration\",\n          icon: Database,\n          show: (user?.role === 'admin' || user?.role === 'superadmin'),\n          badge: null,\n        },\n        {\n          name: language === \"ca\" ? \"Administració\" : \"Administración\",\n          href: \"/admin\",\n          icon: Shield,\n          show: user?.role === 'admin' || user?.role === 'superadmin',\n          badge: null,\n        },\n        {\n          name: language === \"ca\" ? \"Configuració d'Alertes\" : \"Configuración de Alertas\",\n          href: \"/alert-config\",\n          icon: Settings,\n          show: permissions.canManageUsers,\n          badge: null,\n        },\n        {\n          name: t(\"settings\", language),\n          href: \"/settings\",\n          icon: Settings,\n          show: permissions.canEditSettings || permissions.canManageUsers,\n          badge: null,\n        },\n      ]\n    },\n    {\n      title: language === \"ca\" ? \"Legal\" : \"Legal\",\n      items: [\n        {\n          name: language === \"ca\" ? \"Política de Privacitat\" : \"Política de Privacidad\",\n          href: \"/privacy\",\n          icon: FileText,\n          show: true,\n          badge: null,\n        },\n        {\n          name: language === \"ca\" ? \"Els meus Drets\" : \"Mis Derechos\",\n          href: \"/data-rights\",\n          icon: UserCheck,\n          show: true,\n          badge: null,\n        },\n      ]\n    }\n  ].map(section => ({\n    ...section,\n    items: section.items.filter(item => item.show)\n  })).filter(section => section.items.length > 0);\n\n  const handleLogout = async () => {\n    try {\n      const response = await fetch('/api/logout', {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (response.ok) {\n        // Force reload to clear all client state\n        window.location.href = '/';\n      } else {\n        console.error('Logout failed');\n        // Fallback to GET request\n        window.location.href = '/api/logout';\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Fallback to GET request\n      window.location.href = '/api/logout';\n    }\n  };\n\n  const toggleMobileMenu = () => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  };\n\n  const userInitials = user ? `${user.firstName?.[0] || ''}${user.lastName?.[0] || ''}` : 'U';\n\n  return (\n    <>\n      {/* Mobile Overlay */}\n      {isMobile && mobileMenuOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/80 z-[50] md:hidden pointer-events-auto top-14\" \n          onClick={() => setMobileMenuOpen(false)}\n        />\n      )}\n      \n\n\n      {/* Sidebar */}\n      <div className={cn(\n        \"fixed top-0 left-0 h-full bg-gradient-to-b from-white via-rose-50/95 to-pink-50/95 dark:from-gray-950 dark:via-slate-900/98 dark:to-slate-800/98 backdrop-blur-md border-r border-rose-100 dark:border-slate-600 z-[55] transition-all duration-300 flex flex-col shadow-2xl pointer-events-auto\",\n        // Desktop behavior\n        !isMobile && (isCollapsed ? \"w-16\" : \"w-60\"),\n        // Mobile behavior  \n        isMobile && (mobileMenuOpen ? \"w-72 top-14\" : \"w-0 -translate-x-full top-14\"),\n        isMobile && mobileMenuOpen && \"translate-x-0 shadow-2xl\"\n      )}>\n        \n        {/* Header Section - Only show on desktop */}\n        {!isMobile && (\n          <div className=\"flex-shrink-0 px-4 py-5 border-b border-rose-100 dark:border-slate-600 bg-gradient-to-r from-rose-100/80 to-pink-100/80 dark:from-slate-800/50 dark:to-slate-700/50\">\n            <div className=\"flex items-center justify-between\">\n              {!isCollapsed && (\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg\">\n                    <span className=\"text-lg font-bold text-white\">F</span>\n                  </div>\n                  <div>\n                    <h2 className=\"text-xl font-bold text-foreground\">\n                      fich.ai\n                    </h2>\n                    <p className=\"text-xs text-muted-foreground font-medium\">Sistema Intel·ligent de Fitxatge</p>\n                  </div>\n                </div>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsCollapsed(!isCollapsed)}\n                className=\"ml-auto hover:bg-primary/10\"\n                data-testid=\"toggle-sidebar\"\n              >\n                {isCollapsed ? <ChevronRight className=\"w-4 h-4\" /> : <ChevronLeft className=\"w-4 h-4\" />}\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* User Profile Section - Only show on desktop */}\n        {!isCollapsed && !isMobile && user && (\n          <div className=\"flex-shrink-0 p-4 border-b border-border\">\n            <div className=\"flex items-center space-x-3 p-3 rounded-xl bg-gradient-to-r from-rose-50/70 to-pink-50/70 dark:from-slate-700/50 dark:to-slate-600/50 border border-rose-200 dark:border-slate-500/50\">\n              <Avatar className=\"w-12 h-12 ring-2 ring-rose-200 dark:ring-slate-500\">\n                <AvatarFallback className=\"bg-gradient-to-br from-rose-400 via-pink-400 to-purple-500 text-white font-semibold\">\n                  {userInitials}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-semibold truncate text-foreground\">\n                  {user.firstName} {user.lastName}\n                </p>\n                <p className=\"text-xs text-muted-foreground truncate\">\n                  {user.email}\n                </p>\n                <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                  {t(user.role, language)}\n                </Badge>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Navigation Sections */}\n        <nav className=\"flex-1 p-3 overflow-y-auto scrollbar-thin scrollbar-thumb-border scrollbar-track-transparent overscroll-contain\">\n          <div className=\"space-y-6\">\n            {navigationSections.map((section, sectionIndex) => (\n              <div key={section.title} className=\"space-y-2\">\n                {(!isCollapsed || isMobile) && (\n                  <h3 className=\"px-3 text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                    {section.title}\n                  </h3>\n                )}\n                {isCollapsed && !isMobile && sectionIndex > 0 && (\n                  <Separator className=\"my-2\" />\n                )}\n                \n                <div className=\"space-y-1\">\n                  {section.items.map((item) => {\n                    const Icon = item.icon;\n                    const isActive = location === item.href || location.startsWith(item.href + '/');\n                    \n                    return (\n                      <Link key={item.href} href={item.href}>\n                        <div\n                          className={cn(\n                            \"nav-link\",\n                            isActive && \"active\",\n                            isCollapsed && !isMobile ? \"justify-center px-3\" : \"justify-start\",\n                            isMobile && \"pointer-events-auto\"\n                          )}\n                          data-testid={`nav-${item.href.replace('/', '').replace('/', '-')}-link`}\n                          onClick={isMobile ? () => setMobileMenuOpen(false) : undefined}\n                        >\n                          <Icon className={cn(\n                            \"flex-shrink-0 transition-all duration-200\",\n                            isActive ? \"w-5 h-5 text-primary-foreground\" : \"w-4 h-4 group-hover:scale-110 group-hover:text-accent-foreground\"\n                          )} />\n                          \n                          {(!isCollapsed || isMobile) && (\n                            <>\n                              <span className=\"ml-3 truncate\">{item.name}</span>\n                              {item.badge && (\n                                <Badge \n                                  variant={isActive ? \"secondary\" : \"outline\"} \n                                  className=\"ml-auto text-xs\"\n                                >\n                                  {item.badge}\n                                </Badge>\n                              )}\n                            </>\n                          )}\n                          \n                          {/* Active indicator */}\n                          {isActive && (\n                            <div className=\"absolute left-0 top-1/2 -translate-y-1/2 w-1 h-6 bg-white rounded-r-full shadow-sm opacity-80\" />\n                          )}\n                        </div>\n                      </Link>\n                    );\n                  })}\n                </div>\n              </div>\n            ))}\n          </div>\n        </nav>\n\n        {/* Footer Section */}\n        <div className=\"flex-shrink-0 p-4 border-t border-border bg-muted/30\">\n          <Button \n            variant=\"ghost\" \n            className={cn(\n              \"w-full group hover:bg-destructive/10 hover:text-destructive transition-all duration-200\",\n              isCollapsed && !isMobile ? \"justify-center px-3\" : \"justify-start\"\n            )}\n            onClick={() => {\n              if (isMobile) setMobileMenuOpen(false);\n              handleLogout();\n            }}\n            data-testid=\"logout-button\"\n          >\n            <LogOut className=\"w-4 h-4 flex-shrink-0 group-hover:scale-110 transition-transform duration-200\" />\n            {(!isCollapsed || isMobile) && (\n              <span className=\"ml-3 font-medium\">{t(\"logout\", language)}</span>\n            )}\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":16098},"client/src/components/UntisImportStatistics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { RefreshCw, Users, BookOpen, Users2, MapPin } from \"lucide-react\";\ninterface UntisStatistics {\n  totalSessions: number;\n  linkedSessions: number;\n  uniqueTeachers: number;\n  uniqueSubjects: number;\n  uniqueGroups: number;\n}\n\ninterface UntisImportStatisticsProps {\n  institutionId: string;\n  academicYearId: string;\n}\n\nexport function UntisImportStatistics({ institutionId, academicYearId }: UntisImportStatisticsProps) {\n  const { user } = useAuth();\n\n  const { data: stats, isLoading, refetch } = useQuery<UntisStatistics>({\n    queryKey: ['/api/schedule-import/statistics', institutionId, academicYearId],\n    queryFn: async () => {\n      const response = await fetch(`/api/schedule-import/statistics/${institutionId}/${academicYearId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch import statistics');\n      }\n      return response.json();\n    },\n    enabled: !!institutionId && !!academicYearId,\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-5 w-5\" />\n            {t('scheduleImport.statistics.title')}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n              <div className=\"h-2 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!stats || stats.totalSessions === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-5 w-5\" />\n            {t('scheduleImport.statistics.title')}\n          </CardTitle>\n          <CardDescription>\n            No s'han importat dades\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-muted-foreground\">\n            Importa un fitxer CSV per veure les estadístiques\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const linkingProgress = stats.totalSessions > 0 ? (stats.linkedSessions / stats.totalSessions) * 100 : 0;\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-5 w-5\" />\n              Estadístiques d'Importació\n            </CardTitle>\n            <CardDescription>\n              Resum de l'estat actual de la importació GP UNTIS\n            </CardDescription>\n          </div>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => refetch()}>\n            <RefreshCw className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Session Statistics */}\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium\">\n              Sessions vinculades a professors\n            </span>\n            <Badge variant={linkingProgress === 100 ? \"default\" : linkingProgress > 50 ? \"secondary\" : \"destructive\"}>\n              {Math.round(linkingProgress)}%\n            </Badge>\n          </div>\n          <Progress value={linkingProgress} className=\"h-2\" />\n          <div className=\"flex justify-between text-xs text-muted-foreground\">\n            <span>{stats.linkedSessions} vinculades</span>\n            <span>{stats.totalSessions} total</span>\n          </div>\n        </div>\n\n        {/* Summary Grid */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <BookOpen className=\"h-4 w-4 text-primary\" />\n            </div>\n            <div className=\"text-2xl font-bold\">{stats.totalSessions}</div>\n            <div className=\"text-xs text-muted-foreground\">\n              Sessions\n            </div>\n          </div>\n\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <Users className=\"h-4 w-4 text-blue-600\" />\n            </div>\n            <div className=\"text-2xl font-bold\">{stats.uniqueTeachers}</div>\n            <div className=\"text-xs text-muted-foreground\">\n              Professors\n            </div>\n          </div>\n\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <BookOpen className=\"h-4 w-4 text-green-600\" />\n            </div>\n            <div className=\"text-2xl font-bold\">{stats.uniqueSubjects}</div>\n            <div className=\"text-xs text-muted-foreground\">\n              Matèries\n            </div>\n          </div>\n\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <Users2 className=\"h-4 w-4 text-purple-600\" />\n            </div>\n            <div className=\"text-2xl font-bold\">{stats.uniqueGroups}</div>\n            <div className=\"text-xs text-muted-foreground\">\n              Grups\n            </div>\n          </div>\n        </div>\n\n        {/* Status Message */}\n        <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n          <div className=\"flex items-start gap-2\">\n            <div className=\"mt-0.5\">\n              {linkingProgress === 100 ? (\n                <div className=\"h-2 w-2 bg-green-500 rounded-full\"></div>\n              ) : linkingProgress > 50 ? (\n                <div className=\"h-2 w-2 bg-yellow-500 rounded-full\"></div>\n              ) : (\n                <div className=\"h-2 w-2 bg-red-500 rounded-full\"></div>\n              )}\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">\n                {linkingProgress === 100 \n                  ? 'Totes les sessions estan vinculades'\n                  : linkingProgress > 50 \n                    ? 'Vinculació parcial completada'\n                    : 'Vinculació deficient detectada'\n                }\n              </p>\n              <p className=\"text-xs text-blue-700 dark:text-blue-300 mt-1\">\n                {linkingProgress === 100 \n                  ? 'Excel·lent! Tots els horaris estan correctament assignats als professors.'\n                  : 'Alguns horaris no s\\'han pogut vincular automàticament. Revisa els noms dels professors.'\n                }\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7155},"client/src/components/UntisStats.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { RefreshCw, Users, BookOpen, Users2 } from \"lucide-react\";\n\ninterface UntisStatistics {\n  totalSessions: number;\n  linkedSessions: number;\n  uniqueTeachers: number;\n  uniqueSubjects: number;\n  uniqueGroups: number;\n}\n\ninterface UntisStatsProps {\n  institutionId: string;\n  academicYearId: string;\n}\n\nexport function UntisStats({ institutionId, academicYearId }: UntisStatsProps) {\n  const { data: stats, isLoading, refetch } = useQuery<UntisStatistics>({\n    queryKey: ['/api/schedule-import/statistics', institutionId, academicYearId],\n    queryFn: async () => {\n      const response = await fetch(`/api/schedule-import/statistics/${institutionId}/${academicYearId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch import statistics');\n      }\n      return response.json();\n    },\n    enabled: !!institutionId && !!academicYearId,\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-5 w-5\" />\n            Estadístiques GP UNTIS\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n              <div className=\"h-2 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!stats || stats.totalSessions === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-5 w-5\" />\n            Estadístiques GP UNTIS\n          </CardTitle>\n          <CardDescription>\n            No s'han importat dades\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-muted-foreground\">\n            Importa un fitxer CSV per veure les estadístiques\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const linkingProgress = stats.totalSessions > 0 ? (stats.linkedSessions / stats.totalSessions) * 100 : 0;\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-5 w-5\" />\n              Estadístiques GP UNTIS\n            </CardTitle>\n            <CardDescription>\n              Resum de l'estat actual de la importació\n            </CardDescription>\n          </div>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => refetch()}>\n            <RefreshCw className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Session Statistics */}\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium\">\n              Sessions vinculades a professors\n            </span>\n            <Badge variant={linkingProgress === 100 ? \"default\" : linkingProgress > 50 ? \"secondary\" : \"destructive\"}>\n              {Math.round(linkingProgress)}%\n            </Badge>\n          </div>\n          <Progress value={linkingProgress} className=\"h-2\" />\n          <div className=\"flex justify-between text-xs text-muted-foreground\">\n            <span>{stats.linkedSessions} vinculades</span>\n            <span>{stats.totalSessions} total</span>\n          </div>\n        </div>\n\n        {/* Summary Grid */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <BookOpen className=\"h-4 w-4 text-primary\" />\n            </div>\n            <div className=\"text-2xl font-bold\">{stats.totalSessions}</div>\n            <div className=\"text-xs text-muted-foreground\">Sessions</div>\n          </div>\n\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <Users className=\"h-4 w-4 text-blue-600\" />\n            </div>\n            <div className=\"text-2xl font-bold\">{stats.uniqueTeachers}</div>\n            <div className=\"text-xs text-muted-foreground\">Professors</div>\n          </div>\n\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <BookOpen className=\"h-4 w-4 text-green-600\" />\n            </div>\n            <div className=\"text-2xl font-bold\">{stats.uniqueSubjects}</div>\n            <div className=\"text-xs text-muted-foreground\">Matèries</div>\n          </div>\n\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <Users2 className=\"h-4 w-4 text-purple-600\" />\n            </div>\n            <div className=\"text-2xl font-bold\">{stats.uniqueGroups}</div>\n            <div className=\"text-xs text-muted-foreground\">Grups</div>\n          </div>\n        </div>\n\n        {/* Status Message */}\n        <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n          <div className=\"flex items-start gap-2\">\n            <div className=\"mt-0.5\">\n              {linkingProgress === 100 ? (\n                <div className=\"h-2 w-2 bg-green-500 rounded-full\"></div>\n              ) : linkingProgress > 50 ? (\n                <div className=\"h-2 w-2 bg-yellow-500 rounded-full\"></div>\n              ) : (\n                <div className=\"h-2 w-2 bg-red-500 rounded-full\"></div>\n              )}\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">\n                {linkingProgress === 100 \n                  ? 'Totes les sessions estan vinculades'\n                  : linkingProgress > 50 \n                    ? 'Vinculació parcial completada'\n                    : 'Vinculació deficient detectada'\n                }\n              </p>\n              <p className=\"text-xs text-blue-700 dark:text-blue-300 mt-1\">\n                {linkingProgress === 100 \n                  ? 'Excel·lent! Tots els horaris estan correctament assignats als professors.'\n                  : 'Alguns horaris no s\\'han pogut vincular automàticament. Revisa els noms dels professors.'\n                }\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6885},"client/src/components/WeeklyCalendar.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle, \n  DialogDescription,\n  DialogFooter\n} from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Calendar, \n  CheckCircle, \n  AlertTriangle, \n  XCircle, \n  Clock,\n  MessageCircle\n} from \"lucide-react\";\nimport { \n  calculateExpectedTimes, \n  getAttendanceStatus,\n  type ScheduleSession \n} from \"@/lib/scheduleUtils\";\n\ninterface WeeklyCalendarProps {\n  employeeId: string;\n  language: string;\n}\n\ninterface DayAttendance {\n  date: string;\n  status: 'complete' | 'partial' | 'absent' | 'justified' | 'present-on-time' | 'present-late';\n  checkIn?: string;\n  checkOut?: string;\n  totalHours?: number;\n  justification?: {\n    id: string;\n    reason: string;\n    status: 'pending' | 'approved' | 'rejected';\n    adminResponse?: string;\n  };\n  attendanceValidation?: {\n    entryOnTime: boolean;\n    exitOnTime: boolean;\n    hasIncidents: boolean;\n  };\n}\n\nexport default function WeeklyCalendar({ employeeId, language }: WeeklyCalendarProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedDate, setSelectedDate] = useState<string | null>(null);\n  const [showJustificationModal, setShowJustificationModal] = useState(false);\n  const [justificationReason, setJustificationReason] = useState(\"\");\n  const [currentWeek, setCurrentWeek] = useState(new Date()); // Force refresh by changing this\n\n  // Get current week's Monday at 00:00:00 to prevent constant re-renders\n  const getWeekStart = (date: Date) => {\n    const d = new Date(date);\n    const day = d.getDay();\n    const diff = d.getDate() - day + (day === 0 ? -6 : 1); // Adjust for Sunday\n    d.setDate(diff);\n    d.setHours(0, 0, 0, 0); // Normalize to start of day to prevent infinite loops\n    return d;\n  };\n\n  // Memoize weekStart to prevent recalculation on every render\n  const weekStart = useMemo(() => getWeekStart(currentWeek), [currentWeek]);\n  const weekDays = Array.from({ length: 5 }, (_, i) => {\n    const date = new Date(weekStart);\n    date.setDate(weekStart.getDate() + i);\n    return date;\n  });\n\n  // Memoize the query key to prevent unnecessary re-renders\n  const queryKey = useMemo(() => [\n    \"/api/attendance/weekly\", \n    employeeId, \n    weekStart.toISOString()\n  ], [employeeId, weekStart]);\n\n  // Fetch weekly attendance data with proper caching\n  const { data: weeklyAttendance = [], isLoading } = useQuery<any[]>({\n    queryKey,\n    enabled: !!employeeId,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchOnReconnect: false,\n    staleTime: 0, // No cache - immediate updates for debugging\n    gcTime: 5 * 60 * 1000, // 5 minutes garbage collection  \n    retry: false, // Disable retries to prevent loops\n  });\n\n  // Fetch schedule data for attendance validation\n  const { data: scheduleData = [] } = useQuery<ScheduleSession[]>({\n    queryKey: [\"/api/schedule/weekly\", employeeId, weekStart.toISOString().split('T')[0]],\n    enabled: !!employeeId,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    staleTime: 30 * 60 * 1000, // 30 minutes for schedule data\n  });\n  \n  console.log('[WeeklyCalendar] Rendered with:', { \n    employeeId, \n    weekStart: weekStart.toISOString(), \n    weeklyAttendanceCount: weeklyAttendance?.length,\n    scheduleDataCount: scheduleData?.length\n  });\n\n  // Submit absence justification\n  const justificationMutation = useMutation({\n    mutationFn: async (data: { date: string; reason: string }) => {\n      return await apiRequest(\"POST\", \"/api/absence-justifications\", {\n        employeeId,\n        date: data.date,\n        reason: data.reason,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Justificació enviada\" : \"Justificación enviada\",\n        description: language === \"ca\" \n          ? \"La justificació d'absència ha estat enviada per a revisió\" \n          : \"La justificación de ausencia ha sido enviada para revisión\",\n      });\n      // Invalidate with employee ID for immediate updates\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance/weekly\", employeeId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/absence-justifications\"] });\n      setShowJustificationModal(false);\n      setJustificationReason(\"\");\n      setSelectedDate(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: error.message || (language === \"ca\" \n          ? \"Error enviant la justificació\" \n          : \"Error enviando la justificación\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getDayAttendance = (date: Date): DayAttendance => {\n    const dateStr = date.toISOString().split('T')[0];\n    const attendance = (weeklyAttendance as any[]).find((att: any) => \n      att.date?.split('T')[0] === dateStr\n    );\n\n    // Debug logging for attendance data\n    console.log(`[WeeklyCalendar] Getting attendance for ${dateStr}:`, {\n      weeklyAttendance,\n      foundAttendance: attendance,\n      employeeId\n    });\n\n    if (!attendance) {\n      return { date: dateStr, status: 'absent' };\n    }\n\n    if (attendance.justification) {\n      return {\n        date: dateStr,\n        status: 'justified',\n        checkIn: attendance.checkInTime,\n        checkOut: attendance.checkOutTime,\n        totalHours: attendance.totalHours,\n        justification: attendance.justification\n      };\n    }\n\n    // Calculate expected times for this day\n    const dayOfWeek = date.getDay() === 0 ? 7 : date.getDay(); // Monday = 1\n    const expectedTimes = calculateExpectedTimes(scheduleData, dayOfWeek);\n    \n    // Get attendance status for validation\n    const attendanceStatus = getAttendanceStatus(\n      attendance.checkInTime,\n      attendance.checkOutTime,\n      expectedTimes.expectedEntry,\n      expectedTimes.expectedExit\n    );\n\n    const attendanceValidation = {\n      entryOnTime: attendanceStatus.entryColor === 'green',\n      exitOnTime: attendanceStatus.exitColor === 'green',\n      hasIncidents: attendanceStatus.overallColor === 'red'\n    };\n\n    if (attendance.checkInTime && attendance.checkOutTime) {\n      return {\n        date: dateStr,\n        status: attendanceValidation.hasIncidents ? 'present-late' : 'present-on-time',\n        checkIn: attendance.checkInTime,\n        checkOut: attendance.checkOutTime,\n        totalHours: attendance.totalHours,\n        attendanceValidation\n      };\n    }\n\n    if (attendance.checkInTime && !attendance.checkOutTime) {\n      return {\n        date: dateStr,\n        status: attendanceValidation.entryOnTime === false ? 'present-late' : 'partial',\n        checkIn: attendance.checkInTime,\n        totalHours: attendance.totalHours,\n        attendanceValidation\n      };\n    }\n\n    return { date: dateStr, status: 'absent' };\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'complete':\n      case 'present-on-time':\n        return 'bg-green-100 border-green-300 text-green-800';\n      case 'present-late':\n        return 'bg-red-100 border-red-300 text-red-800';\n      case 'partial':\n        return 'bg-orange-100 border-orange-300 text-orange-800';\n      case 'justified':\n        return 'bg-blue-100 border-blue-300 text-blue-800';\n      case 'absent':\n        return 'bg-gray-100 border-gray-300 text-gray-800';\n      default:\n        return 'bg-gray-100 border-gray-300 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'complete':\n      case 'present-on-time':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case 'present-late':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'partial':\n        return <Clock className=\"h-4 w-4\" />;\n      case 'justified':\n        return <MessageCircle className=\"h-4 w-4\" />;\n      case 'absent':\n        return <XCircle className=\"h-4 w-4\" />;\n      default:\n        return <AlertTriangle className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'complete':\n        return language === \"ca\" ? \"Complet\" : \"Completo\";\n      case 'present-on-time':\n        return language === \"ca\" ? \"Present (OK)\" : \"Presente (OK)\";\n      case 'present-late':\n        return language === \"ca\" ? \"Present (Incidència)\" : \"Presente (Incidencia)\";\n      case 'partial':\n        return language === \"ca\" ? \"Parcial\" : \"Parcial\";\n      case 'justified':\n        return language === \"ca\" ? \"Justificat\" : \"Justificado\";\n      case 'absent':\n        return language === \"ca\" ? \"Absent\" : \"Ausente\";\n      default:\n        return language === \"ca\" ? \"Desconegut\" : \"Desconocido\";\n    }\n  };\n\n  const getDayName = (date: Date) => {\n    const days = language === \"ca\" \n      ? ['Dilluns', 'Dimarts', 'Dimecres', 'Dijous', 'Divendres']\n      : ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'];\n    return days[date.getDay() - 1];\n  };\n\n  const handleDayClick = (date: Date, attendance: DayAttendance) => {\n    if (attendance.status === 'absent') {\n      setSelectedDate(attendance.date);\n      setShowJustificationModal(true);\n    }\n  };\n\n  const handleSubmitJustification = () => {\n    if (selectedDate && justificationReason.trim()) {\n      justificationMutation.mutate({\n        date: selectedDate,\n        reason: justificationReason.trim()\n      });\n    }\n  };\n\n  const goToPreviousWeek = () => {\n    const prevWeek = new Date(currentWeek);\n    prevWeek.setDate(currentWeek.getDate() - 7);\n    setCurrentWeek(prevWeek);\n  };\n\n  const goToNextWeek = () => {\n    const nextWeek = new Date(currentWeek);\n    nextWeek.setDate(currentWeek.getDate() + 7);\n    setCurrentWeek(nextWeek);\n  };\n\n  const goToCurrentWeek = () => {\n    setCurrentWeek(new Date());\n  };\n\n  if (isLoading) {\n    return (\n      <Card data-testid=\"weekly-calendar-loading\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Calendar className=\"mr-2 h-5 w-5\" />\n            {language === \"ca\" ? \"Calendari Setmanal\" : \"Calendario Semanal\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse\">\n            <div className=\"grid grid-cols-5 gap-4\">\n              {[1, 2, 3, 4, 5].map(i => (\n                <div key={i} className=\"h-32 bg-gray-200 rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card data-testid=\"weekly-calendar\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center\">\n            <Calendar className=\"mr-2 h-5 w-5\" />\n            {language === \"ca\" ? \"Calendari Setmanal\" : \"Calendario Semanal\"}\n          </CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={goToPreviousWeek}\n              data-testid=\"previous-week-button\"\n            >\n              ←\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={goToCurrentWeek}\n              data-testid=\"current-week-button\"\n            >\n              {language === \"ca\" ? \"Avui\" : \"Hoy\"}\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={goToNextWeek}\n              data-testid=\"next-week-button\"\n            >\n              →\n            </Button>\n          </div>\n        </div>\n        <p className=\"text-sm text-gray-600\">\n          {weekStart.toLocaleDateString(language === \"ca\" ? \"ca-ES\" : \"es-ES\", {\n            day: 'numeric',\n            month: 'long',\n            year: 'numeric'\n          })} - {weekDays[4].toLocaleDateString(language === \"ca\" ? \"ca-ES\" : \"es-ES\", {\n            day: 'numeric',\n            month: 'long',\n            year: 'numeric'\n          })}\n        </p>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-5 gap-4\">\n          {weekDays.map((date, index) => {\n            const attendance = getDayAttendance(date);\n            return (\n              <div\n                key={index}\n                className={`p-4 rounded-lg border-2 cursor-pointer transition-all hover:shadow-md ${getStatusColor(attendance.status)} ${\n                  attendance.status === 'absent' ? 'hover:border-red-400' : ''\n                }`}\n                onClick={() => handleDayClick(date, attendance)}\n                data-testid={`calendar-day-${date.toISOString().split('T')[0]}`}\n              >\n                <div className=\"text-center\">\n                  <div className=\"font-medium text-sm mb-1\">\n                    {getDayName(date)}\n                  </div>\n                  <div className=\"text-lg font-bold mb-2\">\n                    {date.getDate()}\n                  </div>\n                  <div className=\"flex items-center justify-center mb-2\">\n                    {getStatusIcon(attendance.status)}\n                  </div>\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {getStatusText(attendance.status)}\n                  </Badge>\n                  {attendance.checkIn && (\n                    <div className=\"mt-2 text-xs\">\n                      <div>\n                        <strong>{language === \"ca\" ? \"Entrada:\" : \"Entrada:\"}</strong> {attendance.checkIn}\n                      </div>\n                      {attendance.checkOut && (\n                        <div>\n                          <strong>{language === \"ca\" ? \"Sortida:\" : \"Salida:\"}</strong> {attendance.checkOut}\n                        </div>\n                      )}\n                      {attendance.totalHours && (\n                        <div className=\"mt-1\">\n                          <strong>{language === \"ca\" ? \"Total:\" : \"Total:\"}</strong> {attendance.totalHours}h\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  {attendance.justification && (\n                    <div className=\"mt-2\">\n                      <Badge \n                        variant={attendance.justification.status === 'approved' ? 'default' : \n                               attendance.justification.status === 'rejected' ? 'destructive' : 'secondary'}\n                        className=\"text-xs\"\n                      >\n                        {attendance.justification.status === 'approved' \n                          ? (language === \"ca\" ? \"Aprovat\" : \"Aprobado\")\n                          : attendance.justification.status === 'rejected'\n                          ? (language === \"ca\" ? \"Rebutjat\" : \"Rechazado\")\n                          : (language === \"ca\" ? \"Pendent\" : \"Pendiente\")}\n                      </Badge>\n                    </div>\n                  )}\n                  {attendance.status === 'absent' && (\n                    <div className=\"mt-2 text-xs text-red-600\">\n                      {language === \"ca\" ? \"Clic per justificar\" : \"Click para justificar\"}\n                    </div>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Legend */}\n        <div className=\"mt-6 pt-4 border-t\">\n          <h4 className=\"text-sm font-medium mb-3\">\n            {language === \"ca\" ? \"Llegenda\" : \"Leyenda\"}\n          </h4>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n            <div className=\"flex items-center space-x-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span className=\"text-sm\">{language === \"ca\" ? \"Complet\" : \"Completo\"}</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"h-4 w-4 text-yellow-600\" />\n              <span className=\"text-sm\">{language === \"ca\" ? \"Parcial\" : \"Parcial\"}</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <MessageCircle className=\"h-4 w-4 text-blue-600\" />\n              <span className=\"text-sm\">{language === \"ca\" ? \"Justificat\" : \"Justificado\"}</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <XCircle className=\"h-4 w-4 text-red-600\" />\n              <span className=\"text-sm\">{language === \"ca\" ? \"Absent\" : \"Ausente\"}</span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n\n      {/* Absence Justification Modal */}\n      <Dialog open={showJustificationModal} onOpenChange={setShowJustificationModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>\n              {language === \"ca\" ? \"Justificar Absència\" : \"Justificar Ausencia\"}\n            </DialogTitle>\n            <DialogDescription>\n              {language === \"ca\" \n                ? `Proporciona una justificació per l'absència del ${selectedDate ? new Date(selectedDate).toLocaleDateString(\"ca-ES\") : \"\"}`\n                : `Proporciona una justificación para la ausencia del ${selectedDate ? new Date(selectedDate).toLocaleDateString(\"es-ES\") : \"\"}`}\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"justification-reason\">\n                {language === \"ca\" ? \"Motiu de l'absència\" : \"Motivo de la ausencia\"}\n              </Label>\n              <Textarea\n                id=\"justification-reason\"\n                value={justificationReason}\n                onChange={(e) => setJustificationReason(e.target.value)}\n                placeholder={language === \"ca\" \n                  ? \"Descriu el motiu de l'absència...\" \n                  : \"Describe el motivo de la ausencia...\"}\n                rows={4}\n                data-testid=\"justification-reason-input\"\n              />\n            </div>\n          </div>\n\n          <DialogFooter className=\"flex space-x-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setShowJustificationModal(false);\n                setJustificationReason(\"\");\n                setSelectedDate(null);\n              }}\n              data-testid=\"cancel-justification\"\n            >\n              {language === \"ca\" ? \"Cancel·lar\" : \"Cancelar\"}\n            </Button>\n            <Button\n              onClick={handleSubmitJustification}\n              disabled={!justificationReason.trim() || justificationMutation.isPending}\n              data-testid=\"submit-justification\"\n            >\n              {justificationMutation.isPending\n                ? (language === \"ca\" ? \"Enviant...\" : \"Enviando...\")\n                : (language === \"ca\" ? \"Enviar Justificació\" : \"Enviar Justificación\")}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </Card>\n  );\n}","size_bytes":19345},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/hooks/useLanguage.ts":{"content":"import { create } from \"zustand\";\n\ninterface LanguageState {\n  language: \"ca\" | \"es\";\n  setLanguage: (lang: \"ca\" | \"es\") => void;\n}\n\nexport const useLanguage = create<LanguageState>((set) => ({\n  language: \"ca\",\n  setLanguage: (lang) => set({ language: lang }),\n}));\n","size_bytes":267},"client/src/hooks/usePermissions.ts":{"content":"import { useAuth } from './useAuth';\n\nexport type UserRole = 'superadmin' | 'admin' | 'employee';\n\nexport interface Permissions {\n  // Dashboard\n  canViewAllInstitutions: boolean;\n  canViewInstitutionDashboard: boolean;\n  canViewPersonalDashboard: boolean;\n\n  // Employee management\n  canCreateEmployee: boolean;\n  canEditEmployee: boolean;\n  canDeleteEmployee: boolean;\n  canViewEmployees: boolean;\n  canImportSchedules: boolean;\n\n  // Institution management\n  canCreateInstitution: boolean;\n  canEditInstitution: boolean;\n  canViewInstitutions: boolean;\n\n  // Academic years\n  canCreateAcademicYear: boolean;\n  canEditAcademicYear: boolean;\n\n  // Attendance\n  canViewAllAttendance: boolean;\n  canViewOwnAttendance: boolean;\n  canEditAttendance: boolean;\n  canManualCheckIn: boolean;\n\n  // Reports\n  canGenerateInstitutionReports: boolean;\n  canGeneratePersonalReports: boolean;\n  canExportData: boolean;\n\n  // Alerts\n  canManageAlerts: boolean;\n  canViewAlerts: boolean;\n  canResolveAlerts: boolean;\n\n  // Settings\n  canEditSettings: boolean;\n  canManageUsers: boolean;\n  canViewSecuritySettings: boolean;\n\n  // Schedules\n  canEditSchedules: boolean;\n  canViewSchedules: boolean;\n\n  // Absences\n  canApproveAbsences: boolean;\n  canRequestAbsence: boolean;\n  canViewAbsences: boolean;\n}\n\nexport function usePermissions(): Permissions {\n  const { user } = useAuth();\n  const role = user?.role as UserRole;\n\n  const getPermissions = (userRole: UserRole): Permissions => {\n    switch (userRole) {\n      case 'superadmin':\n        return {\n          // Dashboard\n          canViewAllInstitutions: true,\n          canViewInstitutionDashboard: true,\n          canViewPersonalDashboard: true,\n\n          // Employee management\n          canCreateEmployee: true,\n          canEditEmployee: true,\n          canDeleteEmployee: true,\n          canViewEmployees: true,\n          canImportSchedules: true,\n\n          // Institution management\n          canCreateInstitution: true,\n          canEditInstitution: true,\n          canViewInstitutions: true,\n\n          // Academic years\n          canCreateAcademicYear: true,\n          canEditAcademicYear: true,\n\n          // Attendance\n          canViewAllAttendance: true,\n          canViewOwnAttendance: true,\n          canEditAttendance: true,\n          canManualCheckIn: true,\n\n          // Reports\n          canGenerateInstitutionReports: true,\n          canGeneratePersonalReports: true,\n          canExportData: true,\n\n          // Alerts\n          canManageAlerts: true,\n          canViewAlerts: true,\n          canResolveAlerts: true,\n\n          // Settings\n          canEditSettings: true,\n          canManageUsers: true,\n          canViewSecuritySettings: true,\n\n          // Schedules\n          canEditSchedules: true,\n          canViewSchedules: true,\n\n          // Absences\n          canApproveAbsences: true,\n          canRequestAbsence: true,\n          canViewAbsences: true,\n        };\n\n      case 'admin':\n        return {\n          // Dashboard\n          canViewAllInstitutions: false,\n          canViewInstitutionDashboard: true,\n          canViewPersonalDashboard: true,\n\n          // Employee management\n          canCreateEmployee: true,\n          canEditEmployee: true,\n          canDeleteEmployee: false, // Solo suspender, no eliminar\n          canViewEmployees: true,\n          canImportSchedules: true,\n\n          // Institution management\n          canCreateInstitution: false,\n          canEditInstitution: true, // Solo su institución\n          canViewInstitutions: false,\n\n          // Academic years\n          canCreateAcademicYear: true,\n          canEditAcademicYear: true,\n\n          // Attendance\n          canViewAllAttendance: true, // Solo de su institución\n          canViewOwnAttendance: true,\n          canEditAttendance: true,\n          canManualCheckIn: true,\n\n          // Reports\n          canGenerateInstitutionReports: true, // Solo de su institución\n          canGeneratePersonalReports: true,\n          canExportData: true,\n\n          // Alerts\n          canManageAlerts: true,\n          canViewAlerts: true,\n          canResolveAlerts: true,\n\n          // Settings\n          canEditSettings: true, // Solo de su institución\n          canManageUsers: true, // Solo usuarios de su institución\n          canViewSecuritySettings: false,\n\n          // Schedules\n          canEditSchedules: true,\n          canViewSchedules: true,\n\n          // Absences\n          canApproveAbsences: true,\n          canRequestAbsence: true,\n          canViewAbsences: true,\n        };\n\n      case 'employee':\n        return {\n          // Dashboard\n          canViewAllInstitutions: false,\n          canViewInstitutionDashboard: false,\n          canViewPersonalDashboard: true,\n\n          // Employee management\n          canCreateEmployee: false,\n          canEditEmployee: false, // Solo datos personales básicos\n          canDeleteEmployee: false,\n          canViewEmployees: false,\n          canImportSchedules: false,\n\n          // Institution management\n          canCreateInstitution: false,\n          canEditInstitution: false,\n          canViewInstitutions: false,\n\n          // Academic years\n          canCreateAcademicYear: false,\n          canEditAcademicYear: false,\n\n          // Attendance\n          canViewAllAttendance: false,\n          canViewOwnAttendance: true,\n          canEditAttendance: false,\n          canManualCheckIn: true, // Solo check-in/check-out\n\n          // Reports\n          canGenerateInstitutionReports: false,\n          canGeneratePersonalReports: true,\n          canExportData: false, // Solo sus propios datos\n\n          // Alerts\n          canManageAlerts: false,\n          canViewAlerts: false, // Solo alertas que le afecten\n          canResolveAlerts: false,\n\n          // Settings\n          canEditSettings: false,\n          canManageUsers: false,\n          canViewSecuritySettings: false,\n\n          // Schedules\n          canEditSchedules: false,\n          canViewSchedules: true, // Solo su horario\n\n          // Absences\n          canApproveAbsences: false,\n          canRequestAbsence: true,\n          canViewAbsences: true, // Solo sus propias ausencias\n        };\n\n      default:\n        // Permisos por defecto (ninguno)\n        return {\n          canViewAllInstitutions: false,\n          canViewInstitutionDashboard: false,\n          canViewPersonalDashboard: false,\n          canCreateEmployee: false,\n          canEditEmployee: false,\n          canDeleteEmployee: false,\n          canViewEmployees: false,\n          canImportSchedules: false,\n          canCreateInstitution: false,\n          canEditInstitution: false,\n          canViewInstitutions: false,\n          canCreateAcademicYear: false,\n          canEditAcademicYear: false,\n          canViewAllAttendance: false,\n          canViewOwnAttendance: false,\n          canEditAttendance: false,\n          canManualCheckIn: false,\n          canGenerateInstitutionReports: false,\n          canGeneratePersonalReports: false,\n          canExportData: false,\n          canManageAlerts: false,\n          canViewAlerts: false,\n          canResolveAlerts: false,\n          canEditSettings: false,\n          canManageUsers: false,\n          canViewSecuritySettings: false,\n          canEditSchedules: false,\n          canViewSchedules: false,\n          canApproveAbsences: false,\n          canRequestAbsence: false,\n          canViewAbsences: false,\n        };\n    }\n  };\n\n  return getPermissions(role || 'employee');\n}\n\nexport function useRoleDisplay() {\n  const { user } = useAuth();\n  \n  const getRoleDisplayName = (role: string, language: string) => {\n    const roleNames = {\n      ca: {\n        superadmin: 'Superadministrador',\n        admin: 'Administrador',\n        employee: 'Professor/a',\n      },\n      es: {\n        superadmin: 'Superadministrador',\n        admin: 'Administrador', \n        employee: 'Profesor/a',\n      }\n    };\n    \n    return roleNames[language as keyof typeof roleNames]?.[role as keyof typeof roleNames.ca] || role;\n  };\n\n  return { getRoleDisplayName };\n}","size_bytes":8066},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/i18n.ts":{"content":"export const translations = {\n  ca: {\n    // Navigation\n    \"dashboard\": \"Tauler de control\",\n    \"employees\": \"Personal\",\n    \"attendance\": \"Fitxatge\",\n    \"alerts\": \"Alertes\",\n    \"reports\": \"Informes\",\n    \"settings\": \"Configuració\",\n    \n    // Dashboard\n    \"present_staff\": \"Personal present\",\n    \"delays_today\": \"Retards avui\",\n    \"absences\": \"Absències\",\n    \"active_guards\": \"Guàrdies actives\",\n    \"quick_actions\": \"Accions ràpides\",\n    \"recent_activity\": \"Activitat recent\",\n    \"weekly_attendance\": \"Assistència setmanal\",\n    \n    // Employee management\n    \"employee_management\": \"Gestió de personal\",\n    \"manager_employees\": \"Gestió de personal\",\n    \"manage_employees\": \"Gestió de personal\",\n    \"add_employee\": \"Afegir empleat\",\n    \"search\": \"Buscar\",\n    \"department\": \"Departament\",\n    \"status\": \"Estat\",\n    \"filter\": \"Filtrar\",\n    \"employee_list\": \"Llista d'empleats\",\n    \"schedule\": \"Horari\",\n    \"actions\": \"Accions\",\n    \n    // User roles\n    \"superadmin\": \"Superadministrador\",\n    \"admin\": \"Administrador\", \n    \"employee\": \"Empleat\",\n    \n    // Role abbreviations\n    \"superadmin_short\": \"SA\",\n    \"admin_short\": \"Admin\",\n    \"employee_short\": \"Emp\",\n    \n    // Role dropdown options\n    \"role_employee\": \"Empleat\",\n    \"role_admin\": \"Administrador\", \n    \"role_superadmin\": \"Superadministrador\",\n    \n    // Attendance\n    \"quick_checkin\": \"Fitxatge ràpid\",\n    \"current_time\": \"Hora actual\",\n    \"checkin_entry\": \"Fitxar entrada\",\n    \"checkin_exit\": \"Fitxar sortida\",\n    \"alternative_methods\": \"Mètodes alternatius\",\n    \"qr_code\": \"Codi QR\",\n    \"nfc_card\": \"Targeta NFC\",\n    \"todays_schedule\": \"Horari d'avui\",\n    \n    // Settings\n    \"center_configuration\": \"Configuració del centre\",\n    \"center_name\": \"Nom del centre\",\n    \"academic_year\": \"Curs acadèmic\",\n    \"timezone\": \"Zona horària\",\n    \"default_language\": \"Idioma per defecte\",\n    \"data_retention\": \"Política de retenció de dades\",\n    \"user_management\": \"Gestió d'usuaris\",\n    \n    // Common\n    \"save\": \"Guardar\",\n    \"cancel\": \"Cancel·lar\",\n    \"edit\": \"Editar\",\n    \"delete\": \"Eliminar\",\n    \"create\": \"Crear\",\n    \"close\": \"Tancar\",\n    \"yes\": \"Sí\",\n    \"no\": \"No\",\n    \"loading\": \"Carregant...\",\n    \"error\": \"Error\",\n    \"success\": \"Èxit\",\n    \n    // Forms\n    \"full_name\": \"Nom complet\",\n    \"email\": \"Correu electrònic\",\n    \"phone\": \"Telèfon\",\n    \"contract_type\": \"Tipus de contracte\",\n    \"start_date\": \"Data d'inici\",\n    \"end_date\": \"Data de fi\",\n    \n    // Status\n    \"active\": \"Actiu\",\n    \"inactive\": \"Inactiu\",\n    \"temporary_leave\": \"Baixa temporal\",\n    \n    // Contract types\n    \"full_time\": \"Jornada completa\",\n    \"part_time\": \"Jornada parcial\",\n    \"substitute\": \"Substitució\",\n    \n    // Days of week\n    \"monday\": \"Dilluns\",\n    \"tuesday\": \"Dimarts\",\n    \"wednesday\": \"Dimecres\",\n    \"thursday\": \"Dijous\",\n    \"friday\": \"Divendres\",\n    \n    // Departments\n    \"primary_education\": \"Educació Primària\",\n    \"secondary_education\": \"Educació Secundària\",\n    \"administration\": \"Administració\",\n    \n    // Employee details\n    \"employee_details\": \"Detalls de l'empleat\",\n    \"personal_information\": \"Informació personal\",\n    \"attendance_summary\": \"Resum d'assistència\",\n    \"monthly_summary\": \"Resum mensual\",\n    \"total_hours\": \"Hores totals\",\n    \"month_hours\": \"Hores del mes\",\n    \"work_days\": \"Dies treballats\",\n    \"punctuality\": \"Puntualitat\",\n    \"avg_daily_hours\": \"Mitjana diària\",\n    \"last_attendance\": \"Última assistència\",\n    \"attendance_history\": \"Historial d'assistència\",\n    \"on_time\": \"Puntual\",\n    \"slightly_late\": \"Lleuger retard\",\n    \"late\": \"Retard\",\n    \"very_late_absent\": \"Molt tard/absent\",\n    \"check_in\": \"Entrada\",\n    \"check_out\": \"Sortida\",\n    \"no_attendance\": \"Sense registre\",\n    \"weekend\": \"Cap de setmana\",\n    \"actual_hours\": \"Hores reals\", \n    \"hours_difference\": \"Diferència d'hores\",\n    \"scheduled_time\": \"Horari programat\",\n    \"actual_time\": \"Marcatge real\",\n    \"day_summary\": \"Resum del dia\",\n    \"punctual\": \"Puntual\",\n    \"delay\": \"Retard\",\n    \"logout\": \"Sortir\",\n    \"low\": \"Baix\",\n    \"medium\": \"Mitjà\",\n    \"high\": \"Alt\",\n    \"urgent\": \"Urgent\",\n    \"normal\": \"Normal\",\n  },\n  es: {\n    // Navigation\n    \"dashboard\": \"Panel de control\",\n    \"employees\": \"Personal\",\n    \"attendance\": \"Fichaje\",\n    \"alerts\": \"Alertas\",\n    \"reports\": \"Informes\",\n    \"settings\": \"Configuración\",\n    \n    // Dashboard\n    \"present_staff\": \"Personal presente\",\n    \"delays_today\": \"Retrasos hoy\",\n    \"absences\": \"Ausencias\",\n    \"active_guards\": \"Guardias activas\",\n    \"quick_actions\": \"Acciones rápidas\",\n    \"recent_activity\": \"Actividad reciente\",\n    \"weekly_attendance\": \"Asistencia semanal\",\n    \n    // Employee management\n    \"employee_management\": \"Gestión de personal\",\n    \"manager_employees\": \"Gestión de personal\",\n    \"manage_employees\": \"Gestión de personal\",\n    \"add_employee\": \"Añadir empleado\",\n    \"search\": \"Buscar\",\n    \"department\": \"Departamento\",\n    \"status\": \"Estado\",\n    \"filter\": \"Filtrar\",\n    \"employee_list\": \"Lista de empleados\",\n    \"schedule\": \"Horario\",\n    \"actions\": \"Acciones\",\n    \n    // User roles\n    \"superadmin\": \"Superadministrador\",\n    \"admin\": \"Administrador\",\n    \"employee\": \"Empleado\",\n    \n    // Role abbreviations\n    \"superadmin_short\": \"SA\",\n    \"admin_short\": \"Admin\", \n    \"employee_short\": \"Emp\",\n    \n    // Role dropdown options\n    \"role_employee\": \"Empleado\",\n    \"role_admin\": \"Administrador\",\n    \"role_superadmin\": \"Superadministrador\",\n    \n    // Attendance\n    \"quick_checkin\": \"Fichaje rápido\",\n    \"current_time\": \"Hora actual\",\n    \"checkin_entry\": \"Fichar entrada\",\n    \"checkin_exit\": \"Fichar salida\",\n    \"alternative_methods\": \"Métodos alternativos\",\n    \"qr_code\": \"Código QR\",\n    \"nfc_card\": \"Tarjeta NFC\",\n    \"todays_schedule\": \"Horario de hoy\",\n    \n    // Settings\n    \"center_configuration\": \"Configuración del centro\",\n    \"center_name\": \"Nombre del centro\",\n    \"academic_year\": \"Curso académico\",\n    \"timezone\": \"Zona horaria\",\n    \"default_language\": \"Idioma por defecto\",\n    \"data_retention\": \"Política de retención de datos\",\n    \"user_management\": \"Gestión de usuarios\",\n    \n    // Common\n    \"save\": \"Guardar\",\n    \"cancel\": \"Cancelar\",\n    \"edit\": \"Editar\",\n    \"delete\": \"Eliminar\",\n    \"create\": \"Crear\",\n    \"close\": \"Cerrar\",\n    \"yes\": \"Sí\",\n    \"no\": \"No\",\n    \"loading\": \"Cargando...\",\n    \"error\": \"Error\",\n    \"success\": \"Éxito\",\n    \n    // Forms\n    \"full_name\": \"Nombre completo\",\n    \"email\": \"Correo electrónico\",\n    \"phone\": \"Teléfono\",\n    \"contract_type\": \"Tipo de contrato\",\n    \"start_date\": \"Fecha de inicio\",\n    \"end_date\": \"Fecha de fin\",\n    \n    // Status\n    \"active\": \"Activo\",\n    \"inactive\": \"Inactivo\",\n    \"temporary_leave\": \"Baja temporal\",\n    \n    // Contract types\n    \"full_time\": \"Jornada completa\",\n    \"part_time\": \"Jornada parcial\",\n    \"substitute\": \"Sustitución\",\n    \n    // Days of week\n    \"monday\": \"Lunes\",\n    \"tuesday\": \"Martes\",\n    \"wednesday\": \"Miércoles\",\n    \"thursday\": \"Jueves\",\n    \"friday\": \"Viernes\",\n    \n    // Departments\n    \"primary_education\": \"Educación Primaria\",\n    \"secondary_education\": \"Educación Secundaria\",\n    \"administration\": \"Administración\",\n    \n    // Employee details\n    \"employee_details\": \"Detalles del empleado\",\n    \"personal_information\": \"Información personal\",\n    \"attendance_summary\": \"Resumen de asistencia\",\n    \"monthly_summary\": \"Resumen mensual\",\n    \"total_hours\": \"Horas totales\",\n    \"month_hours\": \"Horas del mes\",\n    \"work_days\": \"Días trabajados\",\n    \"punctuality\": \"Puntualidad\",\n    \"avg_daily_hours\": \"Media diaria\",\n    \"last_attendance\": \"Última asistencia\",\n    \"attendance_history\": \"Historial de asistencia\",\n    \"on_time\": \"Puntual\",\n    \"slightly_late\": \"Ligero retraso\",\n    \"late\": \"Retraso\",\n    \"very_late_absent\": \"Muy tarde/ausente\",\n    \"check_in\": \"Entrada\",\n    \"check_out\": \"Salida\",\n    \"no_attendance\": \"Sin registro\",\n    \"weekend\": \"Fin de semana\",\n    \"actual_hours\": \"Horas reales\",\n    \"hours_difference\": \"Diferencia de horas\", \n    \"scheduled_time\": \"Horario programado\",\n    \"actual_time\": \"Marcaje real\",\n    \"day_summary\": \"Resumen del día\",\n    \"punctual\": \"Puntual\",\n    \"delay\": \"Retraso\", \n    \"logout\": \"Salir\",\n    \"low\": \"Bajo\",\n    \"medium\": \"Medio\",\n    \"high\": \"Alto\", \n    \"urgent\": \"Urgente\", \n    \"normal\": \"Normal\",\n  },\n};\n\nexport const t = (key: string, language: \"ca\" | \"es\" = \"ca\"): string => {\n  return translations[language][key as keyof typeof translations.ca] || key;\n};\n","size_bytes":8573},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  console.log(\"🌐 API REQUEST:\", method, url);\n  if (data) console.log(\"🌐 API DATA:\", data);\n  \n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  console.log(\"🌐 API RESPONSE STATUS:\", res.status);\n  console.log(\"🌐 API RESPONSE OK:\", res.ok);\n  \n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1591},"client/src/lib/scheduleUtils.ts":{"content":"import { format } from \"date-fns\";\n\nexport interface ScheduleSession {\n  id: string;\n  dayOfWeek: number;\n  hourPeriod: number;\n  subjectCode: string;\n  subjectName: string;\n  groupCode: string;\n  classroomCode: string;\n  isLectiveHour: boolean;\n}\n\nexport interface ExpectedTimes {\n  expectedEntry: string | null;\n  expectedExit: string | null;\n  hasScheduleToday: boolean;\n}\n\n// Institut Bitàcola time periods mapping\nexport const TIME_PERIODS = {\n  1: { start: \"08:00\", end: \"09:00\" },\n  2: { start: \"09:00\", end: \"10:00\" },\n  3: { start: \"10:00\", end: \"11:00\" },\n  4: { start: \"11:30\", end: \"12:30\" }, // després del pati 11:00-11:30\n  5: { start: \"12:30\", end: \"13:30\" },\n  6: { start: \"13:30\", end: \"14:30\" },\n  7: { start: \"15:30\", end: \"16:30\" }, // després del dinar 14:30-15:30\n  8: { start: \"16:30\", end: \"17:30\" }\n};\n\n/**\n * Calculate expected entry and exit times for a teacher based on their schedule for a specific day\n */\nexport function calculateExpectedTimes(scheduleData: ScheduleSession[], dayOfWeek: number): ExpectedTimes {\n  if (!scheduleData || scheduleData.length === 0) {\n    return {\n      expectedEntry: null,\n      expectedExit: null,\n      hasScheduleToday: false\n    };\n  }\n\n  // Filter sessions for the specific day\n  const daySchedule = scheduleData.filter(session => session.dayOfWeek === dayOfWeek);\n\n  if (daySchedule.length === 0) {\n    return {\n      expectedEntry: null,\n      expectedExit: null,\n      hasScheduleToday: false\n    };\n  }\n\n  // Find the earliest hour period for entry time\n  const earliestHour = Math.min(...daySchedule.map(session => session.hourPeriod));\n  \n  // Find the latest hour period for exit time\n  const latestHour = Math.max(...daySchedule.map(session => session.hourPeriod));\n\n  const expectedEntry = TIME_PERIODS[earliestHour as keyof typeof TIME_PERIODS]?.start || null;\n  const expectedExit = TIME_PERIODS[latestHour as keyof typeof TIME_PERIODS]?.end || null;\n\n  return {\n    expectedEntry,\n    expectedExit,\n    hasScheduleToday: true\n  };\n}\n\n/**\n * Check if we're in production environment\n */\nexport function isProduction(): boolean {\n  const url = window.location.hostname;\n  return !url.includes('replit.dev') && !url.includes('localhost') && !url.includes('127.0.0.1');\n}\n\n/**\n * Compare actual check-in/out time with expected times and return status\n */\nexport interface AttendanceStatus {\n  entryStatus: 'on-time' | 'late' | 'early' | 'missing';\n  exitStatus: 'on-time' | 'early' | 'late' | 'missing';\n  overallStatus: 'complete-ok' | 'complete-with-issues' | 'partial' | 'absent';\n  entryColor: 'green' | 'red' | 'gray';\n  exitColor: 'green' | 'red' | 'gray';\n  overallColor: 'green' | 'red' | 'orange' | 'gray';\n}\n\nexport function getAttendanceStatus(\n  checkInTime: string | null,\n  checkOutTime: string | null,\n  expectedEntry: string | null,\n  expectedExit: string | null\n): AttendanceStatus {\n  const status: AttendanceStatus = {\n    entryStatus: 'missing',\n    exitStatus: 'missing',\n    overallStatus: 'absent',\n    entryColor: 'gray',\n    exitColor: 'gray',\n    overallColor: 'gray'\n  };\n\n  // Parse expected times for comparison\n  const parseTime = (timeStr: string) => {\n    const [hours, minutes] = timeStr.split(':').map(Number);\n    return hours * 60 + minutes; // Convert to minutes since midnight\n  };\n\n  const parseDateTime = (dateTimeStr: string) => {\n    const date = new Date(dateTimeStr);\n    return date.getHours() * 60 + date.getMinutes(); // Convert to minutes since midnight\n  };\n\n  // Check entry status\n  if (checkInTime && expectedEntry) {\n    const actualEntryMinutes = parseDateTime(checkInTime);\n    const expectedEntryMinutes = parseTime(expectedEntry);\n    \n    if (actualEntryMinutes <= expectedEntryMinutes) {\n      status.entryStatus = 'early'; // Before or on time = green\n      status.entryColor = 'green';\n    } else {\n      status.entryStatus = 'late'; // After expected time = late but present\n      status.entryColor = 'red';\n    }\n  } else if (checkInTime) {\n    status.entryStatus = 'on-time';\n    status.entryColor = 'green';\n  }\n\n  // Check exit status\n  if (checkOutTime && expectedExit) {\n    const actualExitMinutes = parseDateTime(checkOutTime);\n    const expectedExitMinutes = parseTime(expectedExit);\n    \n    if (actualExitMinutes < expectedExitMinutes) {\n      status.exitStatus = 'early'; // Before expected time = red\n      status.exitColor = 'red';\n    } else {\n      status.exitStatus = 'on-time'; // After expected time = green\n      status.exitColor = 'green';\n    }\n  } else if (checkOutTime) {\n    status.exitStatus = 'on-time';\n    status.exitColor = 'green';\n  }\n\n  // Determine overall status\n  if (checkInTime && checkOutTime) {\n    if (status.entryColor === 'green' && status.exitColor === 'green') {\n      status.overallStatus = 'complete-ok';\n      status.overallColor = 'green';\n    } else {\n      status.overallStatus = 'complete-with-issues';\n      status.overallColor = 'red';\n    }\n  } else if (checkInTime) {\n    status.overallStatus = 'partial';\n    status.overallColor = status.entryColor === 'red' ? 'red' : 'orange';\n  } else {\n    status.overallStatus = 'absent';\n    status.overallColor = 'gray';\n  }\n\n  return status;\n}\n\n/**\n * Get today's day of week (Monday = 1, Tuesday = 2, etc.)\n */\nexport function getTodayDayOfWeek(): number {\n  const today = new Date();\n  const dayOfWeek = today.getDay();\n  return dayOfWeek === 0 ? 7 : dayOfWeek; // Sunday = 7, Monday = 1\n}\n\n/**\n * Check if user has already checked in/out today (for production restriction)\n */\nexport function hasCheckedInToday(attendanceRecords: any[]): boolean {\n  const today = format(new Date(), 'yyyy-MM-dd');\n  return attendanceRecords.some(record => \n    record.type === 'check_in' && \n    format(new Date(record.timestamp), 'yyyy-MM-dd') === today\n  );\n}\n\nexport function hasCheckedOutToday(attendanceRecords: any[]): boolean {\n  const today = format(new Date(), 'yyyy-MM-dd');\n  return attendanceRecords.some(record => \n    record.type === 'check_out' && \n    format(new Date(record.timestamp), 'yyyy-MM-dd') === today\n  );\n}","size_bytes":6060},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AcademicYearManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { t } from \"@/lib/i18n\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Plus, Edit, Trash2, Calendar, BookOpen } from \"lucide-react\";\nimport type { AcademicYear, InsertAcademicYear } from \"@shared/schema\";\n\nexport default function AcademicYearManagement() {\n  const { language } = useLanguage();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingYear, setEditingYear] = useState<AcademicYear | null>(null);\n  const [formData, setFormData] = useState<Partial<InsertAcademicYear>>({\n    name: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    isActive: false\n  });\n\n  const institutionId = user?.institutionId;\n\n  const { data: academicYears = [], isLoading } = useQuery<AcademicYear[]>({\n    queryKey: [\"/api/academic-years\", institutionId],\n    enabled: !!institutionId && (user?.role === \"admin\" || user?.role === \"superadmin\"),\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertAcademicYear) => {\n      return await apiRequest(\"POST\", \"/api/academic-years\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/academic-years\"] });\n      toast({\n        title: t(\"success\", language),\n        description: language === \"ca\" ? \"Curs acadèmic creat correctament\" : \"Curso académico creado correctamente\",\n      });\n      setIsCreateDialogOpen(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\", language),\n        description: language === \"ca\" ? \"Error creant el curs acadèmic\" : \"Error creando el curso académico\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      isActive: false\n    });\n    setEditingYear(null);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (formData.name && formData.startDate && formData.endDate && institutionId) {\n      createMutation.mutate({\n        ...formData,\n        institutionId\n      } as InsertAcademicYear);\n    }\n  };\n\n  // Generate academic year suggestions\n  const generateYearSuggestions = () => {\n    const currentYear = new Date().getFullYear();\n    return [\n      {\n        name: `${currentYear}-${currentYear + 1}`,\n        startDate: `${currentYear}-09-15`,\n        endDate: `${currentYear + 1}-06-22`\n      },\n      {\n        name: `${currentYear + 1}-${currentYear + 2}`,\n        startDate: `${currentYear + 1}-09-15`,\n        endDate: `${currentYear + 2}-06-22`\n      }\n    ];\n  };\n\n  // Check if user has admin access\n  if (!institutionId || (user?.role !== \"admin\" && user?.role !== \"superadmin\")) {\n    return (\n      <div className=\"p-6\">\n        <Card>\n          <CardContent className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center\">\n              <BookOpen className=\"mx-auto h-16 w-16 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {language === \"ca\" ? \"Accés restringit\" : \"Acceso restringido\"}\n              </h3>\n              <p className=\"text-gray-600\">\n                {language === \"ca\" \n                  ? \"Només els administradors poden gestionar cursos acadèmics\" \n                  : \"Solo los administradores pueden gestionar cursos académicos\"}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const yearSuggestions = generateYearSuggestions();\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold text-text\">\n          {language === \"ca\" ? \"Gestió de Cursos Acadèmics\" : \"Gestión de Cursos Académicos\"}\n        </h1>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"create-academic-year-button\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              {language === \"ca\" ? \"Nou Curs Acadèmic\" : \"Nuevo Curso Académico\"}\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl modal-content-solid\">\n            <DialogHeader>\n              <DialogTitle>\n                {language === \"ca\" ? \"Crear Nou Curs Acadèmic\" : \"Crear Nuevo Curso Académico\"}\n              </DialogTitle>\n            </DialogHeader>\n            \n            {/* Quick suggestions */}\n            <div className=\"mb-4\">\n              <Label className=\"text-sm text-gray-600\">\n                {language === \"ca\" ? \"Suggeriments ràpids:\" : \"Sugerencias rápidas:\"}\n              </Label>\n              <div className=\"flex gap-2 mt-2\">\n                {yearSuggestions.map((suggestion, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setFormData({\n                      ...formData,\n                      name: suggestion.name,\n                      startDate: suggestion.startDate,\n                      endDate: suggestion.endDate\n                    })}\n                    data-testid={`year-suggestion-${index}`}\n                  >\n                    {suggestion.name}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">\n                  {language === \"ca\" ? \"Nom del Curs\" : \"Nombre del Curso\"}\n                </Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  placeholder=\"2025-2026\"\n                  required\n                  data-testid=\"academic-year-name-input\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"startDate\">\n                    {language === \"ca\" ? \"Data d'Inici\" : \"Fecha de Inicio\"}\n                  </Label>\n                  <Input\n                    id=\"startDate\"\n                    type=\"date\"\n                    value={formData.startDate}\n                    onChange={(e) => setFormData({ ...formData, startDate: e.target.value })}\n                    required\n                    data-testid=\"academic-year-start-date-input\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"endDate\">\n                    {language === \"ca\" ? \"Data de Fi\" : \"Fecha de Fin\"}\n                  </Label>\n                  <Input\n                    id=\"endDate\"\n                    type=\"date\"\n                    value={formData.endDate}\n                    onChange={(e) => setFormData({ ...formData, endDate: e.target.value })}\n                    required\n                    data-testid=\"academic-year-end-date-input\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"isActive\"\n                  checked={formData.isActive}\n                  onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n                  data-testid=\"academic-year-active-checkbox\"\n                />\n                <Label htmlFor=\"isActive\">\n                  {language === \"ca\" ? \"Marcar com a curs actiu\" : \"Marcar como curso activo\"}\n                </Label>\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"submit-academic-year-button\">\n                  {createMutation.isPending ? \n                    (language === \"ca\" ? \"Creant...\" : \"Creando...\") :\n                    (language === \"ca\" ? \"Crear Curs\" : \"Crear Curso\")\n                  }\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsCreateDialogOpen(false)}\n                  data-testid=\"cancel-academic-year-button\"\n                >\n                  {t(\"cancel\", language)}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card data-testid=\"academic-years-table-card\">\n        <CardHeader>\n          <CardTitle>\n            {language === \"ca\" ? \"Cursos Acadèmics\" : \"Cursos Académicos\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>{language === \"ca\" ? \"Curs\" : \"Curso\"}</TableHead>\n                  <TableHead>{language === \"ca\" ? \"Data d'Inici\" : \"Fecha de Inicio\"}</TableHead>\n                  <TableHead>{language === \"ca\" ? \"Data de Fi\" : \"Fecha de Fin\"}</TableHead>\n                  <TableHead>{language === \"ca\" ? \"Estat\" : \"Estado\"}</TableHead>\n                  <TableHead>{language === \"ca\" ? \"Durada\" : \"Duración\"}</TableHead>\n                  <TableHead>{t(\"actions\", language)}</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {academicYears.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\">\n                      <p className=\"text-gray-500\">\n                        {language === \"ca\" \n                          ? \"No s'han trobat cursos acadèmics\"\n                          : \"No se han encontrado cursos académicos\"}\n                      </p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  academicYears.map((year: AcademicYear) => {\n                    const startDate = new Date(year.startDate);\n                    const endDate = new Date(year.endDate);\n                    const today = new Date();\n                    const isCurrentYear = today >= startDate && today <= endDate;\n                    const isFutureYear = today < startDate;\n                    \n                    return (\n                      <TableRow key={year.id} data-testid={`academic-year-row-${year.id}`}>\n                        <TableCell className=\"font-medium\" data-testid={`academic-year-name-${year.id}`}>\n                          {year.name}\n                        </TableCell>\n                        <TableCell data-testid={`academic-year-start-${year.id}`}>\n                          {startDate.toLocaleDateString(\"ca-ES\")}\n                        </TableCell>\n                        <TableCell data-testid={`academic-year-end-${year.id}`}>\n                          {endDate.toLocaleDateString(\"ca-ES\")}\n                        </TableCell>\n                        <TableCell data-testid={`academic-year-status-${year.id}`}>\n                          <Badge variant={year.isActive ? \"default\" : isCurrentYear ? \"secondary\" : isFutureYear ? \"outline\" : \"destructive\"}>\n                            {year.isActive ? \n                              (language === \"ca\" ? \"Actiu\" : \"Activo\") :\n                              isCurrentYear ? \n                                (language === \"ca\" ? \"En curs\" : \"En curso\") :\n                                isFutureYear ?\n                                  (language === \"ca\" ? \"Futur\" : \"Futuro\") :\n                                  (language === \"ca\" ? \"Finalitzat\" : \"Finalizado\")\n                            }\n                          </Badge>\n                        </TableCell>\n                        <TableCell data-testid={`academic-year-duration-${year.id}`}>\n                          {Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24))} {language === \"ca\" ? \"dies\" : \"días\"}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex gap-2\">\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => setEditingYear(year)}\n                              data-testid={`edit-academic-year-${year.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              className=\"text-red-600 hover:text-red-700\"\n                              data-testid={`delete-academic-year-${year.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14319},"client/src/pages/Alerts.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { t } from \"@/lib/i18n\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  AlertTriangle, \n  Clock, \n  Info, \n  X,\n  CheckCircle,\n  UserX,\n  Shield\n} from \"lucide-react\";\nimport type { Alert } from \"@shared/schema\";\n\nexport default function Alerts() {\n  const { language } = useLanguage();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [lateToleranceMinutes, setLateToleranceMinutes] = useState(5);\n  const [maxLatesPerMonth, setMaxLatesPerMonth] = useState(3);\n\n  // Get institution ID from authenticated user\n  const institutionId = user?.institutionId;\n\n  const { data: alerts = [], isLoading } = useQuery({\n    queryKey: [\"/api/alerts\", institutionId],\n    enabled: !!institutionId,\n  });\n\n  const resolveAlertMutation = useMutation({\n    mutationFn: async (alertId: string) => {\n      return await apiRequest(\"PUT\", `/api/alerts/${alertId}/resolve`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/alerts\"] });\n      toast({\n        title: t(\"success\", language),\n        description: language === \"ca\" ? \"Alerta resolta correctament\" : \"Alerta resuelta correctamente\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\", language),\n        description: language === \"ca\" ? \"Error resolent l'alerta\" : \"Error resolviendo la alerta\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n\n  const saveConfigMutation = useMutation({\n    mutationFn: async () => {\n      await Promise.all([\n        apiRequest(\"PUT\", `/api/settings/${institutionId}/late_tolerance_minutes`, { \n          value: lateToleranceMinutes \n        }),\n        apiRequest(\"PUT\", `/api/settings/${institutionId}/max_lates_per_month`, { \n          value: maxLatesPerMonth \n        }),\n      ]);\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"success\", language),\n        description: language === \"ca\" ? \"Configuració guardada\" : \"Configuración guardada\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\", language),\n        description: language === \"ca\" ? \"Error guardant la configuració\" : \"Error guardando la configuración\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getAlertIcon = (type: string) => {\n    switch (type) {\n      case \"late_arrival\":\n        return <Clock className=\"h-5 w-5\" />;\n      case \"absence\":\n        return <UserX className=\"h-5 w-5\" />;\n      case \"substitute_needed\":\n        return <Info className=\"h-5 w-5\" />;\n      default:\n        return <AlertTriangle className=\"h-5 w-5\" />;\n    }\n  };\n\n  const getAlertColor = (type: string) => {\n    switch (type) {\n      case \"late_arrival\":\n        return \"border-accent bg-accent/5 text-accent\";\n      case \"absence\":\n        return \"border-error bg-error/5 text-error\";\n      case \"substitute_needed\":\n        return \"border-primary bg-primary/5 text-primary\";\n      default:\n        return \"border-error bg-error/5 text-error\";\n    }\n  };\n\n  const getAlertTitle = (type: string) => {\n    switch (type) {\n      case \"late_arrival\":\n        return language === \"ca\" ? \"Retard detectat\" : \"Retraso detectado\";\n      case \"absence\":\n        return language === \"ca\" ? \"Absència sense justificar\" : \"Ausencia sin justificar\";\n      case \"substitute_needed\":\n        return language === \"ca\" ? \"Guàrdia assignada automàticament\" : \"Guardia asignada automáticamente\";\n      default:\n        return language === \"ca\" ? \"Alerta\" : \"Alerta\";\n    }\n  };\n\n\n\n  // Real alert history will be loaded from database\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-32 bg-gray-200 rounded-lg\"></div>\n          <div className=\"h-96 bg-gray-200 rounded-lg\"></div>\n          <div className=\"h-64 bg-gray-200 rounded-lg\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  // Separate active and resolved alerts\n  const activeAlerts = alerts?.filter((alert: any) => alert.status === 'active') || [];\n  const alertHistory = alerts || [];\n\n  return (\n    <main className=\"p-6 space-y-6\">\n      {/* Alert Configuration */}\n      <Card data-testid=\"alert-config-card\">\n        <CardHeader>\n          <CardTitle>\n            {language === \"ca\" ? \"Configuració d'alertes\" : \"Configuración de alertas\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"late-tolerance\">\n                {language === \"ca\" ? \"Tolerància de retard (minuts)\" : \"Tolerancia de retraso (minutos)\"}\n              </Label>\n              <Input\n                id=\"late-tolerance\"\n                type=\"number\"\n                value={lateToleranceMinutes}\n                onChange={(e) => setLateToleranceMinutes(Number(e.target.value))}\n                data-testid=\"late-tolerance-input\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"max-lates\">\n                {language === \"ca\" ? \"Retards màxims per mes\" : \"Retrasos máximos por mes\"}\n              </Label>\n              <Input\n                id=\"max-lates\"\n                type=\"number\"\n                value={maxLatesPerMonth}\n                onChange={(e) => setMaxLatesPerMonth(Number(e.target.value))}\n                data-testid=\"max-lates-input\"\n              />\n            </div>\n          </div>\n          \n          <Button \n            onClick={() => saveConfigMutation.mutate()}\n            disabled={saveConfigMutation.isPending}\n            className=\"mt-4\"\n            data-testid=\"save-config-button\"\n          >\n            {language === \"ca\" ? \"Guardar configuració\" : \"Guardar configuración\"}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Active Alerts */}\n      <Card data-testid=\"active-alerts-card\">\n        <CardHeader>\n          <CardTitle>\n            {language === \"ca\" ? \"Alertes actives\" : \"Alertas activas\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {activeAlerts.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <CheckCircle className=\"mx-auto h-12 w-12 text-secondary mb-4\" />\n              <p className=\"text-gray-600\">\n                {language === \"ca\" ? \"No hi ha alertes actives\" : \"No hay alertas activas\"}\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {isLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse border-l-4 border-gray-200 p-4 rounded-r-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-6 h-6 bg-gray-200 rounded\"></div>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                activeAlerts.map((alert: any) => (\n                  <div \n                    key={alert.id}\n                    className={`border-l-4 p-4 rounded-r-lg ${getAlertColor(alert.type)}`}\n                    data-testid={`alert-${alert.id}`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <div className=\"mr-3\">\n                          {getAlertIcon(alert.type)}\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-text\">{alert.title}</p>\n                          <p className=\"text-sm text-gray-600\">{alert.description}</p>\n                          <p className=\"text-xs text-gray-500\">\n                            {language === \"ca\" ? \"Empleat:\" : \"Empleado:\"} {alert.employeeName} - {new Date(alert.createdAt).toLocaleString(language === \"ca\" ? \"ca-ES\" : \"es-ES\")}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => resolveAlertMutation.mutate(alert.id)}\n                          data-testid={`dismiss-alert-${alert.id}`}\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Alert History */}\n      <Card data-testid=\"alert-history-card\">\n        <CardHeader>\n          <CardTitle>\n            {language === \"ca\" ? \"Historial d'alertes\" : \"Historial de alertas\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>\n                    {language === \"ca\" ? \"Data/Hora\" : \"Fecha/Hora\"}\n                  </TableHead>\n                  <TableHead>\n                    {language === \"ca\" ? \"Empleat\" : \"Empleado\"}\n                  </TableHead>\n                  <TableHead>\n                    {language === \"ca\" ? \"Tipus\" : \"Tipo\"}\n                  </TableHead>\n                  <TableHead>\n                    {t(\"status\", language)}\n                  </TableHead>\n                  <TableHead>\n                    {t(\"actions\", language)}\n                  </TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {alertHistory.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={5} className=\"text-center py-8 text-muted-foreground\">\n                      {language === \"ca\" ? \"No hi ha historial d'alertes\" : \"No hay historial de alertas\"}\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  alertHistory.map((alert: any) => (\n                    <TableRow key={alert.id}>\n                      <TableCell>\n                        {new Date(alert.createdAt).toLocaleString(language === \"ca\" ? \"ca-ES\" : \"es-ES\")}\n                      </TableCell>\n                      <TableCell>\n                        {alert.employeeName || 'N/A'}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={alert.type === 'late_arrival' ? 'secondary' : 'destructive'}>\n                          {getAlertTitle(alert.type)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={alert.status === 'resolved' ? 'secondary' : (alert.emailSent ? 'default' : 'outline')}>\n                          {alert.status === 'resolved' ? \n                            (language === \"ca\" ? \"Resolta\" : \"Resuelta\") : \n                            (alert.emailSent ? \n                              (language === \"ca\" ? \"Enviat\" : \"Enviado\") : \n                              (language === \"ca\" ? \"Pendent\" : \"Pendiente\")\n                            )\n                          }\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {alert.status === 'resolved' ? (\n                          <div className=\"text-sm text-muted-foreground\">\n                            {language === \"ca\" ? \"Resolta per\" : \"Resuelta por\"} {alert.resolvedByName}\n                            <br />\n                            {new Date(alert.resolvedAt).toLocaleString(language === \"ca\" ? \"ca-ES\" : \"es-ES\")}\n                          </div>\n                        ) : (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => resolveAlertMutation.mutate(alert.id)}\n                            disabled={resolveAlertMutation.isPending}\n                          >\n                            {language === \"ca\" ? \"Resoldre\" : \"Resolver\"}\n                          </Button>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </main>\n  );\n}\n","size_bytes":13369},"client/src/pages/Attendance.tsx":{"content":"import { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { t } from \"@/lib/i18n\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  LogIn, \n  LogOut, \n  QrCode, \n  CreditCard,\n  Clock,\n  Wifi,\n  WifiOff,\n  AlertTriangle,\n  Timer,\n  CheckCircle,\n  XCircle\n} from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { format } from \"date-fns\";\nimport { ca, es } from \"date-fns/locale\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport QuickAttendanceModal from \"@/components/modals/QuickAttendanceModal\";\nimport WeeklyCalendar from \"@/components/WeeklyCalendar\";\nimport SimpleQRAttendance from \"@/components/SimpleQRAttendance\";\nimport type { AttendanceRecord } from \"@shared/schema\";\nimport { \n  calculateExpectedTimes, \n  getTodayDayOfWeek, \n  getAttendanceStatus,\n  isProduction,\n  hasCheckedInToday,\n  hasCheckedOutToday,\n  type ScheduleSession \n} from \"@/lib/scheduleUtils\";\n\nexport default function Attendance() {\n  const { language } = useLanguage();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [isQuickAttendanceOpen, setIsQuickAttendanceOpen] = useState(false);\n  // DISABLED: Network permission checks to stop infinite loops\n  // const [networkPermission, setNetworkPermission] = useState<{ allowed: boolean; message: string } | null>(null);\n  // const [isPermissionChecked, setIsPermissionChecked] = useState(false);\n  const networkPermission = { allowed: true, message: \"Red local autorizada\" };\n  const isPermissionChecked = true;\n\n  // Get employee ID from authenticated user (memoized to prevent re-renders)\n  const employeeId = useMemo(() => user?.id, [user?.id]);\n\n  const { data: attendanceRecords = [], isLoading } = useQuery<AttendanceRecord[]>({\n    queryKey: [\"/api/attendance\", employeeId],\n    enabled: !!employeeId,\n    refetchInterval: 2000, // Refresh every 2 seconds to detect changes\n    refetchOnWindowFocus: true,\n    staleTime: 0, // Always fresh data\n  });\n\n  // Get the last attendance record to determine button states\n  const lastAttendanceRecord = attendanceRecords.length > 0 \n    ? attendanceRecords.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())[0]\n    : null;\n\n  // Production restrictions - only allow one check-in/out per day\n  const isProd = isProduction();\n  const hasCheckedInTodayAlready = isProd && hasCheckedInToday(attendanceRecords);\n  const hasCheckedOutTodayAlready = isProd && hasCheckedOutToday(attendanceRecords);\n  \n  const shouldDisableCheckIn = lastAttendanceRecord?.type === 'check_in' || hasCheckedInTodayAlready;\n  const shouldDisableCheckOut = (!lastAttendanceRecord || lastAttendanceRecord?.type === 'check_out') || hasCheckedOutTodayAlready;\n\n  // DISABLED: Network permission check to stop infinite loops\n  // const checkNetworkPermission = useCallback(async () => {\n  //   return true; // Always allow for now\n  // }, []);\n  const checkNetworkPermission = useCallback(async () => {\n    return true; // Always allow - no API calls\n  }, []);\n\n  const attendanceMutation = useMutation({\n    mutationFn: async (data: { type: \"check_in\" | \"check_out\"; timestamp: Date }) => {\n      return await apiRequest(\"POST\", \"/api/attendance\", {\n        ...data,\n        method: \"web\",\n        location: \"attendance_page\"\n      });\n    },\n    onSuccess: (data, variables) => {\n      // Force refetch attendance data immediately\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance\", user?.id] });\n      queryClient.refetchQueries({ queryKey: [\"/api/attendance\", user?.id] });\n      \n      // Invalidate weekly attendance queries with user ID to update calendar immediately\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance/weekly\", user?.id] });\n      // Also invalidate schedule queries for attendance validation\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule/weekly\", user?.id] });\n      \n      toast({\n        title: t(\"success\", language),\n        description: variables.type === \"check_in\" \n          ? (language === \"ca\" ? \"Entrada registrada correctament\" : \"Entrada registrada correctamente\")\n          : (language === \"ca\" ? \"Sortida registrada correctament\" : \"Salida registrada correctamente\"),\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: t(\"error\", language),\n        description: error.message || (language === \"ca\" ? \"Error registrant el fitxatge\" : \"Error registrando el fichaje\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // DISABLED: Network permission check useEffect to stop infinite loops\n  // useEffect(() => {\n  //   // Disabled to prevent infinite loops\n  // }, []);\n\n  const timeString = currentTime.toLocaleTimeString(\"ca-ES\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    hour12: false,\n  });\n\n  const handleCheckIn = () => {\n    attendanceMutation.mutate({\n      type: \"check_in\",\n      timestamp: new Date(),\n    });\n  };\n\n  const handleCheckOut = () => {\n    attendanceMutation.mutate({\n      type: \"check_out\",\n      timestamp: new Date(),\n    });\n  };\n\n  const getStatusBadge = (type: string) => {\n    return type === \"check_in\" ? (\n      <Badge className=\"bg-secondary/10 text-secondary\">\n        {language === \"ca\" ? \"Entrada\" : \"Entrada\"}\n      </Badge>\n    ) : (\n      <Badge className=\"bg-error/10 text-error\">\n        {language === \"ca\" ? \"Sortida\" : \"Salida\"}\n      </Badge>\n    );\n  };\n\n  // Get today's date once to prevent constant re-queries\n  const todayDate = useMemo(() => format(new Date(), 'yyyy-MM-dd'), []);\n  \n  // Get today's schedule data (HEAVILY CACHED to prevent loops)\n  const { data: todaySchedule } = useQuery({\n    queryKey: ['/api/schedule/weekly', user?.id, todayDate],\n    queryFn: async () => {\n      if (!user?.id) return [];\n      const response = await fetch(`/api/schedule/weekly/${user.id}/${todayDate}`);\n      if (!response.ok) {\n        return [];\n      }\n      return response.json();\n    },\n    enabled: !!user?.id,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    staleTime: 60 * 60 * 1000, // 1 hour - much longer cache\n    gcTime: 2 * 60 * 60 * 1000, // 2 hours garbage collection\n  });\n\n  // Calculate expected times for today using the new utility functions\n  const todayDayOfWeek = getTodayDayOfWeek();\n  const todayExpectedTimes = calculateExpectedTimes(todaySchedule || [], todayDayOfWeek);\n  \n  // Get today's attendance records for validation\n  const todayAttendanceRecords = attendanceRecords.filter(record => \n    format(new Date(record.timestamp), 'yyyy-MM-dd') === todayDate\n  );\n  \n  const todayCheckIn = todayAttendanceRecords.find(r => r.type === 'check_in');\n  const todayCheckOut = todayAttendanceRecords.find(r => r.type === 'check_out');\n  \n  // Get attendance status with color coding\n  const attendanceStatus = getAttendanceStatus(\n    todayCheckIn?.timestamp ? todayCheckIn.timestamp.toString() : null,\n    todayCheckOut?.timestamp ? todayCheckOut.timestamp.toString() : null,\n    todayExpectedTimes.expectedEntry,\n    todayExpectedTimes.expectedExit\n  );\n\n  // Convert schedule data to display format\n  const formatScheduleForToday = (scheduleData: any[]) => {\n    if (!scheduleData || !Array.isArray(scheduleData)) return [];\n    \n    const today = new Date();\n    const currentDay = today.getDay() === 0 ? 7 : today.getDay(); // Convert Sunday from 0 to 7\n    \n    return scheduleData\n      .filter((session: any) => session.dayOfWeek === currentDay)\n      .sort((a: any, b: any) => a.hourPeriod - b.hourPeriod)\n      .map((session: any, index: number) => {\n        // Use the TIME_PERIODS mapping from scheduleUtils\n        const timePeriods = {\n          1: \"08:00-09:00\", 2: \"09:00-10:00\", 3: \"10:00-11:00\", 4: \"11:30-12:30\",\n          5: \"12:30-13:30\", 6: \"13:30-14:30\", 7: \"15:30-16:30\", 8: \"16:30-17:30\"\n        };\n        const timeSlot = timePeriods[session.hourPeriod as keyof typeof timePeriods] || \"--:--\";\n        \n        return {\n          time: timeSlot,\n          subject: `${session.subjectName || session.subjectCode} - ${session.groupCode}`,\n          status: session.isLectiveHour ? 'lective' : 'non-lective',\n          testId: `schedule-${session.subjectCode}-${index}`\n        };\n      });\n  };\n\n  const processedSchedule = formatScheduleForToday(todaySchedule);\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"h-96 bg-gray-200 rounded-lg\"></div>\n            <div className=\"h-96 bg-gray-200 rounded-lg\"></div>\n          </div>\n          <div className=\"h-64 bg-gray-200 rounded-lg\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <main className=\"p-6\">\n      {/* Network Permission Alert */}\n      {networkPermission && !networkPermission.allowed && (\n        <Alert className=\"mb-6 border-red-200 bg-red-50\">\n          <WifiOff className=\"h-4 w-4 text-red-600\" />\n          <AlertDescription className=\"text-red-800\">\n            <strong>{language === \"ca\" ? \"Accés restringit:\" : \"Acceso restringido:\"}</strong> {networkPermission.message}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {networkPermission && networkPermission.allowed && (\n        <Alert className=\"mb-6 border-green-200 bg-green-50\">\n          <Wifi className=\"h-4 w-4 text-green-600\" />\n          <AlertDescription className=\"text-green-800\">\n            <strong>{language === \"ca\" ? \"Xarxa autoritzada:\" : \"Red autorizada:\"}</strong> {networkPermission.message}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Quick Check-in */}\n        <Card data-testid=\"quick-checkin-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Timer className=\"h-5 w-5\" />\n              {t(\"quick_checkin\", language)}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center mb-6\">\n              <div className=\"text-6xl text-primary mb-4 font-mono\" data-testid=\"current-time\">\n                {timeString}\n              </div>\n              <p className=\"text-gray-600\">{t(\"current_time\", language)}</p>\n              \n              {/* Today's Expected Times */}\n              {todayExpectedTimes.hasScheduleToday && (\n                <div className=\"mt-4 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n                  <h4 className=\"text-sm font-medium text-blue-900 dark:text-blue-100 mb-3\">\n                    {language === \"ca\" ? \"Horaris previstos d'avui\" : \"Horarios previstos de hoy\"}\n                  </h4>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div className=\"text-center\">\n                      <div className={`text-lg font-bold ${attendanceStatus.entryColor === 'green' ? 'text-green-600' : attendanceStatus.entryColor === 'red' ? 'text-red-600' : 'text-gray-600'}`}>\n                        {todayExpectedTimes.expectedEntry || \"--:--\"}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground flex items-center justify-center gap-1\">\n                        {attendanceStatus.entryColor === 'green' && <CheckCircle className=\"h-3 w-3 text-green-600\" />}\n                        {attendanceStatus.entryColor === 'red' && <XCircle className=\"h-3 w-3 text-red-600\" />}\n                        {language === \"ca\" ? \"Entrada\" : \"Entrada\"}\n                      </div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className={`text-lg font-bold ${attendanceStatus.exitColor === 'green' ? 'text-green-600' : attendanceStatus.exitColor === 'red' ? 'text-red-600' : 'text-gray-600'}`}>\n                        {todayExpectedTimes.expectedExit || \"--:--\"}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground flex items-center justify-center gap-1\">\n                        {attendanceStatus.exitColor === 'green' && <CheckCircle className=\"h-3 w-3 text-green-600\" />}\n                        {attendanceStatus.exitColor === 'red' && <XCircle className=\"h-3 w-3 text-red-600\" />}\n                        {language === \"ca\" ? \"Sortida\" : \"Salida\"}\n                      </div>\n                    </div>\n                  </div>\n                  {isProd && (\n                    <div className=\"mt-2 text-center\">\n                      <p className=\"text-xs text-blue-700 dark:text-blue-300\">\n                        {language === \"ca\" \n                          ? \"⚠️ Producció: Només pots fitxar una vegada al dia\" \n                          : \"⚠️ Producción: Solo puedes fichar una vez al día\"}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-4\">\n              <Button \n                onClick={handleCheckIn}\n                disabled={\n                  attendanceMutation.isPending || \n                  shouldDisableCheckIn\n                }\n                className={`w-full py-4 px-6 text-lg font-medium ${\n                  shouldDisableCheckIn\n                    ? \"bg-gray-300 text-gray-500 cursor-not-allowed\" \n                    : \"bg-blue-600 text-white hover:bg-blue-700\"\n                }`}\n                data-testid=\"checkin-button\"\n              >\n                <LogIn className=\"mr-3 h-5 w-5\" />\n                {language === \"ca\" ? \"Fitxar entrada\" : \"Fichar entrada\"}\n              </Button>\n              <Button \n                onClick={handleCheckOut}\n                disabled={\n                  attendanceMutation.isPending || \n                  shouldDisableCheckOut\n                }\n                className={`w-full py-4 px-6 text-lg font-medium ${\n                  shouldDisableCheckOut\n                    ? \"bg-gray-300 text-gray-500 cursor-not-allowed\" \n                    : \"bg-green-600 text-white hover:bg-green-700\"\n                }`}\n                data-testid=\"checkout-button\"\n              >\n                <LogOut className=\"mr-3 h-5 w-5 rotate-180\" />\n                {language === \"ca\" ? \"Fitxar sortida\" : \"Fichar salida\"}\n              </Button>\n            </div>\n\n            <div className=\"mt-6 pt-6 border-t border-gray-200\">\n              <h4 className=\"font-medium text-text mb-3\">\n                {t(\"alternative_methods\", language)}\n              </h4>\n              <div className=\"grid grid-cols-3 gap-3\">\n                <Button \n                  variant=\"outline\"\n                  onClick={() => setIsQuickAttendanceOpen(true)}\n                  className=\"py-3 px-4 text-center hover:bg-blue-50 border-blue-200\"\n                  data-testid=\"quick-attendance-button\"\n                >\n                  <div>\n                    <Timer className=\"h-6 w-6 text-blue-600 mx-auto mb-2\" />\n                    <p className=\"text-sm text-blue-700 font-medium\">{language === \"ca\" ? \"Fitxatge Ràpid\" : \"Fichaje Rápido\"}</p>\n                  </div>\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  className=\"py-3 px-4 text-center hover:bg-gray-50\"\n                  data-testid=\"qr-method-button\"\n                  onClick={() => window.location.href = '/qr-attendance'}\n                >\n                  <div>\n                    <QrCode className=\"h-6 w-6 text-primary mx-auto mb-2\" />\n                    <p className=\"text-sm text-text\">{t(\"qr_code\", language)}</p>\n                  </div>\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  className=\"py-3 px-4 text-center hover:bg-gray-50\"\n                  data-testid=\"nfc-method-button\"\n                >\n                  <div>\n                    <CreditCard className=\"h-6 w-6 text-primary mx-auto mb-2\" />\n                    <p className=\"text-sm text-text\">{t(\"nfc_card\", language)}</p>\n                  </div>\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Today's Schedule */}\n        <Card data-testid=\"todays-schedule-card\">\n          <CardHeader>\n            <CardTitle>{t(\"todays_schedule\", language)}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {processedSchedule.length > 0 ? processedSchedule.map((item, index) => (\n                <div \n                  key={index} \n                  className={`flex items-center justify-between p-3 rounded-lg ${\n                    item.status === \"lective\" ? \"bg-blue-50 dark:bg-blue-950/20 border-l-4 border-l-blue-500\" :\n                    item.status === \"non-lective\" ? \"bg-orange-50 dark:bg-orange-950/20 border-l-4 border-l-orange-500\" :\n                    \"bg-gray-50\"\n                  }`}\n                  data-testid={item.testId}\n                >\n                  <div className=\"flex items-center\">\n                    <Clock className={`mr-3 h-4 w-4 ${\n                      item.status === \"lective\" ? \"text-blue-600\" :\n                      item.status === \"non-lective\" ? \"text-orange-600\" :\n                      \"text-gray-400\"\n                    }`} />\n                    <div>\n                      <p className=\"font-medium text-text\">{item.time}</p>\n                      <p className=\"text-sm text-gray-600\">{item.subject}</p>\n                    </div>\n                  </div>\n                  <Badge \n                    variant=\"secondary\"\n                    className={\n                      item.status === \"lective\" ? \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300\" :\n                      item.status === \"non-lective\" ? \"bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300\" :\n                      \"bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300\"\n                    }\n                  >\n                    {item.status === \"lective\" ? \n                      (language === \"ca\" ? \"Lectiva\" : \"Lectiva\") :\n                      (language === \"ca\" ? \"No lectiva\" : \"No lectiva\")\n                    }\n                  </Badge>\n                </div>\n              )) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Clock className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>\n                    {language === \"ca\" \n                      ? \"No hi ha classes programades per avui\" \n                      : \"No hay clases programadas para hoy\"}\n                  </p>\n                </div>\n              )}\n            </div>\n\n            <div className=\"mt-6 pt-6 border-t border-gray-200\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">\n                  {language === \"ca\" ? \"Hores lectives:\" : \"Horas lectivas:\"}\n                </span>\n                <span className=\"font-medium text-text\">\n                  {processedSchedule.filter(s => s.status === 'lective').length}h\n                </span>\n              </div>\n              <div className=\"flex justify-between text-sm mt-2\">\n                <span className=\"text-gray-600\">\n                  {language === \"ca\" ? \"Hores no lectives:\" : \"Horas no lectivas:\"}\n                </span>\n                <span className=\"font-medium text-text\">\n                  {processedSchedule.filter(s => s.status === 'non-lective').length}h\n                </span>\n              </div>\n              {todayExpectedTimes.hasScheduleToday && (\n                <div className=\"mt-4 p-3 rounded-lg border border-dashed border-blue-300 bg-blue-50/50 dark:bg-blue-950/10\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-blue-700 dark:text-blue-300 font-medium\">\n                      {language === \"ca\" ? \"Entrada prevista:\" : \"Entrada prevista:\"}\n                    </span>\n                    <span className=\"font-bold text-blue-900 dark:text-blue-200\">\n                      {todayExpectedTimes.expectedEntry || \"--:--\"}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between text-sm mt-1\">\n                    <span className=\"text-blue-700 dark:text-blue-300 font-medium\">\n                      {language === \"ca\" ? \"Sortida prevista:\" : \"Salida prevista:\"}\n                    </span>\n                    <span className=\"font-bold text-blue-900 dark:text-blue-200\">\n                      {todayExpectedTimes.expectedExit || \"--:--\"}\n                    </span>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Weekly Calendar */}\n        <WeeklyCalendar \n          employeeId={employeeId || \"\"} \n          language={language} \n        />\n      </div>\n\n      {/* Attendance History */}\n      <Card className=\"mt-6\" data-testid=\"attendance-history-card\">\n        <CardHeader>\n          <CardTitle>\n            {language === \"ca\" ? \"Historial de fitxatges\" : \"Historial de fichajes\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>{language === \"ca\" ? \"Data\" : \"Fecha\"}</TableHead>\n                  <TableHead>{language === \"ca\" ? \"Hora\" : \"Hora\"}</TableHead>\n                  <TableHead>{language === \"ca\" ? \"Tipus\" : \"Tipo\"}</TableHead>\n                  <TableHead>{language === \"ca\" ? \"Mètode\" : \"Método\"}</TableHead>\n                  <TableHead>{t(\"status\", language)}</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {attendanceRecords.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={5} className=\"text-center py-8\">\n                      <p className=\"text-gray-500\">\n                        {language === \"ca\" \n                          ? \"No s'han trobat registres de fitxatge\"\n                          : \"No se han encontrado registros de fichaje\"}\n                      </p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  attendanceRecords.map((record: AttendanceRecord) => (\n                    <TableRow key={record.id} data-testid={`attendance-record-${record.id}`}>\n                      <TableCell>\n                        {new Date(record.timestamp).toLocaleDateString(\"ca-ES\")}\n                      </TableCell>\n                      <TableCell>\n                        {new Date(record.timestamp).toLocaleTimeString(\"ca-ES\", {\n                          hour: \"2-digit\",\n                          minute: \"2-digit\",\n                        })}\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(record.type)}\n                      </TableCell>\n                      <TableCell className=\"capitalize\">\n                        {record.method}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {language === \"ca\" ? \"Normal\" : \"Normal\"}\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Attendance Modal */}\n      <QuickAttendanceModal \n        isOpen={isQuickAttendanceOpen}\n        onClose={() => setIsQuickAttendanceOpen(false)}\n        onCheckIn={handleCheckIn}\n        onCheckOut={handleCheckOut}\n        currentTime={timeString}\n        shouldDisableCheckIn={shouldDisableCheckIn}\n        shouldDisableCheckOut={shouldDisableCheckOut}\n        isLoading={attendanceMutation.isPending}\n        expectedTimes={todayExpectedTimes}\n        attendanceStatus={attendanceStatus}\n      />\n    </main>\n  );\n}\n","size_bytes":25024},"client/src/pages/Communications.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { apiRequest } from '@/lib/queryClient';\nimport { t } from '@/lib/i18n';\nimport { \n  Mail, \n  Send, \n  Inbox, \n  Trash2, \n  Eye, \n  EyeOff, \n  Paperclip, \n  Calendar,\n  AlertCircle,\n  Users,\n  Search,\n  Filter,\n  Download\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport { ca } from 'date-fns/locale';\n\ninterface Communication {\n  id: string;\n  institutionId: string;\n  senderId: string;\n  recipientId: string;\n  messageType: 'internal' | 'notification' | 'alert';\n  subject: string;\n  message: string;\n  status: 'sent' | 'delivered' | 'read';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  emailSent: boolean;\n  emailSentAt?: string;\n  readAt?: string;\n  deliveredAt?: string;\n  deletedByUserAt?: string;\n  createdAt: string;\n  updatedAt: string;\n  senderFirstName?: string;\n  senderLastName?: string;\n  senderEmail?: string;\n  recipientFirstName?: string;\n  recipientLastName?: string;\n  recipientEmail?: string;\n}\n\ninterface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: string;\n}\n\nexport default function Communications() {\n  const { user } = useAuth();\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedFilter, setSelectedFilter] = useState<'all' | 'inbox' | 'sent' | 'unread'>('inbox');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCommunication, setSelectedCommunication] = useState<Communication | null>(null);\n  const [isComposeOpen, setIsComposeOpen] = useState(false);\n\n  // Form states for compose dialog\n  const [composeRecipient, setComposeRecipient] = useState('');\n  const [composeSubject, setComposeSubject] = useState('');\n  const [composeContent, setComposeContent] = useState('');\n  const [composeMessageType, setComposeMessageType] = useState<'internal' | 'notification' | 'alert'>('internal');\n  const [composePriority, setComposePriority] = useState<'low' | 'medium' | 'high' | 'urgent'>('medium');\n  const [composeEmailEnabled, setComposeEmailEnabled] = useState(true);\n\n  // Fetch communications using normal endpoint \n  const { data: communicationsResponse = [], isLoading } = useQuery({\n    queryKey: ['/api/communications', user?.id, 'all', selectedFilter],\n    queryFn: async () => {\n      if (!user?.id) return [];\n      const response = await fetch(`/api/communications/${user.id}/all?filter=${selectedFilter}`);\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Fetch users for recipient selection\n  const { data: institutionUsers = [] } = useQuery({\n    queryKey: ['/api/users', user?.institutionId],\n    queryFn: async () => {\n      if (!user?.institutionId) return [];\n      const response = await fetch(`/api/users/institution/${user.institutionId}`);\n      return response.json();\n    },\n    enabled: !!user?.institutionId,\n  });\n\n  // Create communication mutation using normal endpoint\n  const createCommunicationMutation = useMutation({\n    mutationFn: async (communicationData: any) => {\n      return apiRequest(\"POST\", '/api/communications', communicationData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/communications', user?.id, 'all'] });\n      toast({\n        title: \"Missatge enviat\",\n        description: \"El missatge s'ha enviat correctament.\",\n      });\n      setIsComposeOpen(false);\n      resetComposeForm();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"No s'ha pogut enviar el missatge.\",\n      });\n    },\n  });\n\n  // Mark as read mutation using normal endpoint\n  const markAsReadMutation = useMutation({\n    mutationFn: async (communicationId: string) => {\n      return apiRequest(\"PATCH\", `/api/communications/${communicationId}/read`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/communications', user?.id, 'all'] });\n    },\n  });\n\n  // Delete communication mutation using normal endpoint\n  const deleteCommunicationMutation = useMutation({\n    mutationFn: async (communicationId: string) => {\n      return apiRequest(\"DELETE\", `/api/communications/${communicationId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/communications', user?.id, 'all'] });\n      toast({\n        title: \"Missatge eliminat\",\n        description: \"El missatge s'ha eliminat correctament.\",\n      });\n      setSelectedCommunication(null);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"No s'ha pogut eliminar el missatge.\",\n      });\n    },\n  });\n\n  const resetComposeForm = () => {\n    setComposeRecipient('');\n    setComposeSubject('');\n    setComposeContent('');\n    setComposeMessageType('internal');\n    setComposePriority('medium');\n    setComposeEmailEnabled(true);\n  };\n\n  const handleComposeSubmit = () => {\n    if (!composeRecipient || !composeSubject || !composeContent.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Sisplau, ompliu tots els camps obligatoris.\",\n      });\n      return;\n    }\n\n    createCommunicationMutation.mutate({\n      recipientId: composeRecipient,\n      messageType: composeMessageType,\n      subject: composeSubject,\n      message: composeContent,\n      priority: composePriority,\n      emailSent: composeEmailEnabled,\n    });\n  };\n\n  const handleMarkAsRead = (communication: Communication) => {\n    if (communication.status !== 'read' && communication.recipientId === user?.id) {\n      markAsReadMutation.mutate(communication.id);\n    }\n    setSelectedCommunication(communication);\n  };\n\n  // Asegurar que communications siempre sea un array\n  const communications = Array.isArray(communicationsResponse) ? communicationsResponse : [];\n\n  const filteredCommunications = communications.filter((comm: Communication) => {\n    const matchesSearch = searchTerm === '' || \n      comm.subject.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      comm.message.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      `${comm.senderFirstName} ${comm.senderLastName}`.toLowerCase().includes(searchTerm.toLowerCase());\n\n    switch (selectedFilter) {\n      case 'inbox':\n        return comm.recipientId === user?.id && matchesSearch;\n      case 'sent':\n        return comm.senderId === user?.id && matchesSearch;\n      case 'unread':\n        return comm.recipientId === user?.id && comm.status !== 'read' && matchesSearch;\n      default:\n        return (comm.recipientId === user?.id || comm.senderId === user?.id) && matchesSearch;\n    }\n  });\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'destructive';\n      case 'high': return 'secondary';\n      case 'medium': return 'default';\n      case 'low': return 'outline';\n      default: return 'default';\n    }\n  };\n\n  const getStatusIcon = (communication: Communication) => {\n    if (communication.status === 'read') return <Eye className=\"h-4 w-4 text-green-600\" />;\n    if (communication.status === 'delivered') return <Mail className=\"h-4 w-4 text-blue-600\" />;\n    return <EyeOff className=\"h-4 w-4 text-gray-400\" />;\n  };\n\n  const unreadCount = communications.filter((comm: Communication) => \n    comm.recipientId === user?.id && comm.status !== 'read'\n  ).length;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p>Carregant comunicacions...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Comunicacions</h1>\n          <p className=\"text-muted-foreground\">\n            Gestiona la comunicació interna del centre educatiu\n          </p>\n        </div>\n        <Button \n          data-testid=\"button-compose-message\"\n          onClick={() => setIsComposeOpen(true)}\n        >\n          <Send className=\"mr-2 h-4 w-4\" />\n          Nova Comunicació\n        </Button>\n        \n        <Dialog open={isComposeOpen} onOpenChange={setIsComposeOpen}>\n          <DialogContent className=\"max-w-2xl modal-content-solid\">\n            <DialogHeader>\n              <DialogTitle>Nova Comunicació</DialogTitle>\n              <DialogDescription>Crea una nova comunicació per enviar als usuaris</DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Destinatari *</label>\n                  <Select value={composeRecipient} onValueChange={setComposeRecipient}>\n                    <SelectTrigger className=\"select-content-solid\" data-testid=\"select-recipient\">\n                      <SelectValue placeholder=\"Selecciona un destinatari\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"select-content-solid\">\n                      {institutionUsers.map((user: User) => (\n                        <SelectItem key={user.id} value={user.id}>\n                          {user.firstName} {user.lastName} ({user.email})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Tipus de Missatge</label>\n                  <Select value={composeMessageType} onValueChange={(value: string) => setComposeMessageType(value as 'internal' | 'notification' | 'alert')}>\n                    <SelectTrigger className=\"select-content-solid\" data-testid=\"select-message-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"select-content-solid\">\n                      <SelectItem value=\"internal\">Intern</SelectItem>\n                      <SelectItem value=\"notification\">Notificació</SelectItem>\n                      <SelectItem value=\"alert\">Alerta</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Prioritat</label>\n                  <Select value={composePriority} onValueChange={(value: string) => setComposePriority(value as 'low' | 'medium' | 'high' | 'urgent')}>\n                    <SelectTrigger className=\"select-content-solid\" data-testid=\"select-priority\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"select-content-solid\">\n                      <SelectItem value=\"low\">Baixa</SelectItem>\n                      <SelectItem value=\"medium\">Mitjana</SelectItem>\n                      <SelectItem value=\"high\">Alta</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex items-center space-x-2 pt-6\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"emailEnabled\"\n                    checked={composeEmailEnabled}\n                    onChange={(e) => setComposeEmailEnabled(e.target.checked)}\n                    data-testid=\"checkbox-email-enabled\"\n                  />\n                  <label htmlFor=\"emailEnabled\" className=\"text-sm font-medium\">Enviar per email</label>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Assumpte *</label>\n                <Input\n                  id=\"subject\"\n                  value={composeSubject}\n                  onChange={(e) => setComposeSubject(e.target.value)}\n                  placeholder=\"Introdueix l'assumpte del missatge\"\n                  className=\"select-content-solid\"\n                  data-testid=\"input-subject\"\n                />\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Contingut *</label>\n                <Textarea\n                  id=\"content\"\n                  value={composeContent}\n                  onChange={(e) => setComposeContent(e.target.value)}\n                  placeholder=\"Escriu el contingut del missatge...\"\n                  rows={6}\n                  className=\"select-content-solid\"\n                  data-testid=\"textarea-content\"\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button variant=\"outline\" onClick={() => setIsComposeOpen(false)}>\n                  Cancel·lar\n                </Button>\n                <Button \n                  onClick={handleComposeSubmit}\n                  disabled={createCommunicationMutation.isPending}\n                  data-testid=\"button-send-message\"\n                >\n                  {createCommunicationMutation.isPending ? 'Enviant...' : 'Enviar'}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"flex items-center justify-between\">\n        <Tabs value={selectedFilter} onValueChange={(value: string) => setSelectedFilter(value as 'all' | 'inbox' | 'sent' | 'unread')} className=\"w-auto\">\n          <TabsList>\n            <TabsTrigger value=\"inbox\" className=\"relative\" data-testid=\"tab-inbox\">\n              <Inbox className=\"mr-2 h-4 w-4\" />\n              Bústia d'entrada\n              {unreadCount > 0 && (\n                <Badge variant=\"destructive\" className=\"ml-2 h-5 w-5 rounded-full p-0 text-xs\">\n                  {unreadCount}\n                </Badge>\n              )}\n            </TabsTrigger>\n            <TabsTrigger value=\"sent\" data-testid=\"tab-sent\">\n              <Send className=\"mr-2 h-4 w-4\" />\n              Enviats\n            </TabsTrigger>\n            <TabsTrigger value=\"unread\" data-testid=\"tab-unread\">\n              <AlertCircle className=\"mr-2 h-4 w-4\" />\n              No llegits\n            </TabsTrigger>\n            <TabsTrigger value=\"all\" data-testid=\"tab-all\">\n              <Mail className=\"mr-2 h-4 w-4\" />\n              Tots\n            </TabsTrigger>\n          </TabsList>\n        </Tabs>\n\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Cercar missatges...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-8 w-64\"\n              data-testid=\"input-search\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Communications List and Detail */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Communications List */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">\n                Missatges ({filteredCommunications.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <ScrollArea className=\"h-96\">\n                {filteredCommunications.length === 0 ? (\n                  <div className=\"p-4 text-center text-muted-foreground\">\n                    <Mail className=\"mx-auto h-8 w-8 mb-2\" />\n                    <p>No hi ha missatges</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-1\">\n                    {filteredCommunications.map((communication: Communication, index: number) => (\n                      <div key={communication.id}>\n                        <div\n                          className={`p-4 cursor-pointer transition-colors hover:bg-accent ${\n                            selectedCommunication?.id === communication.id ? 'bg-accent' : ''\n                          } ${communication.status !== 'read' && communication.recipientId === user?.id ? 'bg-blue-50 dark:bg-blue-950' : ''}`}\n                          onClick={() => handleMarkAsRead(communication)}\n                          data-testid={`communication-item-${communication.id}`}\n                        >\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"flex items-center space-x-2 mb-1\">\n                                <p className=\"text-sm font-medium truncate\">\n                                  {communication.senderId === user?.id \n                                    ? `Para: ${communication.recipientFirstName} ${communication.recipientLastName}`\n                                    : `De: ${communication.senderFirstName} ${communication.senderLastName}`\n                                  }\n                                </p>\n                                <Badge variant={getPriorityColor(communication.priority)} className=\"text-xs\">\n                                  {t(communication.priority, language)}\n                                </Badge>\n                              </div>\n                              <p className=\"text-sm font-medium truncate mb-1\">\n                                {communication.subject}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground truncate mb-2\">\n                                {communication.message}\n                              </p>\n                              <div className=\"flex items-center justify-between\">\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {format(new Date(communication.createdAt), 'dd/MM/yyyy HH:mm', { locale: ca })}\n                                </p>\n                                <div className=\"flex items-center space-x-1\">\n                                  {getStatusIcon(communication)}\n                                  {communication.emailSent && (\n                                    <Mail className=\"h-4 w-4 text-green-600\" />\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        {index < filteredCommunications.length - 1 && <Separator />}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Communication Detail */}\n        <div className=\"lg:col-span-2\">\n          {selectedCommunication ? (\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-xl mb-2\">\n                      {selectedCommunication.subject}\n                    </CardTitle>\n                    <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Users className=\"h-4 w-4\" />\n                        <span>\n                          De: {selectedCommunication.senderFirstName} {selectedCommunication.senderLastName}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <span>\n                          {format(new Date(selectedCommunication.createdAt), 'dd MMMM yyyy, HH:mm', { locale: ca })}\n                        </span>\n                      </div>\n                      <Badge variant={getPriorityColor(selectedCommunication.priority)}>\n                        {t(selectedCommunication.priority, language)}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {selectedCommunication.emailSent && (\n                      <Badge variant=\"outline\" className=\"text-green-600\">\n                        <Mail className=\"mr-1 h-3 w-3\" />\n                        Email enviat\n                      </Badge>\n                    )}\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => deleteCommunicationMutation.mutate(selectedCommunication.id)}\n                      disabled={deleteCommunicationMutation.isPending}\n                      data-testid=\"button-delete-communication\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"prose prose-sm max-w-none\">\n                  <div className=\"whitespace-pre-wrap text-sm leading-relaxed\">\n                    {selectedCommunication.message}\n                  </div>\n                </div>\n                \n                {selectedCommunication.readAt && (\n                  <div className=\"mt-4 pt-4 border-t\">\n                    <p className=\"text-xs text-muted-foreground\">\n                      Llegit el {format(new Date(selectedCommunication.readAt), 'dd MMMM yyyy, HH:mm', { locale: ca })}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardContent className=\"flex items-center justify-center h-64\">\n                <div className=\"text-center text-muted-foreground\">\n                  <Mail className=\"mx-auto h-12 w-12 mb-4\" />\n                  <p>Selecciona un missatge per veure'n els detalls</p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":23461},"client/src/pages/Dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePermissions, useRoleDisplay } from \"@/hooks/usePermissions\";\nimport { t } from \"@/lib/i18n\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Users, \n  Clock, \n  UserPlus,\n  FolderInput,\n  Download,\n  AlertTriangle,\n  Info,\n  BarChart3,\n  MessageSquare,\n  Send,\n  Inbox,\n  LogIn,\n  LogOut,\n  Calendar,\n  TrendingUp,\n  Filter,\n  Eye,\n  QrCode,\n  UserCheck\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Dashboard() {\n  const { language } = useLanguage();\n  const { user } = useAuth();\n  const permissions = usePermissions();\n  const { getRoleDisplayName } = useRoleDisplay();\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [, setLocation] = useLocation();\n\n  // Get institution ID from authenticated user\n  const institutionId = user?.institutionId;\n\n  const { data: stats, isLoading } = useQuery<{\n    totalEmployees: number;\n    presentEmployees: number;\n    activeAlerts: number;\n  }>({\n    queryKey: [\"/api/dashboard/stats\", institutionId],\n    enabled: !!institutionId,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    staleTime: 10 * 60 * 1000, // 10 minutes\n  });\n\n  const { data: recentActivity = [], isLoading: activityLoading } = useQuery<any[]>({\n    queryKey: [\"/api/dashboard/recent-activity\", institutionId],\n    enabled: !!institutionId,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    staleTime: 10 * 60 * 1000, // 10 minutes\n  });\n\n  const { data: weeklyStats, isLoading: weeklyLoading } = useQuery<any>({\n    queryKey: [\"/api/dashboard/weekly-stats\", institutionId],\n    enabled: !!institutionId,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    staleTime: 10 * 60 * 1000, // 10 minutes\n  });\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const timeString = currentTime.toLocaleTimeString(\"ca-ES\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    hour12: false,\n  });\n\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMs / 3600000);\n    const diffDays = Math.floor(diffMs / 86400000);\n\n    if (diffMins < 1) return \"Ara mateix\";\n    if (diffMins < 60) return `Fa ${diffMins} min`;\n    if (diffHours < 24) return `Fa ${diffHours}h`;\n    if (diffDays < 7) return `Fa ${diffDays} dies`;\n    return date.toLocaleDateString(\"ca-ES\");\n  };\n\n  const getActivityIcon = (type: string, action: string) => {\n    if (type === 'communication') {\n      return action === 'sent' ? <Send className=\"h-4 w-4\" /> : <Inbox className=\"h-4 w-4\" />;\n    }\n    if (type === 'attendance') {\n      return action === 'check-in' ? <LogIn className=\"h-4 w-4\" /> : <LogOut className=\"h-4 w-4\" />;\n    }\n    return <Info className=\"h-4 w-4\" />;\n  };\n\n  const getActivityColor = (type: string, action: string, priority?: string) => {\n    if (type === 'communication') {\n      if (priority === 'urgent') return \"text-red-600 bg-red-50\";\n      if (priority === 'high') return \"text-orange-600 bg-orange-50\";\n      return action === 'sent' ? \"text-blue-600 bg-blue-50\" : \"text-green-600 bg-green-50\";\n    }\n    if (type === 'attendance') {\n      return action === 'check-in' ? \"text-green-600 bg-green-50\" : \"text-orange-600 bg-orange-50\";\n    }\n    return \"text-gray-600 bg-gray-50\";\n  };\n\n  const handleActivityClick = (activity: any) => {\n    if (activity.type === 'communication') {\n      setLocation('/communications');\n    } else if (activity.type === 'attendance') {\n      setLocation('/attendance');\n    }\n  };\n\n  const getCurrentWeekDates = () => {\n    const now = new Date();\n    const currentDay = now.getDay();\n    const daysFromMonday = currentDay === 0 ? 6 : currentDay - 1;\n    const monday = new Date(now);\n    monday.setDate(now.getDate() - daysFromMonday);\n    \n    const friday = new Date(monday);\n    friday.setDate(monday.getDate() + 4);\n    \n    return {\n      start: monday.toLocaleDateString(\"ca-ES\", { day: 'numeric', month: 'short' }),\n      end: friday.toLocaleDateString(\"ca-ES\", { day: 'numeric', month: 'short' })\n    };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const statsCards = [\n    {\n      title: t(\"present_staff\", language),\n      value: stats?.presentEmployees || 0,\n      total: stats?.totalEmployees || 0,\n      icon: Users,\n      color: \"text-rose-600 dark:text-rose-400\",\n      bgColor: \"bg-rose-100/50 dark:bg-rose-900/20\",\n      testId: \"stat-present-staff\"\n    },\n    {\n      title: t(\"total_employees\", language),\n      value: stats?.totalEmployees || 0,\n      icon: UserPlus,\n      color: \"text-pink-600 dark:text-pink-400\",\n      bgColor: \"bg-pink-100/50 dark:bg-pink-900/20\",\n      testId: \"stat-total-employees\"\n    },\n    {\n      title: t(\"active_alerts\", language),\n      value: stats?.activeAlerts || 0,\n      icon: AlertTriangle,\n      color: \"text-orange-600 dark:text-orange-400\",\n      bgColor: \"bg-orange-100/50 dark:bg-orange-900/20\",\n      testId: \"stat-active-alerts\"\n    },\n    {\n      title: t(\"attendance_rate\", language),\n      value: (stats?.totalEmployees && stats?.totalEmployees > 0) ? Math.round(((stats?.presentEmployees || 0) / stats.totalEmployees) * 100) : 0,\n      suffix: \"%\",\n      icon: BarChart3,\n      color: \"text-purple-600 dark:text-purple-400\",\n      bgColor: \"bg-purple-100/50 dark:bg-purple-900/20\",\n      testId: \"stat-attendance-rate\"\n    },\n  ];\n\n  return (\n    <main className=\"p-6 bg-gradient-to-br from-rose-50/20 via-pink-50/10 to-purple-50/20 dark:from-slate-900/20 dark:via-slate-800/10 dark:to-slate-900/20 min-h-screen\">\n      {/* Header with current time and user info */}\n      <div className=\"flex justify-between items-center mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">\n            Tauler de Control\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {getRoleDisplayName(user?.role || '', language)} • {new Date().toLocaleDateString(\"ca-ES\")}\n          </p>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-2xl font-bold text-rose-600 dark:text-rose-400\">{timeString}</div>\n          <div className=\"text-sm text-muted-foreground\">Hora actual</div>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {statsCards.map((stat) => (\n          <Card key={stat.title} data-testid={stat.testId}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">{stat.title}</p>\n                  <div className=\"text-2xl font-bold text-foreground\">\n                    {stat.total ? `${stat.value}/${stat.total}` : `${stat.value}${stat.suffix || ''}`}\n                  </div>\n                </div>\n                <div className={`p-3 rounded-full ${stat.bgColor}`}>\n                  <stat.icon className={`w-6 h-6 ${stat.color}`} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n        {permissions.canViewEmployees && (\n          <Button\n            variant=\"outline\"\n            className=\"h-16 flex flex-col gap-2\"\n            onClick={() => setLocation(\"/employees\")}\n            data-testid=\"button-employees\"\n          >\n            <Users className=\"h-5 w-5\" />\n            <span className=\"text-sm\">{t(\"manage_employees\", language)}</span>\n          </Button>\n        )}\n\n        {permissions.canViewOwnAttendance && (\n          <Button\n            variant=\"outline\"\n            className=\"h-16 flex flex-col gap-2\"\n            onClick={() => setLocation(\"/attendance\")}\n            data-testid=\"button-attendance\"\n          >\n            <Clock className=\"h-5 w-5\" />\n            <span className=\"text-sm\">{t(\"attendance\", language)}</span>\n          </Button>\n        )}\n\n        <Button\n          variant=\"outline\"\n          className=\"h-16 flex flex-col gap-2\"\n          onClick={() => setLocation(\"/communications\")}\n          data-testid=\"button-communications\"\n        >\n          <MessageSquare className=\"h-5 w-5\" />\n          <span className=\"text-sm\">Comunicacions</span>\n        </Button>\n\n        <Button\n          variant=\"outline\"\n          className=\"h-16 flex flex-col gap-2\"\n          onClick={() => setLocation(\"/reports\")}\n          data-testid=\"button-reports\"\n        >\n          <Download className=\"h-5 w-5\" />\n          <span className=\"text-sm\">{t(\"reports\", language)}</span>\n        </Button>\n      </div>\n\n      {/* Prominent QR Scanner Button */}\n      <div className=\"mb-8\">\n        <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 border-green-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-3 bg-green-100 rounded-full\">\n                  <UserCheck className=\"h-8 w-8 text-green-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">\n                    {language === \"ca\" ? \"Fitxatge QR Unificat\" : \"Fichaje QR Unificado\"}\n                  </h3>\n                  <p className=\"text-sm text-gray-600\">\n                    {language === \"ca\" \n                      ? \"Genera, visualitza i escaneja el teu QR en un sol lloc\" \n                      : \"Genera, visualiza y escanea tu QR en un solo lugar\"}\n                  </p>\n                </div>\n              </div>\n              <Button\n                onClick={() => setLocation(\"/unified-qr\")}\n                className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-3\"\n                size=\"lg\"\n                data-testid=\"button-unified-qr\"\n              >\n                <QrCode className=\"mr-2 h-5 w-5\" />\n                {language === \"ca\" ? \"Fitxatge QR Unificat\" : \"Fichaje QR Unificado\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Dashboard Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Activity */}\n        <Card className=\"lg:col-span-1\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-5 w-5\" />\n              Activitat Recent\n              {user?.role !== 'employee' && (\n                <Badge variant=\"secondary\" className=\"ml-2\">\n                  {user?.role === 'admin' ? 'Vista Centre' : 'Vista Global'}\n                </Badge>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {activityLoading ? (\n              <div className=\"animate-pulse space-y-3\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"h-16 bg-gray-200 rounded\"></div>\n                ))}\n              </div>\n            ) : recentActivity.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Info className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>No hi ha activitat recent</p>\n              </div>\n            ) : (\n              <ScrollArea className=\"h-[400px]\">\n                <div className=\"space-y-2\">\n                  {recentActivity.map((activity, index) => (\n                    <div\n                      key={`${activity.type}-${activity.id}-${index}`}\n                      className=\"flex items-start gap-3 p-3 rounded-lg border hover:bg-muted/50 transition-colors cursor-pointer\"\n                      onClick={() => handleActivityClick(activity)}\n                      data-testid={`activity-${activity.type}-${index}`}\n                    >\n                      <div className={`flex-shrink-0 mt-0.5 w-8 h-8 rounded-full flex items-center justify-center ${getActivityColor(activity.type, activity.action, activity.priority)}`}>\n                        {getActivityIcon(activity.type, activity.action)}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm font-medium text-foreground line-clamp-1\">\n                              {activity.title}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\n                              {activity.description}\n                            </p>\n                            {user?.role !== 'employee' && activity.relatedUserName && (\n                              <p className=\"text-xs text-blue-600 mt-1\">\n                                {activity.relatedUserName}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"flex flex-col items-end gap-1\">\n                            <span className=\"text-xs text-muted-foreground\">\n                              {formatTimestamp(activity.timestamp)}\n                            </span>\n                            {activity.priority && activity.priority !== 'medium' && (\n                              <Badge \n                                variant={activity.priority === 'urgent' ? 'destructive' : 'secondary'}\n                                className=\"text-xs\"\n                              >\n                                {activity.priority}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Weekly Attendance Stats */}\n        <Card className=\"lg:col-span-1\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              Assistència Setmanal\n              <Badge variant=\"outline\" className=\"ml-2\">\n                {getCurrentWeekDates().start} - {getCurrentWeekDates().end}\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {weeklyLoading ? (\n              <div className=\"animate-pulse space-y-4\">\n                <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"space-y-2\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"h-12 bg-gray-200 rounded\"></div>\n                  ))}\n                </div>\n              </div>\n            ) : !weeklyStats ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <TrendingUp className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>No hi ha dades d'assistència aquesta setmana</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {user?.role === 'employee' ? (\n                  // Personal stats view\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-3 gap-4 text-center\">\n                      <div className=\"p-3 bg-green-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          {weeklyStats.daysPresent || 0}\n                        </div>\n                        <div className=\"text-xs text-green-600\">Dies Assistència</div>\n                      </div>\n                      <div className=\"p-3 bg-blue-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-blue-600\">\n                          {Math.round((weeklyStats.totalHours || 0) * 10) / 10}h\n                        </div>\n                        <div className=\"text-xs text-blue-600\">Total Hores</div>\n                      </div>\n                      <div className=\"p-3 bg-orange-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-orange-600\">\n                          {Math.round((weeklyStats.averageHoursPerDay || 0) * 10) / 10}h\n                        </div>\n                        <div className=\"text-xs text-orange-600\">Mitjana Diària</div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-sm\">Detall Diari</h4>\n                      <ScrollArea className=\"h-[200px]\">\n                        {weeklyStats.personalStats?.length > 0 ? (\n                          weeklyStats.personalStats.map((day: any, index: number) => (\n                            <div key={index} className=\"flex items-center justify-between p-2 rounded border-l-4 border-l-green-400 bg-green-50/50 mb-2\">\n                              <div>\n                                <p className=\"font-medium text-sm\">\n                                  {new Date(day.day).toLocaleDateString('ca-ES', { weekday: 'long', day: 'numeric', month: 'short' })}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {day.check_ins > 0 ? `${day.check_ins} entrades, ${day.check_outs} sortides` : 'Sense registres'}\n                                </p>\n                              </div>\n                              <div className=\"text-right\">\n                                <p className=\"font-medium text-sm\">\n                                  {day.hours_worked ? `${Math.round(day.hours_worked * 10) / 10}h` : '0h'}\n                                </p>\n                                {day.first_check_in && (\n                                  <p className=\"text-xs text-muted-foreground\">\n                                    {new Date(day.first_check_in).toLocaleTimeString('ca-ES', { hour: '2-digit', minute: '2-digit' })}\n                                  </p>\n                                )}\n                              </div>\n                            </div>\n                          ))\n                        ) : (\n                          <p className=\"text-center text-muted-foreground py-4\">No hi ha registres aquesta setmana</p>\n                        )}\n                      </ScrollArea>\n                    </div>\n                  </div>\n                ) : (\n                  // Admin/Director view\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4 text-center\">\n                      <div className=\"p-3 bg-blue-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-blue-600\">\n                          {weeklyStats.summary?.total_employees || 0}\n                        </div>\n                        <div className=\"text-xs text-blue-600\">Total Empleats</div>\n                      </div>\n                      <div className=\"p-3 bg-green-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          {weeklyStats.summary?.employees_with_records || 0}\n                        </div>\n                        <div className=\"text-xs text-green-600\">Amb Registres</div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium text-sm\">Empleats aquesta setmana</h4>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => setLocation('/attendance')}\n                          className=\"text-xs\"\n                        >\n                          <Eye className=\"h-3 w-3 mr-1\" />\n                          Veure tot\n                        </Button>\n                      </div>\n                      <ScrollArea className=\"h-[200px]\">\n                        {weeklyStats.employeeStats && weeklyStats.employeeStats.length > 0 ? (\n                          weeklyStats.employeeStats\n                            .filter((emp: any) => emp.day) // Only show employees with records\n                            .slice(0, 20) // Limit to prevent performance issues\n                            .map((emp: any, index: number) => (\n                            <div key={`${emp.user_id}-${emp.day}-${index}`} className=\"flex items-center justify-between p-2 rounded hover:bg-muted/50 mb-1\">\n                              <div>\n                                <p className=\"font-medium text-sm\">{emp.name}</p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {new Date(emp.day).toLocaleDateString('ca-ES', { weekday: 'short', day: 'numeric' })}\n                                </p>\n                              </div>\n                              <div className=\"text-right\">\n                                <p className=\"font-medium text-sm\">\n                                  {emp.hours_worked ? `${Math.round(emp.hours_worked * 10) / 10}h` : '0h'}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {emp.check_ins || 0}E/{emp.check_outs || 0}S\n                                </p>\n                              </div>\n                            </div>\n                          ))\n                        ) : (\n                          <p className=\"text-center text-muted-foreground py-4\">No hi ha registres d'empleats aquesta setmana</p>\n                        )}\n                      </ScrollArea>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </main>\n  );\n}","size_bytes":23163},"client/src/pages/DataSubjectRights.tsx":{"content":"import { useState } from \"react\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { t } from \"@/lib/i18n\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { UserCheck, Download, Edit, Trash2, ShieldOff, RefreshCw, Mail } from \"lucide-react\";\n\nexport default function DataSubjectRights() {\n  const { language } = useLanguage();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const [requestType, setRequestType] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [contactEmail, setContactEmail] = useState(user?.email || \"\");\n\n  const submitRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      return await apiRequest(\"POST\", \"/api/data-subject-rights\", requestData);\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Èxit\" : \"Éxito\",\n        description: language === \"ca\" \n          ? \"Sol·licitud enviada correctament. Rebràs una resposta en un màxim de 30 dies.\"\n          : \"Solicitud enviada correctamente. Recibirás una respuesta en un máximo de 30 días.\",\n      });\n      setRequestType(\"\");\n      setDescription(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: error.message || (language === \"ca\" ? \"Error enviant la sol·licitud\" : \"Error enviando la solicitud\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const downloadMyDataMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"GET\", \"/api/data-subject-rights/my-data\");\n    },\n    onSuccess: async (data: any) => {\n      try {\n        // Import jsPDF dynamically\n        const { jsPDF } = await import('jspdf');\n        \n        // Create PDF document\n        const doc = new jsPDF();\n        const pageWidth = doc.internal.pageSize.width;\n        const margin = 20;\n        let yPosition = 30;\n        \n        // Header with digital signature info\n        doc.setFontSize(16);\n        doc.setFont('helvetica', 'bold');\n        doc.text('EXPORTACIÓ DE DADES PERSONALS - RGPD', pageWidth / 2, yPosition, { align: 'center' } as any);\n        \n        yPosition += 20;\n        doc.setFontSize(10);\n        doc.setFont('helvetica', 'normal');\n        doc.text(`Document ID: ${data.document_info.export_id}`, margin, yPosition);\n        yPosition += 8;\n        doc.text(`Data d'exportació: ${new Date(data.document_info.export_date).toLocaleString('ca-ES')}`, margin, yPosition);\n        yPosition += 8;\n        doc.text(`Usuari: ${data.document_info.user_name}`, margin, yPosition);\n        yPosition += 8;\n        doc.text(`Signatura digital: ${data.document_info.digital_signature.substring(0, 32)}...`, margin, yPosition);\n        \n        // Digital signature certification\n        yPosition += 15;\n        doc.setFontSize(8);\n        doc.setFont('helvetica', 'italic');\n        const certText = doc.splitTextToSize(data.document_info.certification, pageWidth - 2 * margin);\n        doc.text(certText, margin, yPosition);\n        yPosition += certText.length * 4 + 10;\n        \n        // Personal Data Section\n        doc.setFontSize(12);\n        doc.setFont('helvetica', 'bold');\n        doc.text('DADES PERSONALS', margin, yPosition);\n        yPosition += 10;\n        \n        doc.setFontSize(10);\n        doc.setFont('helvetica', 'normal');\n        doc.text(`Email: ${data.personal_data.email}`, margin, yPosition);\n        yPosition += 8;\n        doc.text(`Nom: ${data.personal_data.firstName} ${data.personal_data.lastName}`, margin, yPosition);\n        yPosition += 8;\n        doc.text(`Rol: ${data.personal_data.role}`, margin, yPosition);\n        yPosition += 8;\n        doc.text(`Data de creació: ${new Date(data.personal_data.createdAt).toLocaleString('ca-ES')}`, margin, yPosition);\n        \n        // Employee Data Section (if exists)\n        if (data.employee_data) {\n          yPosition += 15;\n          doc.setFontSize(12);\n          doc.setFont('helvetica', 'bold');\n          doc.text('DADES D\\'EMPLEAT', margin, yPosition);\n          yPosition += 10;\n          \n          doc.setFontSize(10);\n          doc.setFont('helvetica', 'normal');\n          doc.text(`DNI: ${data.employee_data.dni || 'No disponible'}`, margin, yPosition);\n          yPosition += 8;\n          doc.text(`Departament: ${data.employee_data.department || 'No disponible'}`, margin, yPosition);\n          yPosition += 8;\n          doc.text(`Posició: ${data.employee_data.position || 'No disponible'}`, margin, yPosition);\n        }\n        \n        // Legal Information\n        yPosition += 15;\n        doc.setFontSize(12);\n        doc.setFont('helvetica', 'bold');\n        doc.text('INFORMACIÓ LEGAL', margin, yPosition);\n        yPosition += 10;\n        \n        doc.setFontSize(10);\n        doc.setFont('helvetica', 'normal');\n        doc.text(`Base legal: ${data.legal_info.legal_basis}`, margin, yPosition);\n        yPosition += 8;\n        doc.text(`Article RGPD: ${data.legal_info.gdpr_article}`, margin, yPosition);\n        yPosition += 8;\n        doc.text(`Període de conservació: ${data.legal_info.retention_period}`, margin, yPosition);\n        \n        // Audit Trail\n        yPosition += 15;\n        doc.setFontSize(12);\n        doc.setFont('helvetica', 'bold');\n        doc.text('REGISTRE D\\'AUDITORIA', margin, yPosition);\n        yPosition += 10;\n        \n        doc.setFontSize(10);\n        doc.setFont('helvetica', 'normal');\n        doc.text(`Exportat per: ${data.audit_trail.exported_by}`, margin, yPosition);\n        yPosition += 8;\n        doc.text(`Timestamp: ${new Date(data.audit_trail.export_timestamp).toLocaleString('ca-ES')}`, margin, yPosition);\n        yPosition += 8;\n        doc.text(`IP Address: ${data.audit_trail.ip_address}`, margin, yPosition);\n        \n        // Footer with digital signature\n        const pageHeight = doc.internal.pageSize.height;\n        doc.setFontSize(8);\n        doc.setFont('helvetica', 'italic');\n        doc.text('Aquest document està signat digitalment i compleix amb els requisits del RGPD', \n                pageWidth / 2, pageHeight - 15, { align: 'center' } as any);\n        doc.text(`Signatura: ${data.document_info.digital_signature}`, \n                pageWidth / 2, pageHeight - 10, { align: 'center' } as any);\n        \n        // Generate filename with user name and date\n        const userName = data.personal_data.firstName && data.personal_data.lastName \n          ? `${data.personal_data.firstName}_${data.personal_data.lastName}`.replace(/\\s+/g, '_')\n          : data.personal_data.email.split('@')[0];\n        const exportDate = new Date().toISOString().split('T')[0];\n        const filename = `dades_personals_${userName}_${exportDate}.pdf`;\n        \n        // Download PDF\n        doc.save(filename);\n        \n        toast({\n          title: language === \"ca\" ? \"Èxit\" : \"Éxito\",\n          description: language === \"ca\" ? \"Document PDF signat digitalment descarregat correctament\" : \"Documento PDF firmado digitalmente descargado correctamente\",\n        });\n      } catch (pdfError) {\n        console.error('PDF generation error:', pdfError);\n        // Fallback to JSON if PDF fails\n        const dataStr = JSON.stringify(data, null, 2);\n        const dataBlob = new Blob([dataStr], { type: 'application/json' });\n        const url = URL.createObjectURL(dataBlob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `my-data-${new Date().toISOString().split('T')[0]}.json`;\n        link.click();\n        URL.revokeObjectURL(url);\n        \n        toast({\n          title: language === \"ca\" ? \"Avís\" : \"Aviso\",\n          description: language === \"ca\" ? \"PDF no disponible, descarregat en format JSON\" : \"PDF no disponible, descargado en formato JSON\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: error.message || (language === \"ca\" ? \"Error descarregant les dades\" : \"Error descargando los datos\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitRequest = () => {\n    if (!requestType || !description) {\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: language === \"ca\" ? \"Completa tots els camps obligatoris\" : \"Completa todos los campos obligatorios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitRequestMutation.mutate({\n      type: requestType,\n      description,\n      contactEmail,\n      userId: user?.id,\n    });\n  };\n\n  const rightOptions = [\n    {\n      value: \"access\",\n      label: language === \"ca\" ? \"Accés a les meves dades\" : \"Acceso a mis datos\",\n      icon: UserCheck,\n      description: language === \"ca\" \n        ? \"Sol·licitar informació sobre les dades que es tracten\"\n        : \"Solicitar información sobre los datos que se tratan\"\n    },\n    {\n      value: \"rectification\",\n      label: language === \"ca\" ? \"Rectificació de dades\" : \"Rectificación de datos\",\n      icon: Edit,\n      description: language === \"ca\" \n        ? \"Corregir dades incorrectes o incompletes\"\n        : \"Corregir datos incorrectos o incompletos\"\n    },\n    {\n      value: \"erasure\",\n      label: language === \"ca\" ? \"Supressió de dades\" : \"Supresión de datos\", \n      icon: Trash2,\n      description: language === \"ca\" \n        ? \"Sol·licitar l'eliminació de les meves dades\"\n        : \"Solicitar la eliminación de mis datos\"\n    },\n    {\n      value: \"restriction\",\n      label: language === \"ca\" ? \"Limitació del tractament\" : \"Limitación del tratamiento\",\n      icon: ShieldOff,\n      description: language === \"ca\" \n        ? \"Limitar l'ús de les meves dades\"\n        : \"Limitar el uso de mis datos\"\n    },\n    {\n      value: \"portability\",\n      label: language === \"ca\" ? \"Portabilitat de dades\" : \"Portabilidad de datos\",\n      icon: RefreshCw,\n      description: language === \"ca\" \n        ? \"Rebre les dades en format estructurat\"\n        : \"Recibir los datos en formato estructurado\"\n    },\n    {\n      value: \"objection\",\n      label: language === \"ca\" ? \"Oposició al tractament\" : \"Oposición al tratamiento\",\n      icon: ShieldOff,\n      description: language === \"ca\" \n        ? \"Oposar-se al tractament de les meves dades\"\n        : \"Oponerse al tratamiento de mis datos\"\n    }\n  ];\n\n  return (\n    <main className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-text mb-2\">\n            {language === \"ca\" ? \"Exercici de Drets RGPD\" : \"Ejercicio de Derechos RGPD\"}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {language === \"ca\" \n              ? \"Exerceix els teus drets sobre les teves dades personals\"\n              : \"Ejerce tus derechos sobre tus datos personales\"}\n          </p>\n        </div>\n\n        {/* Descàrrega ràpida de dades */}\n        <Card className=\"mb-6\" data-testid=\"quick-download-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Download className=\"mr-2 h-5 w-5 text-blue-600\" />\n              {language === \"ca\" ? \"Descàrrega ràpida de dades\" : \"Descarga rápida de datos\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n              <div>\n                <p className=\"font-medium text-blue-800\">\n                  {language === \"ca\" ? \"Descarrega totes les teves dades\" : \"Descarga todos tus datos\"}\n                </p>\n                <p className=\"text-sm text-blue-700\">\n                  {language === \"ca\" \n                    ? \"Obté un document PDF signat digitalment amb totes les teves dades i registre de sortida\"\n                    : \"Obtén un documento PDF firmado digitalmente con todos tus datos y registro de salida\"}\n                </p>\n              </div>\n              <Button\n                onClick={() => downloadMyDataMutation.mutate()}\n                disabled={downloadMyDataMutation.isPending}\n                data-testid=\"download-my-data-button\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                {downloadMyDataMutation.isPending \n                  ? (language === \"ca\" ? \"Descarregant...\" : \"Descargando...\")\n                  : (language === \"ca\" ? \"Descarregar\" : \"Descargar\")}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Formulari de sol·licitud de drets */}\n        <Card data-testid=\"rights-request-form\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Mail className=\"mr-2 h-5 w-5 text-green-600\" />\n              {language === \"ca\" ? \"Sol·licitud formal de drets\" : \"Solicitud formal de derechos\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"request-type\">\n                  {language === \"ca\" ? \"Tipus de dret que vols exercir\" : \"Tipo de derecho que quieres ejercer\"}\n                </Label>\n                <Select value={requestType} onValueChange={setRequestType}>\n                  <SelectTrigger id=\"request-type\" data-testid=\"request-type-select\">\n                    <SelectValue placeholder={language === \"ca\" ? \"Selecciona un dret\" : \"Selecciona un derecho\"} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {rightOptions.map((option) => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {requestType && (\n                <div className=\"p-4 bg-gray-50 border border-gray-200 rounded-lg\">\n                  {(() => {\n                    const selectedOption = rightOptions.find(opt => opt.value === requestType);\n                    const IconComponent = selectedOption?.icon || UserCheck;\n                    return (\n                      <div className=\"flex items-start\">\n                        <IconComponent className=\"mr-3 h-5 w-5 text-gray-600 mt-0.5\" />\n                        <div>\n                          <p className=\"font-medium text-gray-800 mb-1\">{selectedOption?.label}</p>\n                          <p className=\"text-sm text-gray-600\">{selectedOption?.description}</p>\n                        </div>\n                      </div>\n                    );\n                  })()}\n                </div>\n              )}\n\n              <div>\n                <Label htmlFor=\"contact-email\">\n                  {language === \"ca\" ? \"Correu electrònic de contacte\" : \"Correo electrónico de contacto\"}\n                </Label>\n                <Input\n                  id=\"contact-email\"\n                  type=\"email\"\n                  value={contactEmail}\n                  onChange={(e) => setContactEmail(e.target.value)}\n                  data-testid=\"contact-email-input\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">\n                  {language === \"ca\" ? \"Descripció detallada\" : \"Descripción detallada\"}\n                </Label>\n                <Textarea\n                  id=\"description\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  placeholder={language === \"ca\" \n                    ? \"Explica en detall la teva sol·licitud...\"\n                    : \"Explica en detalle tu solicitud...\"}\n                  rows={4}\n                  data-testid=\"description-textarea\"\n                />\n              </div>\n\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                <p className=\"text-sm text-yellow-800\">\n                  <strong>{language === \"ca\" ? \"Temps de resposta:\" : \"Tiempo de respuesta:\"}</strong>\n                  {\" \"}\n                  {language === \"ca\" \n                    ? \"Respondrem a la teva sol·licitud en un màxim de 30 dies naturals.\"\n                    : \"Responderemos a tu solicitud en un máximo de 30 días naturales.\"}\n                </p>\n              </div>\n\n              <Button\n                onClick={handleSubmitRequest}\n                disabled={submitRequestMutation.isPending || !requestType || !description}\n                className=\"w-full\"\n                data-testid=\"submit-request-button\"\n              >\n                <Mail className=\"mr-2 h-4 w-4\" />\n                {submitRequestMutation.isPending \n                  ? (language === \"ca\" ? \"Enviant...\" : \"Enviando...\")\n                  : (language === \"ca\" ? \"Enviar sol·licitud\" : \"Enviar solicitud\")}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Informació legal */}\n        <Card className=\"mt-6\" data-testid=\"legal-info-card\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-sm text-muted-foreground space-y-2\">\n              <p>\n                <strong>{language === \"ca\" ? \"Base legal:\" : \"Base legal:\"}</strong>\n                {\" \"}\n                {language === \"ca\" \n                  ? \"Aquesta sol·licitud es processa segons els articles 12-22 del RGPD.\"\n                  : \"Esta solicitud se procesa según los artículos 12-22 del RGPD.\"}\n              </p>\n              <p>\n                <strong>{language === \"ca\" ? \"Autoritats de control:\" : \"Autoridades de control:\"}</strong>\n                {\" \"}\n                {language === \"ca\" \n                  ? \"Pots presentar una reclamació davant l'APDCAT o l'AEPD.\"\n                  : \"Puedes presentar una reclamación ante la APDCAT o la AEPD.\"}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </main>\n  );\n}","size_bytes":18615},"client/src/pages/Employees.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { t } from \"@/lib/i18n\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  FolderInput, \n  Plus, \n  Search, \n  Edit, \n  Clock, \n  Trash2,\n  User\n} from \"lucide-react\";\nimport EmployeeModal from \"@/components/modals/EmployeeModal\";\nimport EmployeeDetailModal from \"@/components/EmployeeDetailModal\";\nimport type { Employee } from \"@shared/schema\";\n\nexport default function Employees() {\n  const { language } = useLanguage();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [departmentFilter, setDepartmentFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null);\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\n  const [viewingEmployee, setViewingEmployee] = useState<any | null>(null);\n\n  // Get institution ID from authenticated user\n  const institutionId = user?.institutionId;\n\n  const { data: employees = [], isLoading } = useQuery<Employee[]>({\n    queryKey: [\"/api/admin/employees\", institutionId, searchQuery],\n    queryFn: async () => {\n      console.log('EMPLOYEES: Fetching employees for admin, institution:', institutionId);\n      if (!institutionId) {\n        throw new Error('No institution ID available');\n      }\n      const response = await fetch(`/api/admin/employees/${institutionId}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch employees');\n      }\n      const data = await response.json();\n      console.log('EMPLOYEES: Received employees data:', data);\n      return data;\n    },\n    enabled: !!institutionId,\n  });\n\n  const deleteEmployeeMutation = useMutation({\n    mutationFn: async (employeeId: string) => {\n      await apiRequest(\"DELETE\", `/api/employees/${employeeId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/employees\"] });\n      toast({\n        title: t(\"success\", language),\n        description: language === \"ca\" ? \"Empleat eliminat correctament\" : \"Empleado eliminado correctamente\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\", language),\n        description: language === \"ca\" ? \"Error eliminant l'empleat\" : \"Error eliminando el empleado\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (employee: Employee) => {\n    setEditingEmployee(employee);\n    setIsModalOpen(true);\n  };\n\n  const handleDelete = (employee: Employee) => {\n    if (confirm(language === \"ca\" ? \n      `Estàs segur que vols eliminar ${employee.fullName}?` : \n      `¿Estás seguro que quieres eliminar ${employee.fullName}?`)) {\n      deleteEmployeeMutation.mutate(employee.id);\n    }\n  };\n\n  const handleModalClose = () => {\n    setIsModalOpen(false);\n    setEditingEmployee(null);\n  };\n\n  const handleViewDetails = (employee: any) => {\n    setViewingEmployee(employee);\n    setIsDetailModalOpen(true);\n  };\n\n  const handleDetailModalClose = () => {\n    setIsDetailModalOpen(false);\n    setViewingEmployee(null);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      active: { \n        label: t(\"active\", language), \n        variant: \"default\" as const,\n        className: \"bg-secondary/10 text-secondary\"\n      },\n      inactive: { \n        label: t(\"inactive\", language), \n        variant: \"secondary\" as const,\n        className: \"bg-gray-100 text-gray-600\"\n      },\n      temporary_leave: { \n        label: t(\"temporary_leave\", language), \n        variant: \"outline\" as const,\n        className: \"bg-accent/10 text-accent\"\n      },\n    };\n    \n    const statusInfo = statusMap[status as keyof typeof statusMap] || statusMap.active;\n    \n    return (\n      <Badge variant={statusInfo.variant} className={statusInfo.className}>\n        {statusInfo.label}\n      </Badge>\n    );\n  };\n\n  const getContractTypeLabel = (type: string) => {\n    const typeMap = {\n      full_time: t(\"full_time\", language),\n      part_time: t(\"part_time\", language),\n      substitute: t(\"substitute\", language),\n    };\n    return typeMap[type as keyof typeof typeMap] || type;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-32 bg-gray-200 rounded\"></div>\n          <div className=\"h-96 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <main className=\"p-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-semibold text-text mb-2\">\n            {t(\"employee_management\", language)}\n          </h2>\n          <p className=\"text-gray-600\">\n            {language === \"ca\" \n              ? \"Administra els empleats del centre educatiu\"\n              : \"Administra los empleados del centro educativo\"}\n          </p>\n        </div>\n        <div className=\"flex space-x-3 mt-4 sm:mt-0\">\n          <Button \n            variant=\"outline\"\n            className=\"bg-secondary text-white hover:bg-green-700\"\n            data-testid=\"import-button\"\n          >\n            <FolderInput className=\"mr-2 h-4 w-4\" />\n            {language === \"ca\" ? \"Importar\" : \"Importar\"}\n          </Button>\n          <Button \n            onClick={() => setIsModalOpen(true)}\n            data-testid=\"add-employee-button\"\n          >\n            <Plus className=\"mr-2 h-4 w-4\" />\n            {t(\"add_employee\", language)}\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\" data-testid=\"filters-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"search\">{t(\"search\", language)}</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Nom, DNI, correu...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"search-input\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label>{t(\"department\", language)}</Label>\n              <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                <SelectTrigger data-testid=\"department-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">\n                    {language === \"ca\" ? \"Tots\" : \"Todos\"}\n                  </SelectItem>\n                  <SelectItem value=\"primary\">\n                    {t(\"primary_education\", language)}\n                  </SelectItem>\n                  <SelectItem value=\"secondary\">\n                    {t(\"secondary_education\", language)}\n                  </SelectItem>\n                  <SelectItem value=\"administration\">\n                    {t(\"administration\", language)}\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label>{t(\"status\", language)}</Label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger data-testid=\"status-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">\n                    {language === \"ca\" ? \"Tots\" : \"Todos\"}\n                  </SelectItem>\n                  <SelectItem value=\"active\">{t(\"active\", language)}</SelectItem>\n                  <SelectItem value=\"inactive\">{t(\"inactive\", language)}</SelectItem>\n                  <SelectItem value=\"temporary_leave\">{t(\"temporary_leave\", language)}</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-end\">\n              <Button className=\"w-full\" data-testid=\"filter-button\">\n                <Search className=\"mr-2 h-4 w-4\" />\n                {t(\"filter\", language)}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Employee Table */}\n      <Card data-testid=\"employees-table-card\">\n        <CardHeader>\n          <CardTitle>{t(\"employee_list\", language)}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>{t(\"employee\", language)}</TableHead>\n                  <TableHead>DNI</TableHead>\n                  <TableHead>{t(\"department\", language)}</TableHead>\n                  <TableHead>{language === \"ca\" ? \"Hores setmanals\" : \"Horas semanales\"}</TableHead>\n                  <TableHead>{t(\"status\", language)}</TableHead>\n                  <TableHead>{t(\"actions\", language)}</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {employees.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\">\n                      <p className=\"text-gray-500\">\n                        {language === \"ca\" \n                          ? \"No s'han trobat empleats\"\n                          : \"No se han encontrado empleados\"}\n                      </p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  employees.map((employee: any) => (\n                    <TableRow key={employee.id} data-testid={`employee-row-${employee.id}`}>\n                      <TableCell>\n                        <div className=\"flex items-center\">\n                          <div\n                            className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center mr-4 cursor-pointer hover:bg-primary/20 transition-colors\"\n                            onClick={() => handleViewDetails(employee)}\n                            data-testid={`employee-avatar-${employee.id}`}\n                            title={language === \"ca\" ? \"Veure detalls de l'empleat\" : \"Ver detalles del empleado\"}\n                          >\n                            <User className=\"h-5 w-5 text-primary\" />\n                          </div>\n                          <div>\n                            <div \n                              className=\"font-medium text-text cursor-pointer hover:text-primary transition-colors\" \n                              data-testid={`employee-name-${employee.id}`}\n                              onClick={() => handleViewDetails(employee)}\n                              title={language === \"ca\" ? \"Veure detalls de l'empleat\" : \"Ver detalles del empleado\"}\n                            >\n                              {employee.firstName} {employee.lastName}\n                            </div>\n                            <div className=\"text-sm text-gray-500\" data-testid={`employee-email-${employee.id}`}>\n                              {employee.email}\n                            </div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell data-testid={`employee-dni-${employee.id}`}>\n                        {employee.dni || \"--\"}\n                      </TableCell>\n                      <TableCell data-testid={`employee-department-${employee.id}`}>\n                        {employee.departmentId || t(\"administration\", language)}\n                      </TableCell>\n                      <TableCell data-testid={`employee-schedule-${employee.id}`}>\n                        <div className=\"flex items-center gap-2\">\n                          <Clock className=\"h-4 w-4 text-gray-500\" />\n                          <span>{employee.totalHours || \"0\"} {language === \"ca\" ? \"hores\" : \"horas\"}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell data-testid={`employee-status-${employee.id}`}>\n                        <Badge variant=\"default\" className=\"bg-secondary/10 text-secondary\">\n                          {t(\"active\", language)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(employee)}\n                            className=\"text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n                            data-testid={`edit-employee-${employee.id}`}\n                            title={language === \"ca\" ? \"Editar empleat\" : \"Editar empleado\"}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleViewDetails(employee)}\n                            className=\"text-gray-600 hover:text-gray-700 hover:bg-gray-50\"\n                            data-testid={`schedule-employee-${employee.id}`}\n                            title={language === \"ca\" ? \"Veure detalls\" : \"Ver detalles\"}\n                          >\n                            <User className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(employee)}\n                            className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                            data-testid={`delete-employee-${employee.id}`}\n                            title={language === \"ca\" ? \"Eliminar empleat\" : \"Eliminar empleado\"}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Employee Modal */}\n      <EmployeeModal \n        isOpen={isModalOpen}\n        onClose={handleModalClose}\n        employee={editingEmployee}\n        institutionId={institutionId || \"\"}\n      />\n\n      {/* Employee Detail Modal */}\n      <EmployeeDetailModal\n        isOpen={isDetailModalOpen}\n        onClose={handleDetailModalClose}\n        employee={viewingEmployee}\n        institutionId={institutionId || \"\"}\n      />\n    </main>\n  );\n}\n","size_bytes":15830},"client/src/pages/InstitutionManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { t } from \"@/lib/i18n\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Plus, Edit, Trash2, Building } from \"lucide-react\";\nimport type { Institution, InsertInstitution } from \"@shared/schema\";\n\nexport default function InstitutionManagement() {\n  const { language } = useLanguage();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingInstitution, setEditingInstitution] = useState<Institution | null>(null);\n  const [formData, setFormData] = useState<Partial<InsertInstitution>>({\n    name: \"\",\n    address: \"\",\n    timezone: \"Europe/Barcelona\",\n    defaultLanguage: \"ca\"\n  });\n\n  const { data: institutions = [], isLoading } = useQuery<Institution[]>({\n    queryKey: [\"/api/institutions\"],\n    enabled: user?.role === \"superadmin\",\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertInstitution) => {\n      return await apiRequest(\"POST\", \"/api/institutions\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/institutions\"] });\n      toast({\n        title: t(\"success\", language),\n        description: language === \"ca\" ? \"Institució creada correctament\" : \"Institución creada correctamente\",\n      });\n      setIsCreateDialogOpen(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\", language),\n        description: language === \"ca\" ? \"Error creant la institució\" : \"Error creando la institución\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      address: \"\",\n      timezone: \"Europe/Barcelona\",\n      defaultLanguage: \"ca\"\n    });\n    setEditingInstitution(null);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (formData.name) {\n      createMutation.mutate(formData as InsertInstitution);\n    }\n  };\n\n  // Check if user has superadmin access\n  if (user?.role !== \"superadmin\") {\n    return (\n      <div className=\"p-6\">\n        <Card>\n          <CardContent className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center\">\n              <Building className=\"mx-auto h-16 w-16 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {language === \"ca\" ? \"Accés restringit\" : \"Acceso restringido\"}\n              </h3>\n              <p className=\"text-gray-600\">\n                {language === \"ca\" \n                  ? \"Només els superadministradors poden gestionar institucions\" \n                  : \"Solo los superadministradores pueden gestionar instituciones\"}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold text-text\">\n          {language === \"ca\" ? \"Gestió d'Institucions\" : \"Gestión de Instituciones\"}\n        </h1>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"create-institution-button\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              {language === \"ca\" ? \"Nova Institució\" : \"Nueva Institución\"}\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"modal-content-solid\">\n            <DialogHeader>\n              <DialogTitle>\n                {language === \"ca\" ? \"Crear Nova Institució\" : \"Crear Nueva Institución\"}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">\n                  {language === \"ca\" ? \"Nom de la Institució\" : \"Nombre de la Institución\"}\n                </Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  placeholder=\"Institut Bitàcola\"\n                  required\n                  data-testid=\"institution-name-input\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"address\">\n                  {language === \"ca\" ? \"Adreça\" : \"Dirección\"}\n                </Label>\n                <Input\n                  id=\"address\"\n                  value={formData.address}\n                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                  placeholder=\"Carrer de l'Educació, 123, 08080 Barcelona\"\n                  data-testid=\"institution-address-input\"\n                />\n              </div>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <Label htmlFor=\"timezone\">\n                    {language === \"ca\" ? \"Zona Horària\" : \"Zona Horaria\"}\n                  </Label>\n                  <Input\n                    id=\"timezone\"\n                    value={formData.timezone}\n                    onChange={(e) => setFormData({ ...formData, timezone: e.target.value })}\n                    data-testid=\"institution-timezone-input\"\n                  />\n                </div>\n                <div className=\"flex-1\">\n                  <Label htmlFor=\"defaultLanguage\">\n                    {language === \"ca\" ? \"Idioma per Defecte\" : \"Idioma por Defecto\"}\n                  </Label>\n                  <select\n                    id=\"defaultLanguage\"\n                    value={formData.defaultLanguage}\n                    onChange={(e) => setFormData({ ...formData, defaultLanguage: e.target.value })}\n                    className=\"w-full h-10 px-3 py-2 border border-gray-300 rounded-md\"\n                    data-testid=\"institution-language-select\"\n                  >\n                    <option value=\"ca\">Català</option>\n                    <option value=\"es\">Español</option>\n                  </select>\n                </div>\n              </div>\n              <div className=\"flex gap-2 pt-4\">\n                <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"submit-institution-button\">\n                  {createMutation.isPending ? \n                    (language === \"ca\" ? \"Creant...\" : \"Creando...\") :\n                    (language === \"ca\" ? \"Crear Institució\" : \"Crear Institución\")\n                  }\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsCreateDialogOpen(false)}\n                  data-testid=\"cancel-institution-button\"\n                >\n                  {t(\"cancel\", language)}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card data-testid=\"institutions-table-card\">\n        <CardHeader>\n          <CardTitle>\n            {language === \"ca\" ? \"Institucions Registrades\" : \"Instituciones Registradas\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>{language === \"ca\" ? \"Nom\" : \"Nombre\"}</TableHead>\n                  <TableHead>{language === \"ca\" ? \"Adreça\" : \"Dirección\"}</TableHead>\n                  <TableHead>{language === \"ca\" ? \"Zona Horària\" : \"Zona Horaria\"}</TableHead>\n                  <TableHead>{language === \"ca\" ? \"Idioma\" : \"Idioma\"}</TableHead>\n                  <TableHead>{language === \"ca\" ? \"Data de Creació\" : \"Fecha de Creación\"}</TableHead>\n                  <TableHead>{t(\"actions\", language)}</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {institutions.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\">\n                      <p className=\"text-gray-500\">\n                        {language === \"ca\" \n                          ? \"No s'han trobat institucions\"\n                          : \"No se han encontrado instituciones\"}\n                      </p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  institutions.map((institution: Institution) => (\n                    <TableRow key={institution.id} data-testid={`institution-row-${institution.id}`}>\n                      <TableCell className=\"font-medium\" data-testid={`institution-name-${institution.id}`}>\n                        {institution.name}\n                      </TableCell>\n                      <TableCell data-testid={`institution-address-${institution.id}`}>\n                        {institution.address || \"-\"}\n                      </TableCell>\n                      <TableCell data-testid={`institution-timezone-${institution.id}`}>\n                        {institution.timezone}\n                      </TableCell>\n                      <TableCell data-testid={`institution-language-${institution.id}`}>\n                        {institution.defaultLanguage === \"ca\" ? \"Català\" : \"Español\"}\n                      </TableCell>\n                      <TableCell data-testid={`institution-created-${institution.id}`}>\n                        {institution.createdAt ? new Date(institution.createdAt).toLocaleDateString(\"ca-ES\") : \"-\"}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => setEditingInstitution(institution)}\n                            data-testid={`edit-institution-${institution.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            className=\"text-red-600 hover:text-red-700\"\n                            data-testid={`delete-institution-${institution.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11685},"client/src/pages/Landing.tsx":{"content":"import { useLanguage } from \"@/hooks/useLanguage\";\nimport { t } from \"@/lib/i18n\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { GraduationCap, Shield, Clock, BarChart3 } from \"lucide-react\";\n\nexport default function Landing() {\n  const { language } = useLanguage();\n\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  const features = [\n    {\n      icon: Shield,\n      title: language === \"ca\" ? \"Compliment RGPD\" : \"Cumplimiento RGPD\",\n      description: language === \"ca\" ? \"Protecció de dades garantida\" : \"Protección de datos garantizada\"\n    },\n    {\n      icon: Clock,\n      title: language === \"ca\" ? \"Control horari intel·ligent\" : \"Control horario inteligente\", \n      description: language === \"ca\" ? \"Gestió automatizada d'absències\" : \"Gestión automatizada de ausencias\"\n    },\n    {\n      icon: BarChart3,\n      title: language === \"ca\" ? \"Informes detallats\" : \"Informes detallados\",\n      description: language === \"ca\" ? \"Estadístiques i anàlisis avançades\" : \"Estadísticas y análisis avanzados\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left Panel - Branding */}\n      <div className=\"hidden lg:flex lg:w-1/2 bg-gradient-to-br from-primary to-blue-600 text-white p-12 flex-col justify-center\">\n        <div className=\"max-w-md mx-auto\">\n          <div className=\"mb-8\">\n            <div className=\"w-16 h-16 bg-white/10 rounded-2xl flex items-center justify-center mb-4\">\n              <span className=\"text-3xl font-bold text-white\">F</span>\n            </div>\n            <h1 className=\"text-4xl font-bold mb-4\">fich.ai</h1>\n            <p className=\"text-xl text-blue-100\">\n              {language === \"ca\" \n                ? \"Sistema integral de control de presència per a centres educatius\"\n                : \"Sistema integral de control de presencia para centros educativos\"}\n            </p>\n          </div>\n          \n          <div className=\"space-y-6\">\n            {features.map((feature, index) => (\n              <div key={index} className=\"flex items-center\">\n                <feature.icon className=\"text-2xl mr-4 h-8 w-8\" />\n                <div>\n                  <h3 className=\"font-semibold\">{feature.title}</h3>\n                  <p className=\"text-blue-100 text-sm\">{feature.description}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Right Panel - Login */}\n      <div className=\"w-full lg:w-1/2 flex flex-col justify-center px-8 py-12\">\n        <div className=\"max-w-md mx-auto w-full\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-text mb-2\">\n              {language === \"ca\" ? \"Accés al sistema\" : \"Acceso al sistema\"}\n            </h2>\n            <p className=\"text-gray-600\">\n              {language === \"ca\" \n                ? \"Inicia sessió amb el teu compte institucional\"\n                : \"Inicia sesión con tu cuenta institucional\"}\n            </p>\n          </div>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <Button \n                onClick={handleLogin}\n                className=\"w-full bg-primary text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors\"\n                data-testid=\"login-button\"\n              >\n                {language === \"ca\" ? \"Iniciar sessió\" : \"Iniciar sesión\"}\n              </Button>\n\n              <div className=\"mt-8 text-center\">\n                <p className=\"text-sm text-gray-600\">\n                  {language === \"ca\" \n                    ? \"Necessites ajuda? Contacta amb l'administrador del centre\"\n                    : \"¿Necesitas ayuda? Contacta con el administrador del centro\"}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3937},"client/src/pages/Login.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { t } from \"@/lib/i18n\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { GraduationCap, Eye, EyeOff, Clock, QrCode, CreditCard, CheckCircle, X } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Email no vàlid\"),\n  password: z.string().min(6, \"La contrasenya ha de tenir almenys 6 caràcters\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\n// Quick attendance schema\nconst quickAttendanceSchema = z.object({\n  email: z.string().email(\"Email no vàlid\"),\n  password: z.string().min(6, \"La contrasenya ha de tenir almenys 6 caràcters\"),\n});\n\ntype QuickAttendanceData = z.infer<typeof quickAttendanceSchema>;\n\nexport default function Login() {\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isQuickAttendanceLoading, setIsQuickAttendanceLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showQuickPassword, setShowQuickPassword] = useState(false);\n  const [attendanceResult, setAttendanceResult] = useState<any>(null);\n  const [showAttendanceModal, setShowAttendanceModal] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"attendance\");\n\n  // Update clock every second - DISABLED to prevent form re-renders\n  // useEffect(() => {\n  //   const timer = setInterval(() => {\n  //     setCurrentTime(new Date());\n  //   }, 1000);\n\n  //   return () => clearInterval(timer);\n  // }, []);\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const quickForm = useForm<QuickAttendanceData>({\n    resolver: zodResolver(quickAttendanceSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  // Get users for quick select - OPTIMIZED to prevent re-renders\n  const { data: users } = useQuery({\n    queryKey: [\"/api/users\"],\n    enabled: activeTab === \"attendance\",\n    staleTime: 10 * 60 * 1000, // 10 minutes\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchInterval: false,\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/login\", data);\n      console.log(\"Login successful\", response);\n      \n      // Show success message\n      toast({\n        title: language === \"ca\" ? \"Sessió iniciada\" : \"Sesión iniciada\",\n        description: language === \"ca\" ? \"Redirigint al sistema...\" : \"Redirigiendo al sistema...\",\n        variant: \"default\",\n      });\n      \n      // Force reload to ensure proper session handling\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 1000);\n    } catch (error: any) {\n      toast({\n        title: t(\"error\", language),\n        description: error.message || t(\"invalid_credentials\", language),\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onQuickAttendance = async (data: QuickAttendanceData) => {\n    console.log(\"🕐 FRONTEND QUICK ATTENDANCE DEBUG:\");\n    console.log(\"  Frontend current time:\", new Date().toISOString());\n    console.log(\"  Frontend local time:\", new Date().toLocaleString('es-ES', { timeZone: 'Europe/Madrid' }));\n    \n    setIsQuickAttendanceLoading(true);\n    \n    try {\n      // First authenticate\n      const authResponse = await apiRequest(\"POST\", \"/api/quick-auth\", data);\n      \n      // Parse JSON if it's a Response object\n      const authData = authResponse instanceof Response ? await authResponse.json() : authResponse;\n      \n      if (authData.user && authData.employee) {\n        // Now register attendance\n        const attendanceData = {\n          employeeId: authData.employee.id,\n          type: authData.nextAction // \"check-in\" or \"check-out\"\n        };\n        \n        const attendanceResponse = await apiRequest(\"POST\", \"/api/quick-attendance\", attendanceData);\n        \n        // Parse JSON if it's a Response object\n        const attendanceData_parsed = attendanceResponse instanceof Response ? await attendanceResponse.json() : attendanceResponse;\n\n        // Use the response directly from the server which already has all the formatted data\n        setAttendanceResult(attendanceData_parsed);\n        setShowAttendanceModal(true);\n\n        // Clear form\n        quickForm.reset();\n      }\n    } catch (error: any) {\n      toast({\n        title: t(\"error\", language),\n        description: error.message || (language === \"ca\" ? \"Error en el marcatge\" : \"Error en el marcaje\"),\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsQuickAttendanceLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n\n\n        {/* Header */}\n        <div className=\"text-center\">\n          <div className=\"flex justify-center\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg\">\n              <span className=\"text-xl font-bold text-white\">F</span>\n            </div>\n          </div>\n          <h2 className=\"mt-6 text-3xl font-extrabold text-gray-900\">\n            fich.ai\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            {language === \"ca\" \n              ? \"Inicia sessió al teu compte\" \n              : \"Inicia sesión en tu cuenta\"}\n          </p>\n        </div>\n\n        {/* Main Content */}\n        <Card>\n          <CardContent className=\"p-6\">\n            {/* Only show regular login - Quick attendance removed for security */}\n            {true && (\n              <div className=\"space-y-4\">\n                <div className=\"text-center mb-4\">\n                  <h3 className=\"text-lg font-semibold\">\n                    {language === \"ca\" ? \"Iniciar Sessió\" : \"Iniciar Sesión\"}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {language === \"ca\" ? \"Accedeix al sistema complet\" : \"Accede al sistema completo\"}\n                  </p>\n                </div>\n                \n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>\n                            {language === \"ca\" ? \"Correu electrònic\" : \"Correo electrónico\"}\n                          </FormLabel>\n                          <FormControl>\n                            <Input\n                              id=\"login-email\"\n                              type=\"email\"\n                              placeholder=\"nom@exemple.com\"\n                              autoComplete=\"email\"\n                              data-testid=\"email-input\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>\n                            {language === \"ca\" ? \"Contrasenya\" : \"Contraseña\"}\n                          </FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Input\n                                id=\"login-password\"\n                                type={showPassword ? \"text\" : \"password\"}\n                                placeholder=\"••••••••\"\n                                autoComplete=\"current-password\"\n                                data-testid=\"password-input\"\n                                {...field}\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                onClick={() => setShowPassword(!showPassword)}\n                                data-testid=\"toggle-password-visibility\"\n                              >\n                                {showPassword ? (\n                                  <EyeOff className=\"h-4 w-4\" />\n                                ) : (\n                                  <Eye className=\"h-4 w-4\" />\n                                )}\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={isLoading}\n                      data-testid=\"login-button\"\n                    >\n                      {isLoading \n                        ? (language === \"ca\" ? \"Iniciant sessió...\" : \"Iniciando sesión...\")\n                        : (language === \"ca\" ? \"Iniciar Sessió\" : \"Iniciar Sesión\")\n                      }\n                    </Button>\n                  </form>\n                </Form>\n\n\n              </div>\n            )}\n          </CardContent>\n        </Card>\n        \n        {/* QR and Register Links */}\n        <div className=\"text-center space-y-3\">\n          <Link href=\"/public-qr\">\n            <Button className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\" size=\"lg\" data-testid=\"qr-attendance-button\">\n              <QrCode className=\"mr-2 h-5 w-5\" />\n              {language === \"ca\" ? \"🔷 Fitxatge amb Codi QR Personal\" : \"🔷 Fichaje con Código QR Personal\"}\n            </Button>\n          </Link>\n          <div className=\"text-xs text-blue-600 font-medium\">\n            {language === \"ca\" ? \"Accés directe sense iniciar sessió\" : \"Acceso directo sin iniciar sesión\"}\n          </div>\n          \n          {activeTab === \"login\" && (\n            <p className=\"text-sm text-gray-600\">\n              {language === \"ca\" ? \"No tens compte? \" : \"¿No tienes cuenta? \"}\n              <Link href=\"/register\">\n                <Button variant=\"link\" className=\"p-0 text-sm\" data-testid=\"register-link\">\n                  {language === \"ca\" ? \"Registra't aquí\" : \"Regístrate aquí\"}\n                </Button>\n              </Link>\n            </p>\n          )}\n        </div>\n        \n        {/* Attendance Result Modal */}\n        <Dialog open={showAttendanceModal} onOpenChange={setShowAttendanceModal}>\n          <DialogContent className=\"modal-content-solid bg-white dark:bg-gray-900 border-2 border-gray-200 dark:border-gray-700\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center\">\n                <CheckCircle className=\"mr-2 h-5 w-5 text-green-600\" />\n                {language === \"ca\" ? \"Fitxatge Realitzat\" : \"Fichaje Realizado\"}\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n\n              {attendanceResult ? (\n                <>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      {attendanceResult.type === \"check_in\" \n                        ? (language === \"ca\" ? \"ENTRADA\" : \"ENTRADA\")\n                        : (language === \"ca\" ? \"SORTIDA\" : \"SALIDA\")\n                      }\n                    </div>\n                    <div className=\"text-lg text-muted-foreground\">\n                      {attendanceResult.employeeName}\n                    </div>\n                    <div className=\"text-sm text-green-600 mt-2\">\n                      {attendanceResult.message}\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <strong>{language === \"ca\" ? \"Hora:\" : \"Hora:\"}</strong>\n                      <br />\n                      {new Date(attendanceResult.timestamp).toLocaleString(\"ca-ES\")}\n                    </div>\n                    <div>\n                      <strong>{language === \"ca\" ? \"Mètode:\" : \"Método:\"}</strong>\n                      <br />\n                      {language === \"ca\" ? \"Marcatge Ràpid\" : \"Marcaje Rápido\"}\n                    </div>\n                  </div>\n                  \n                  {attendanceResult.isLate && (\n                    <div className=\"p-3 bg-orange-50 border border-orange-200 rounded-lg\">\n                      <div className=\"text-sm text-orange-800\">\n                        ⚠️ {language === \"ca\" ? \"Arribada tardana\" : \"Llegada tardía\"}: {attendanceResult.lateMinutes} {language === \"ca\" ? \"minuts\" : \"minutos\"}\n                      </div>\n                    </div>\n                  )}\n                  \n                  <Button\n                    onClick={() => {\n                      setShowAttendanceModal(false);\n                      setAttendanceResult(null);\n                    }}\n                    className=\"w-full\"\n                  >\n                    {language === \"ca\" ? \"Tancar\" : \"Cerrar\"}\n                  </Button>\n                </>\n              ) : (\n                <div className=\"text-center\">\n                  <div className=\"text-muted-foreground\">\n                    {language === \"ca\" ? \"No hi ha dades d'assistència\" : \"No hay datos de asistencia\"}\n                  </div>\n                </div>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":14939},"client/src/pages/Privacy.tsx":{"content":"import { useLanguage } from \"@/hooks/useLanguage\";\nimport { t } from \"@/lib/i18n\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, FileText, UserCheck, Database, Clock, Mail } from \"lucide-react\";\n\nexport default function Privacy() {\n  const { language } = useLanguage();\n\n  return (\n    <main className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-text mb-2\">\n            {language === \"ca\" ? \"Política de Privacitat i RGPD\" : \"Política de Privacidad y RGPD\"}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {language === \"ca\" \n              ? \"Compliment integral del Reglament General de Protecció de Dades\"\n              : \"Cumplimiento integral del Reglamento General de Protección de Datos\"}\n          </p>\n        </div>\n\n        {/* Informació general RGPD */}\n        <Card className=\"mb-6\" data-testid=\"gdpr-info-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Shield className=\"mr-2 h-5 w-5 text-green-600\" />\n              {language === \"ca\" ? \"Compliment RGPD\" : \"Cumplimiento RGPD\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n              <p className=\"text-sm text-green-800 mb-3\">\n                {language === \"ca\" \n                  ? \"Aquest sistema compleix completament amb el Reglament General de Protecció de Dades (UE) 2016/679 i la Llei Orgànica 3/2018 de Protecció de Dades Personals i garantia dels drets digitals.\"\n                  : \"Este sistema cumple completamente con el Reglamento General de Protección de Datos (UE) 2016/679 y la Ley Orgánica 3/2018 de Protección de Datos Personales y garantía de los derechos digitales.\"}\n              </p>\n              <ul className=\"text-sm text-green-700 space-y-1\">\n                <li>• {language === \"ca\" ? \"Base legal: Compliment d'obligació legal (control laboral)\" : \"Base legal: Cumplimiento de obligación legal (control laboral)\"}</li>\n                <li>• {language === \"ca\" ? \"Finalitat específica: Control d'assistència i presència laboral\" : \"Finalidad específica: Control de asistencia y presencia laboral\"}</li>\n                <li>• {language === \"ca\" ? \"Principi de minimització de dades aplicat\" : \"Principio de minimización de datos aplicado\"}</li>\n                <li>• {language === \"ca\" ? \"Conservació limitada: 4 anys màxim\" : \"Conservación limitada: 4 años máximo\"}</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Drets dels interessats */}\n        <Card className=\"mb-6\" data-testid=\"rights-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <UserCheck className=\"mr-2 h-5 w-5 text-blue-600\" />\n              {language === \"ca\" ? \"Drets dels Treballadors\" : \"Derechos de los Trabajadores\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div className=\"space-y-3\">\n                <div className=\"p-3 border border-blue-200 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-800 mb-1\">\n                    {language === \"ca\" ? \"Dret d'accés (Art. 15)\" : \"Derecho de acceso (Art. 15)\"}\n                  </h4>\n                  <p className=\"text-sm text-blue-700\">\n                    {language === \"ca\" \n                      ? \"Consultar les seves dades d'assistència i horaris\"\n                      : \"Consultar sus datos de asistencia y horarios\"}\n                  </p>\n                </div>\n                \n                <div className=\"p-3 border border-blue-200 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-800 mb-1\">\n                    {language === \"ca\" ? \"Dret de rectificació (Art. 16)\" : \"Derecho de rectificación (Art. 16)\"}\n                  </h4>\n                  <p className=\"text-sm text-blue-700\">\n                    {language === \"ca\" \n                      ? \"Corregir dades incorrectes o incompletes\"\n                      : \"Corregir datos incorrectos o incompletos\"}\n                  </p>\n                </div>\n                \n                <div className=\"p-3 border border-blue-200 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-800 mb-1\">\n                    {language === \"ca\" ? \"Dret de supressió (Art. 17)\" : \"Derecho de supresión (Art. 17)\"}\n                  </h4>\n                  <p className=\"text-sm text-blue-700\">\n                    {language === \"ca\" \n                      ? \"Sol·licitar l'eliminació de dades quan sigui procedent\"\n                      : \"Solicitar la eliminación de datos cuando proceda\"}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <div className=\"p-3 border border-blue-200 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-800 mb-1\">\n                    {language === \"ca\" ? \"Dret de limitació (Art. 18)\" : \"Derecho de limitación (Art. 18)\"}\n                  </h4>\n                  <p className=\"text-sm text-blue-700\">\n                    {language === \"ca\" \n                      ? \"Limitar el tractament en circumstàncies específiques\"\n                      : \"Limitar el tratamiento en circunstancias específicas\"}\n                  </p>\n                </div>\n                \n                <div className=\"p-3 border border-blue-200 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-800 mb-1\">\n                    {language === \"ca\" ? \"Dret de portabilitat (Art. 20)\" : \"Derecho de portabilidad (Art. 20)\"}\n                  </h4>\n                  <p className=\"text-sm text-blue-700\">\n                    {language === \"ca\" \n                      ? \"Rebre les dades en format estructurat\"\n                      : \"Recibir los datos en formato estructurado\"}\n                  </p>\n                </div>\n                \n                <div className=\"p-3 border border-blue-200 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-800 mb-1\">\n                    {language === \"ca\" ? \"Dret d'oposició (Art. 21)\" : \"Derecho de oposición (Art. 21)\"}\n                  </h4>\n                  <p className=\"text-sm text-blue-700\">\n                    {language === \"ca\" \n                      ? \"Oposar-se al tractament en casos específics\"\n                      : \"Oponerse al tratamiento en casos específicos\"}\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n              <p className=\"text-sm font-medium text-blue-800 mb-2\">\n                {language === \"ca\" ? \"Com exercir els teus drets:\" : \"Cómo ejercer tus derechos:\"}\n              </p>\n              <p className=\"text-sm text-blue-700\">\n                {language === \"ca\" \n                  ? \"Contacta amb l'administrador del centre o envia un correu a proteccion.datos@centre.edu\"\n                  : \"Contacta con el administrador del centro o envía un correo a proteccion.datos@centro.edu\"}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Tractament de dades */}\n        <Card className=\"mb-6\" data-testid=\"data-processing-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Database className=\"mr-2 h-5 w-5 text-purple-600\" />\n              {language === \"ca\" ? \"Tractament de Dades\" : \"Tratamiento de Datos\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                <div className=\"p-4 border border-purple-200 rounded-lg\">\n                  <h4 className=\"font-medium text-purple-800 mb-2\">\n                    {language === \"ca\" ? \"Dades tractades\" : \"Datos tratados\"}\n                  </h4>\n                  <ul className=\"text-sm text-purple-700 space-y-1\">\n                    <li>• {language === \"ca\" ? \"Nom i cognoms\" : \"Nombre y apellidos\"}</li>\n                    <li>• {language === \"ca\" ? \"DNI\" : \"DNI\"}</li>\n                    <li>• {language === \"ca\" ? \"Correu electrònic\" : \"Correo electrónico\"}</li>\n                    <li>• {language === \"ca\" ? \"Horaris d'entrada i sortida\" : \"Horarios de entrada y salida\"}</li>\n                    <li>• {language === \"ca\" ? \"Absències justificades\" : \"Ausencias justificadas\"}</li>\n                  </ul>\n                </div>\n                \n                <div className=\"p-4 border border-purple-200 rounded-lg\">\n                  <h4 className=\"font-medium text-purple-800 mb-2\">\n                    {language === \"ca\" ? \"Finalitats\" : \"Finalidades\"}\n                  </h4>\n                  <ul className=\"text-sm text-purple-700 space-y-1\">\n                    <li>• {language === \"ca\" ? \"Control laboral obligatori\" : \"Control laboral obligatorio\"}</li>\n                    <li>• {language === \"ca\" ? \"Gestió d'absències\" : \"Gestión de ausencias\"}</li>\n                    <li>• {language === \"ca\" ? \"Elaboració d'informes\" : \"Elaboración de informes\"}</li>\n                    <li>• {language === \"ca\" ? \"Compliment normatiu\" : \"Cumplimiento normativo\"}</li>\n                  </ul>\n                </div>\n                \n                <div className=\"p-4 border border-purple-200 rounded-lg\">\n                  <h4 className=\"font-medium text-purple-800 mb-2\">\n                    {language === \"ca\" ? \"Base legal\" : \"Base legal\"}\n                  </h4>\n                  <ul className=\"text-sm text-purple-700 space-y-1\">\n                    <li>• {language === \"ca\" ? \"Obligació legal (Art. 6.1.c)\" : \"Obligación legal (Art. 6.1.c)\"}</li>\n                    <li>• {language === \"ca\" ? \"Estatut dels Treballadors\" : \"Estatuto de los Trabajadores\"}</li>\n                    <li>• {language === \"ca\" ? \"Normativa educativa\" : \"Normativa educativa\"}</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Mesures de seguretat */}\n        <Card className=\"mb-6\" data-testid=\"security-measures-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Shield className=\"mr-2 h-5 w-5 text-red-600\" />\n              {language === \"ca\" ? \"Mesures de Seguretat\" : \"Medidas de Seguridad\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-red-800\">\n                  {language === \"ca\" ? \"Mesures tècniques\" : \"Medidas técnicas\"}\n                </h4>\n                <ul className=\"text-sm text-red-700 space-y-1\">\n                  <li>• {language === \"ca\" ? \"Xifratge de dades en repòs (AES-256)\" : \"Cifrado de datos en reposo (AES-256)\"}</li>\n                  <li>• {language === \"ca\" ? \"Xifratge en trànsit (TLS 1.3)\" : \"Cifrado en tránsito (TLS 1.3)\"}</li>\n                  <li>• {language === \"ca\" ? \"Autenticació robusta amb hash bcrypt\" : \"Autenticación robusta con hash bcrypt\"}</li>\n                  <li>• {language === \"ca\" ? \"Còpies de seguretat diàries\" : \"Copias de seguridad diarias\"}</li>\n                  <li>• {language === \"ca\" ? \"Logs d'auditoria\" : \"Logs de auditoría\"}</li>\n                </ul>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-red-800\">\n                  {language === \"ca\" ? \"Mesures organitzatives\" : \"Medidas organizativas\"}\n                </h4>\n                <ul className=\"text-sm text-red-700 space-y-1\">\n                  <li>• {language === \"ca\" ? \"Control d'accés basat en rols\" : \"Control de acceso basado en roles\"}</li>\n                  <li>• {language === \"ca\" ? \"Formació en protecció de dades\" : \"Formación en protección de datos\"}</li>\n                  <li>• {language === \"ca\" ? \"Política de contrasenyes\" : \"Política de contraseñas\"}</li>\n                  <li>• {language === \"ca\" ? \"Procediments d'incident\" : \"Procedimientos de incidente\"}</li>\n                  <li>• {language === \"ca\" ? \"Auditories periòdiques\" : \"Auditorías periódicas\"}</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Conservació i supressió */}\n        <Card className=\"mb-6\" data-testid=\"retention-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Clock className=\"mr-2 h-5 w-5 text-orange-600\" />\n              {language === \"ca\" ? \"Conservació i Supressió\" : \"Conservación y Supresión\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n                <h4 className=\"font-medium text-orange-800 mb-2\">\n                  {language === \"ca\" ? \"Període de conservació\" : \"Período de conservación\"}\n                </h4>\n                <p className=\"text-sm text-orange-700 mb-2\">\n                  {language === \"ca\" \n                    ? \"Les dades d'assistència es conserven durant 4 anys des de la finalització de la relació laboral, segons estableix la normativa laboral.\"\n                    : \"Los datos de asistencia se conservan durante 4 años desde la finalización de la relación laboral, según establece la normativa laboral.\"}\n                </p>\n                <ul className=\"text-sm text-orange-700 space-y-1\">\n                  <li>• {language === \"ca\" ? \"Registres d'assistència: 4 anys\" : \"Registros de asistencia: 4 años\"}</li>\n                  <li>• {language === \"ca\" ? \"Dades d'absències: 4 anys\" : \"Datos de ausencias: 4 años\"}</li>\n                  <li>• {language === \"ca\" ? \"Logs del sistema: 1 any\" : \"Logs del sistema: 1 año\"}</li>\n                </ul>\n              </div>\n              \n              <div className=\"p-4 bg-gray-50 border border-gray-200 rounded-lg\">\n                <h4 className=\"font-medium text-gray-800 mb-2\">\n                  {language === \"ca\" ? \"Supressió automàtica\" : \"Supresión automática\"}\n                </h4>\n                <p className=\"text-sm text-gray-700\">\n                  {language === \"ca\" \n                    ? \"El sistema elimina automàticament les dades quan s'acompleix el període de conservació, garantint el compliment del principi de limitació d'emmagatzematge.\"\n                    : \"El sistema elimina automáticamente los datos cuando se cumple el período de conservación, garantizando el cumplimiento del principio de limitación de almacenamiento.\"}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contacte DPO */}\n        <Card className=\"mb-6\" data-testid=\"dpo-contact-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Mail className=\"mr-2 h-5 w-5 text-blue-600\" />\n              {language === \"ca\" ? \"Contacte amb el DPD\" : \"Contacto con el DPD\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                {language === \"ca\" \n                  ? \"Si tens qualsevol dubte sobre el tractament de les teves dades o vols exercir els teus drets, pots contactar amb el Delegat de Protecció de Dades:\"\n                  : \"Si tienes cualquier duda sobre el tratamiento de tus datos o quieres ejercer tus derechos, puedes contactar con el Delegado de Protección de Datos:\"}\n              </p>\n              \n              <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm\"><strong>Email:</strong> proteccion.datos@centre.edu</p>\n                  <p className=\"text-sm\"><strong>{language === \"ca\" ? \"Telèfon\" : \"Teléfono\"}:</strong> +34 xxx xxx xxx</p>\n                  <p className=\"text-sm\">\n                    <strong>{language === \"ca\" ? \"Adreça\" : \"Dirección\"}:</strong> \n                    {language === \"ca\" \n                      ? \" Carrer del Centre Educatiu, 123, 08000 Barcelona\"\n                      : \" Calle del Centro Educativo, 123, 08000 Barcelona\"}\n                  </p>\n                </div>\n              </div>\n              \n              <p className=\"text-xs text-muted-foreground\">\n                {language === \"ca\" \n                  ? \"També tens dret a presentar una reclamació davant l'Autoritat Catalana de Protecció de Dades (APDCAT) o l'Agència Española de Protección de Datos (AEPD).\"\n                  : \"También tienes derecho a presentar una reclamación ante la Autoridad Catalana de Protección de Datos (APDCAT) o la Agencia Española de Protección de Datos (AEPD).\"}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Botó per sol·licitar informació */}\n        <div className=\"text-center\">\n          <Button \n            className=\"bg-primary text-primary-foreground\" \n            data-testid=\"request-info-button\"\n            onClick={() => window.location.href = '/data-rights'}\n          >\n            <FileText className=\"mr-2 h-4 w-4\" />\n            {language === \"ca\" ? \"Sol·licitar còpia de les meves dades\" : \"Solicitar copia de mis datos\"}\n          </Button>\n        </div>\n      </div>\n    </main>\n  );\n}","size_bytes":17976},"client/src/pages/Register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { t } from \"@/lib/i18n\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { GraduationCap, Eye, EyeOff } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nconst registerSchema = z.object({\n  firstName: z.string().min(2, \"El nom ha de tenir almenys 2 caràcters\"),\n  lastName: z.string().min(2, \"El cognom ha de tenir almenys 2 caràcters\"),\n  email: z.string().email(\"Email no vàlid\"),\n  password: z.string().min(6, \"La contrasenya ha de tenir almenys 6 caràcters\"),\n  confirmPassword: z.string().min(6, \"Confirma la contrasenya\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Les contrasenyes no coincideixen\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const form = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onSubmit = async (data: RegisterFormData) => {\n    setIsLoading(true);\n    try {\n      const { confirmPassword, ...registerData } = data;\n      const response = await apiRequest(\"POST\", \"/api/register\", registerData);\n      \n      toast({\n        title: t(\"success\", language),\n        description: language === \"ca\" ? \"Compte creat correctament\" : \"Cuenta creada correctamente\",\n      });\n\n      // Reload to trigger auth state update\n      window.location.href = \"/\";\n    } catch (error: any) {\n      toast({\n        title: t(\"error\", language),\n        description: error.message || (language === \"ca\" ? \"Error en el registre\" : \"Error en el registro\"),\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <div className=\"flex justify-center\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg\">\n              <span className=\"text-xl font-bold text-white\">F</span>\n            </div>\n          </div>\n          <h2 className=\"mt-6 text-3xl font-extrabold text-gray-900\">\n            fich.ai\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            {language === \"ca\" \n              ? \"Crea el teu compte\" \n              : \"Crea tu cuenta\"}\n          </p>\n        </div>\n\n        {/* Register Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center\">\n              {language === \"ca\" ? \"Registrar-se\" : \"Registrarse\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          {language === \"ca\" ? \"Nom\" : \"Nombre\"}\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Joan\"\n                            data-testid=\"first-name-input\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          {language === \"ca\" ? \"Cognoms\" : \"Apellidos\"}\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Garcia\"\n                            data-testid=\"last-name-input\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {language === \"ca\" ? \"Correu electrònic\" : \"Correo electrónico\"}\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"joan.garcia@exemple.com\"\n                          data-testid=\"email-input\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {language === \"ca\" ? \"Contrasenya\" : \"Contraseña\"}\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"••••••••\"\n                            data-testid=\"password-input\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"toggle-password-visibility\"\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {language === \"ca\" ? \"Confirmar contrasenya\" : \"Confirmar contraseña\"}\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            type={showConfirmPassword ? \"text\" : \"password\"}\n                            placeholder=\"••••••••\"\n                            data-testid=\"confirm-password-input\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                            data-testid=\"toggle-confirm-password-visibility\"\n                          >\n                            {showConfirmPassword ? (\n                              <EyeOff className=\"h-4 w-4\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isLoading}\n                  data-testid=\"register-button\"\n                >\n                  {isLoading \n                    ? (language === \"ca\" ? \"Creant compte...\" : \"Creando cuenta...\")\n                    : (language === \"ca\" ? \"Crear Compte\" : \"Crear Cuenta\")\n                  }\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600\">\n                {language === \"ca\" ? \"Ja tens compte? \" : \"¿Ya tienes cuenta? \"}\n                <Link href=\"/login\">\n                  <Button variant=\"link\" className=\"p-0\" data-testid=\"login-link\">\n                    {language === \"ca\" ? \"Inicia sessió aquí\" : \"Inicia sesión aquí\"}\n                  </Button>\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"text-center text-xs text-gray-500\">\n          <p>\n            {language === \"ca\" \n              ? \"Sistema de gestió de presència per centres educatius\"\n              : \"Sistema de gestión de presencia para centros educativos\"}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10606},"client/src/pages/Reports.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePermissions } from \"@/hooks/usePermissions\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  BarChart3, \n  FileText, \n  TrendingUp,\n  Users,\n  Clock,\n  AlertTriangle,\n  LoaderIcon,\n  FileDown,\n  Calendar,\n  CheckCircle,\n  XCircle,\n  MinusCircle\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  BarChart,\n  Bar\n} from 'recharts';\n\nexport default function Reports() {\n  const { language } = useLanguage();\n  const { user } = useAuth();\n  const permissions = usePermissions();\n  const { toast } = useToast();\n  \n  // Estados simplificados\n  const [selectedReportTypes, setSelectedReportTypes] = useState<string[]>([\"general_attendance\"]);\n  const [startDate, setStartDate] = useState(\"2025-01-01\");\n  const [endDate, setEndDate] = useState(\"2025-01-31\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n  const [reportData, setReportData] = useState<any>(null);\n  const [detailedAttendance, setDetailedAttendance] = useState<any[]>([]);\n  const [monthlyTrends, setMonthlyTrends] = useState<any[]>([]);\n\n  // Initialize dates and generate initial report (only once)\n  const [hasInitialized, setHasInitialized] = useState(false);\n  \n  useEffect(() => {\n    if (user?.institutionId && !hasInitialized) {\n      const now = new Date();\n      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n      \n      const startDateStr = lastMonth.toISOString().split('T')[0];\n      const endDateStr = now.toISOString().split('T')[0];\n      \n      console.log(\"📅 Setting initial dates:\", startDateStr, \"to\", endDateStr);\n      setStartDate(startDateStr);\n      setEndDate(endDateStr);\n      setHasInitialized(true);\n      \n      // Generate initial report\n      generateInitialReport(startDateStr, endDateStr);\n    }\n  }, [user?.institutionId, hasInitialized]);\n  \n  // Simple function to generate initial report without dependencies\n  const generateInitialReport = async (start: string, end: string) => {\n    if (!user?.institutionId) return;\n    \n    console.log(\"🚀 Generating initial report for:\", start, \"to\", end);\n    setIsLoading(true);\n    \n    try {\n      const [overviewResponse, detailResponse, trendsResponse] = await Promise.all([\n        fetch(`/api/reports/overview/${user.institutionId}?startDate=${start}&endDate=${end}`, {\n          credentials: 'include'\n        }),\n        fetch(`/api/reports/detailed-attendance/${user.institutionId}?startDate=${start}&endDate=${end}`, {\n          credentials: 'include'\n        }),\n        fetch(`/api/reports/monthly-trends/${user.institutionId}`, {\n          credentials: 'include'\n        })\n      ]);\n      \n      if (overviewResponse.ok && detailResponse.ok && trendsResponse.ok) {\n        const overview = await overviewResponse.json();\n        const details = await detailResponse.json();\n        const trends = await trendsResponse.json();\n        \n        setReportData(overview);\n        setDetailedAttendance(details);\n        setMonthlyTrends(trends);\n        \n        console.log(\"✅ Initial report generated successfully\");\n      }\n    } catch (error) {\n      console.error(\"❌ Error generating initial report:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const reportTypes = [\n    { \n      value: \"general_attendance\", \n      label: language === \"ca\" ? \"Assistència general\" : \"Asistencia general\" \n    },\n    { \n      value: \"late_absences\", \n      label: language === \"ca\" ? \"Retards i absències\" : \"Retrasos y ausencias\" \n    },\n    { \n      value: \"worked_hours\", \n      label: language === \"ca\" ? \"Hores treballades\" : \"Horas trabajadas\" \n    },\n  ];\n\n  // Manejar selección de tipos de informe (checkboxes)\n  const handleReportTypeToggle = (reportType: string) => {\n    console.log(\"🔄 Toggling report type:\", reportType);\n    \n    setSelectedReportTypes(prevTypes => {\n      const isCurrentlySelected = prevTypes.includes(reportType);\n      \n      if (isCurrentlySelected) {\n        // Solo permitir deseleccionar si hay más de un tipo seleccionado\n        if (prevTypes.length > 1) {\n          return prevTypes.filter(type => type !== reportType);\n        } else {\n          // Mantener al menos un tipo seleccionado\n          console.log(\"⚠️ Keeping at least one type selected\");\n          return prevTypes;\n        }\n      } else {\n        return [...prevTypes, reportType];\n      }\n    });\n  };\n\n  // Generar informe completo con datos detallados\n  const handleGenerateReport = async () => {\n    console.log(\"🚀 Starting comprehensive report generation\");\n\n    if (!user?.institutionId || !startDate || !endDate || selectedReportTypes.length === 0) {\n      console.error(\"❌ Missing required data\");\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: language === \"ca\" ? \"Falten dades necessàries\" : \"Faltan datos necesarios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      const params = new URLSearchParams({\n        startDate,\n        endDate\n      });\n      \n      // Fetch overview data\n      const overviewResponse = await fetch(`/api/reports/overview/${user.institutionId}?${params.toString()}`, { \n        credentials: 'include' \n      });\n      \n      // Fetch detailed attendance data\n      const detailedResponse = await fetch(`/api/reports/detailed-attendance/${user.institutionId}?${params.toString()}`, { \n        credentials: 'include' \n      });\n      \n      // Fetch monthly trends\n      const trendsResponse = await fetch(`/api/reports/monthly-trends/${user.institutionId}?months=6`, { \n        credentials: 'include' \n      });\n      \n      if (overviewResponse.ok && detailedResponse.ok && trendsResponse.ok) {\n        const overviewData = await overviewResponse.json();\n        const detailedData = await detailedResponse.json();\n        const trendsData = await trendsResponse.json();\n        \n        console.log(\"✅ Overview data received:\", overviewData);\n        console.log(\"✅ Detailed attendance received:\", detailedData.length, \"records\");\n        console.log(\"✅ Monthly trends received:\", trendsData.length, \"months\");\n        console.log(\"📊 Setting states - detailed:\", detailedData);\n        console.log(\"📈 Setting states - trends:\", trendsData);\n        \n        // Set states with batch update\n        console.log(\"🔧 Setting all states in batch...\");\n        setReportData(overviewData);\n        setDetailedAttendance([...detailedData]); // Force new array reference\n        setMonthlyTrends([...trendsData]); // Force new array reference\n        \n        console.log(\"✅ States set:\", {\n          overview: !!overviewData,\n          detailed: detailedData.length,\n          trends: trendsData.length\n        });\n        \n        toast({\n          title: language === \"ca\" ? \"Informe generat\" : \"Informe generado\",\n          description: language === \"ca\" ? \"Dades completes carregades amb èxit\" : \"Datos completos cargados con éxito\",\n        });\n      } else {\n        throw new Error(\"Failed to fetch some report data\");\n      }\n\n    } catch (error) {\n      console.error('❌ Error generating report:', error);\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: language === \"ca\" ? \"No s'ha pogut generar l'informe\" : \"No se pudo generar el informe\",\n        variant: \"destructive\",\n      });\n      setReportData(null);\n      setDetailedAttendance([]);\n      setMonthlyTrends([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Exportar CSV simplificado\n  const handleExportCSV = async () => {\n    console.log(\"📄 Starting CSV export\");\n    \n    if (!user?.institutionId || !startDate || !endDate || selectedReportTypes.length === 0) {\n      console.error(\"❌ Missing data for CSV export\");\n      return;\n    }\n    \n    setIsExporting(true);\n    try {\n      const reportType = selectedReportTypes[0];\n      const params = new URLSearchParams({\n        reportType,\n        startDate,\n        endDate\n      });\n      \n      const url = `/api/reports/export/csv/${user.institutionId}?${params.toString()}`;\n      const response = await fetch(url, { credentials: 'include' });\n      \n      if (!response.ok) throw new Error(`Export failed: ${response.status}`);\n      \n      const blob = await response.blob();\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.download = `report_${reportType}_${startDate}_${endDate}.csv`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(downloadUrl);\n      \n      console.log(\"✅ CSV downloaded successfully\");\n      toast({\n        title: language === \"ca\" ? \"CSV exportat\" : \"CSV exportado\",\n        description: language === \"ca\" ? \"L'informe s'ha descarregat\" : \"El informe se ha descargado\",\n      });\n    } catch (error) {\n      console.error(\"❌ CSV export error:\", error);\n      toast({\n        title: language === \"ca\" ? \"Error CSV\" : \"Error CSV\",\n        description: language === \"ca\" ? \"No s'ha pogut exportar\" : \"No se pudo exportar\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // Exportar PDF simplificado (próximamente)\n  const handleExportPDF = () => {\n    console.log(\"📄 PDF export requested\");\n    toast({\n      title: language === \"ca\" ? \"PDF\" : \"PDF\",\n      description: language === \"ca\" ? \"Funcionalitat disponible aviat\" : \"Funcionalidad disponible pronto\",\n    });\n  };\n\n  return (\n    <main className=\"p-6 space-y-6\" data-testid=\"reports-container\">\n      <header className=\"text-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          {language === \"ca\" ? \"Informes i Anàlisis\" : \"Informes y Análisis\"}\n        </h1>\n        <p className=\"text-gray-600\">\n          {language === \"ca\" \n            ? \"Genera informes detallats de l'assistència i exporta-los en diferents formats\"\n            : \"Genera informes detallados de asistencia y expórtalos en diferentes formatos\"\n          }\n        </p>\n      </header>\n\n      {/* Configuration Card */}\n      <Card data-testid=\"report-config-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-5 w-5\" />\n            {language === \"ca\" ? \"Configuració de l'informe\" : \"Configuración del informe\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Report Type Selection with Checkboxes */}\n          <div>\n            <Label className=\"text-base font-medium mb-3 block\">\n              {language === \"ca\" ? \"Tipus d'informes\" : \"Tipos de informes\"}\n            </Label>\n            <div className=\"space-y-3 p-4 bg-gray-50 rounded-lg border\">\n              {reportTypes.map((type) => (\n                <div key={type.value} className=\"flex items-center space-x-3 p-2 hover:bg-white rounded border-l-4 border-transparent hover:border-blue-400 transition-all\">\n                  <Checkbox\n                    id={type.value}\n                    checked={selectedReportTypes.includes(type.value)}\n                    onCheckedChange={() => handleReportTypeToggle(type.value)}\n                    data-testid={`checkbox-${type.value}`}\n                    className=\"data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600\"\n                  />\n                  <Label \n                    htmlFor={type.value}\n                    className=\"text-sm font-medium cursor-pointer flex-1\"\n                  >\n                    {type.label}\n                  </Label>\n                  {selectedReportTypes.includes(type.value) && (\n                    <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full\">\n                      {language === \"ca\" ? \"Seleccionat\" : \"Seleccionado\"}\n                    </span>\n                  )}\n                </div>\n              ))}\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">\n              {language === \"ca\" \n                ? `${selectedReportTypes.length} tipus seleccionats` \n                : `${selectedReportTypes.length} tipos seleccionados`\n              }\n            </p>\n          </div>\n\n          {/* Date Range */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"start-date\">\n                {language === \"ca\" ? \"Data inici\" : \"Fecha inicio\"}\n              </Label>\n              <Input\n                id=\"start-date\"\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => {\n                  console.log(\"📅 Start date changing to:\", e.target.value);\n                  setStartDate(e.target.value);\n                }}\n                data-testid=\"start-date-input\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"end-date\">\n                {language === \"ca\" ? \"Data fi\" : \"Fecha fin\"}\n              </Label>\n              <Input\n                id=\"end-date\"\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => {\n                  console.log(\"📅 End date changing to:\", e.target.value);\n                  setEndDate(e.target.value);\n                }}\n                data-testid=\"end-date-input\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"mt-6 flex flex-wrap gap-3\">\n            <Button \n              onClick={handleGenerateReport}\n              className=\"bg-blue-600 text-white hover:bg-blue-700 relative\"\n              data-testid=\"generate-report-button\"\n              disabled={isLoading || !user?.institutionId || !startDate || !endDate || selectedReportTypes.length === 0}\n              size=\"lg\"\n            >\n              {isLoading ? (\n                <>\n                  <LoaderIcon className=\"mr-2 h-4 w-4 animate-spin\" />\n                  {language === \"ca\" ? \"Generant...\" : \"Generando...\"}\n                </>\n              ) : (\n                <>\n                  <BarChart3 className=\"mr-2 h-4 w-4\" />\n                  {language === \"ca\" ? \"Generar informe\" : \"Generar informe\"}\n                </>\n              )}\n              {selectedReportTypes.length > 0 && !isLoading && (\n                <span className=\"absolute -top-2 -right-2 bg-orange-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                  {selectedReportTypes.length}\n                </span>\n              )}\n            </Button>\n            \n            <Button \n              onClick={handleExportCSV}\n              variant=\"outline\"\n              data-testid=\"export-csv-button\"\n              disabled={isExporting || !reportData || selectedReportTypes.length === 0}\n            >\n              {isExporting ? (\n                <LoaderIcon className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : (\n                <FileText className=\"mr-2 h-4 w-4\" />\n              )}\n              {language === \"ca\" ? \"Exportar CSV\" : \"Exportar CSV\"}\n            </Button>\n\n            <Button \n              onClick={handleExportPDF}\n              variant=\"outline\"\n              className=\"border-red-200 text-red-600 hover:bg-red-50\"\n              data-testid=\"export-pdf-button\"\n              disabled={!reportData}\n            >\n              <FileDown className=\"mr-2 h-4 w-4\" />\n              {language === \"ca\" ? \"Exportar PDF\" : \"Exportar PDF\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Loading State */}\n      {isLoading && (\n        <Card data-testid=\"loading-state-card\">\n          <CardContent className=\"p-12 text-center\">\n            <LoaderIcon className=\"h-12 w-12 mx-auto mb-4 text-blue-600 animate-spin\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              {language === \"ca\" ? \"Generant informe...\" : \"Generando informe...\"}\n            </h3>\n            <p className=\"text-gray-600\">\n              {language === \"ca\" \n                ? \"Processant les dades d'assistència. Això pot trigar uns segons.\"\n                : \"Procesando los datos de asistencia. Esto puede tardar unos segundos.\"\n              }\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Report Results */}\n      {reportData && !isLoading && (\n        <Card data-testid=\"report-results-card\" className=\"border-green-200 bg-green-50/30\">\n          <CardHeader className=\"border-b border-green-200\">\n            <CardTitle className=\"flex items-center gap-2 text-green-800\">\n              <TrendingUp className=\"h-5 w-5\" />\n              {language === \"ca\" ? \"Resultats de l'informe\" : \"Resultados del informe\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n              <div className=\"text-center p-4 bg-green-50 rounded-lg border border-green-200\">\n                <div className=\"bg-green-100 p-3 rounded-full w-fit mx-auto mb-3\">\n                  <TrendingUp className=\"text-green-600 h-6 w-6\" />\n                </div>\n                <p className=\"text-2xl font-bold text-gray-900 mb-1\">\n                  {reportData.attendanceRate ? `${reportData.attendanceRate.toFixed(1)}%` : \"0.0%\"}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  {language === \"ca\" ? \"Taxa d'assistència\" : \"Tasa de asistencia\"}\n                </p>\n              </div>\n\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                <div className=\"bg-blue-100 p-3 rounded-full w-fit mx-auto mb-3\">\n                  <Clock className=\"text-blue-600 h-6 w-6\" />\n                </div>\n                <p className=\"text-2xl font-bold text-gray-900 mb-1\">\n                  {reportData.averageHoursPerDay ? `${reportData.averageHoursPerDay.toFixed(1)}h` : \"0.0h\"}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  {language === \"ca\" ? \"Mitjana hores/dia\" : \"Media horas/día\"}\n                </p>\n              </div>\n\n              <div className=\"text-center p-4 bg-orange-50 rounded-lg border border-orange-200\">\n                <div className=\"bg-orange-100 p-3 rounded-full w-fit mx-auto mb-3\">\n                  <AlertTriangle className=\"text-orange-600 h-6 w-6\" />\n                </div>\n                <p className=\"text-2xl font-bold text-gray-900 mb-1\">\n                  {reportData.totalLatesThisMonth || 0}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  {language === \"ca\" ? \"Retards aquest mes\" : \"Retrasos este mes\"}\n                </p>\n              </div>\n\n              <div className=\"text-center p-4 bg-purple-50 rounded-lg border border-purple-200\">\n                <div className=\"bg-purple-100 p-3 rounded-full w-fit mx-auto mb-3\">\n                  <Users className=\"text-purple-600 h-6 w-6\" />\n                </div>\n                <p className=\"text-2xl font-bold text-gray-900 mb-1\">\n                  {reportData.totalEmployees || 0}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  {language === \"ca\" ? \"Total empleats\" : \"Total empleados\"}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"mt-6 p-4 bg-white rounded-lg border border-gray-200\">\n              <h3 className=\"font-medium text-gray-900 mb-3 flex items-center gap-2\">\n                <FileText className=\"h-4 w-4\" />\n                {language === \"ca\" ? \"Informació del període\" : \"Información del período\"}\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium text-gray-700\">\n                    {language === \"ca\" ? \"Període:\" : \"Período:\"}\n                  </span>\n                  <br />\n                  <span className=\"text-gray-600\">{startDate} → {endDate}</span>\n                </div>\n                <div>\n                  <span className=\"font-medium text-gray-700\">\n                    {language === \"ca\" ? \"Tipus seleccionats:\" : \"Tipos seleccionados:\"}\n                  </span>\n                  <br />\n                  <div className=\"flex flex-wrap gap-1 mt-1\">\n                    {selectedReportTypes.map(type => {\n                      const typeLabel = reportTypes.find(rt => rt.value === type)?.label || type;\n                      return (\n                        <span key={type} className=\"inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full\">\n                          {typeLabel}\n                        </span>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mt-4 p-3 bg-green-100 rounded-lg border border-green-300\">\n              <p className=\"text-sm text-green-800 flex items-center gap-2\">\n                <TrendingUp className=\"h-4 w-4\" />\n                {language === \"ca\" \n                  ? \"Informe generat amb èxit. Pots exportar les dades utilitzant els botons d'exportació de dalt.\"\n                  : \"Informe generado con éxito. Puedes exportar los datos usando los botones de exportación de arriba.\"\n                }\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Detailed Attendance Table */}\n      {detailedAttendance.length > 0 && (\n        <Card data-testid=\"detailed-attendance-card\" className=\"border-blue-200\">\n          <CardHeader className=\"border-b border-blue-200 bg-blue-50/30\">\n            <CardTitle className=\"flex items-center gap-2 text-blue-800\">\n              <Calendar className=\"h-5 w-5\" />\n              {language === \"ca\" ? \"Registres detallats d'assistència\" : \"Registros detallados de asistencia\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-6\">\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>{language === \"ca\" ? \"Data\" : \"Fecha\"}</TableHead>\n                    <TableHead>{language === \"ca\" ? \"Entrada\" : \"Entrada\"}</TableHead>\n                    <TableHead>{language === \"ca\" ? \"Sortida\" : \"Salida\"}</TableHead>\n                    <TableHead>{language === \"ca\" ? \"Hores\" : \"Horas\"}</TableHead>\n                    <TableHead>{language === \"ca\" ? \"Estat\" : \"Estado\"}</TableHead>\n                    <TableHead>{language === \"ca\" ? \"Retard\" : \"Retraso\"}</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {detailedAttendance.map((record, index) => (\n                    <TableRow key={index} className=\"hover:bg-gray-50\">\n                      <TableCell className=\"font-medium\">\n                        {new Date(record.date).toLocaleDateString('es-ES')}\n                      </TableCell>\n                      <TableCell>{record.checkIn || '-'}</TableCell>\n                      <TableCell>{record.checkOut || '-'}</TableCell>\n                      <TableCell>{record.hoursWorked ? `${record.hoursWorked}h` : '-'}</TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={\n                            record.status === 'on_time' ? 'default' :\n                            record.status === 'late' ? 'destructive' :\n                            record.status === 'incomplete' ? 'secondary' : 'outline'\n                          }\n                          className={\n                            record.status === 'on_time' ? 'bg-green-100 text-green-800 border-green-200' :\n                            record.status === 'late' ? 'bg-red-100 text-red-800 border-red-200' :\n                            record.status === 'incomplete' ? 'bg-orange-100 text-orange-800 border-orange-200' :\n                            'bg-gray-100 text-gray-800 border-gray-200'\n                          }\n                        >\n                          {record.status === 'on_time' && <CheckCircle className=\"w-3 h-3 mr-1\" />}\n                          {record.status === 'late' && <XCircle className=\"w-3 h-3 mr-1\" />}\n                          {record.status === 'incomplete' && <MinusCircle className=\"w-3 h-3 mr-1\" />}\n                          {record.status === 'absent' && <XCircle className=\"w-3 h-3 mr-1\" />}\n                          {\n                            record.status === 'on_time' ? (language === \"ca\" ? \"A temps\" : \"A tiempo\") :\n                            record.status === 'late' ? (language === \"ca\" ? \"Tardança\" : \"Retraso\") :\n                            record.status === 'incomplete' ? (language === \"ca\" ? \"Incomplet\" : \"Incompleto\") :\n                            (language === \"ca\" ? \"Absent\" : \"Ausente\")\n                          }\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {record.lateMinutes > 0 ? `${record.lateMinutes} min` : '-'}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Monthly Trends Chart */}\n      {monthlyTrends.length > 0 && (\n        <Card data-testid=\"monthly-trends-card\" className=\"border-purple-200\">\n          <CardHeader className=\"border-b border-purple-200 bg-purple-50/30\">\n            <CardTitle className=\"flex items-center gap-2 text-purple-800\">\n              <TrendingUp className=\"h-5 w-5\" />\n              {language === \"ca\" ? \"Tendències mensuals\" : \"Tendencias mensuales\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Attendance Rate Trend */}\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-700 mb-3\">\n                  {language === \"ca\" ? \"Taxa d'assistència\" : \"Tasa de asistencia\"}\n                </h4>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <LineChart data={monthlyTrends}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"attendanceRate\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      name={language === \"ca\" ? \"Taxa %\" : \"Tasa %\"}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n\n              {/* Late Count Trend */}\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-700 mb-3\">\n                  {language === \"ca\" ? \"Retards mensuals\" : \"Retrasos mensuales\"}\n                </h4>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <BarChart data={monthlyTrends}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar \n                      dataKey=\"lateCount\" \n                      fill=\"#f59e0b\" \n                      name={language === \"ca\" ? \"Retards\" : \"Retrasos\"}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Empty State */}\n      {!reportData && !isLoading && (\n        <Card className=\"text-center p-12\" data-testid=\"empty-state-card\">\n          <BarChart3 className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            {language === \"ca\" ? \"Cap informe generat\" : \"Ningún informe generado\"}\n          </h3>\n          <p className=\"text-gray-600\">\n            {language === \"ca\" \n              ? \"Selecciona els tipus d'informes i fes clic a 'Generar informe' per començar\"\n              : \"Selecciona los tipos de informes y haz clic en 'Generar informe' para comenzar\"\n            }\n          </p>\n        </Card>\n      )}\n    </main>\n  );\n}","size_bytes":29254},"client/src/pages/ScheduleImport.tsx":{"content":"import { useState } from \"react\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePermissions } from \"@/hooks/usePermissions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Upload, \n  FileText, \n  Calendar, \n  Users, \n  Book, \n  Clock, \n  CheckCircle, \n  AlertTriangle,\n  Download,\n  Copy,\n  RefreshCw,\n  AlertCircle,\n  Info,\n  Settings\n} from \"lucide-react\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport { UntisStats } from \"@/components/UntisStats\";\n\nexport default function ScheduleImport() {\n  const { language } = useLanguage();\n  const { user } = useAuth();\n  const permissions = usePermissions();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [selectedFileName, setSelectedFileName] = useState<string>(\"\");\n  const [importProgress, setImportProgress] = useState(0);\n  const [isImporting, setIsImporting] = useState(false);\n  const [previewData, setPreviewData] = useState<any>(null);\n  const [selectedAcademicYear, setSelectedAcademicYear] = useState(\"\");\n  const [importResults, setImportResults] = useState<any>(null);\n\n  // Get academic years for current institution\n  const { data: academicYears = [] } = useQuery({\n    queryKey: [\"/api/academic-years\", user?.institutionId],\n    enabled: !!user?.institutionId,\n    staleTime: 60000, // Dades vàlides per 1 minut per evitar re-renders innecessaris\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    console.log('FILE_SELECT: File selected:', file?.name, file?.type);\n    \n    if (file) {\n      const fileName = file.name.toLowerCase();\n      if (fileName.endsWith('.xml') || fileName.endsWith('.gpu') || fileName.endsWith('.txt')) {\n        setSelectedFile(file);\n        setSelectedFileName(file.name); // Guardem el nom del fitxer per separat\n        setPreviewData(null);\n        setImportResults(null);\n        \n        toast({\n          title: language === \"ca\" ? \"Arxiu seleccionat\" : \"Archivo seleccionado\",\n          description: language === \"ca\" \n            ? `Arxiu carregat: ${file.name}`\n            : `Archivo cargado: ${file.name}`,\n        });\n      } else {\n        // Reset file input\n        event.target.value = '';\n        setSelectedFile(null);\n        setSelectedFileName(\"\");\n        \n        toast({\n          title: language === \"ca\" ? \"Format no vàlid\" : \"Formato no válido\",\n          description: language === \"ca\" \n            ? \"Si us plau, selecciona un arxiu XML, GPU o TXT de GP Untis\"\n            : \"Por favor, selecciona un archivo XML, GPU o TXT de GP Untis\",\n          variant: \"destructive\",\n        });\n      }\n    } else {\n      setSelectedFile(null);\n      setSelectedFileName(\"\");\n    }\n  };\n\n  const previewImport = async () => {\n    if (!selectedFile || !selectedAcademicYear) return;\n\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    formData.append('academicYearId', selectedAcademicYear);\n    formData.append('preview', 'true');\n\n    try {\n      const response = await fetch('/api/schedule-import/preview', {\n        method: 'POST',\n        body: formData,\n      });\n\n      const result = await response.json();\n      setPreviewData(result);\n    } catch (error) {\n      toast({\n        title: language === \"ca\" ? \"Error de previsualització\" : \"Error de previsualización\",\n        description: language === \"ca\" \n          ? \"No s'ha pogut processar l'arxiu\"\n          : \"No se pudo procesar el archivo\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const importMutation = useMutation({\n    mutationFn: async () => {\n      if (!selectedFile || !selectedAcademicYear) throw new Error(\"Missing data\");\n\n      const formData = new FormData();\n      formData.append('file', selectedFile);\n      formData.append('academicYearId', selectedAcademicYear);\n\n      setIsImporting(true);\n      setImportProgress(0);\n\n      // Simulate progress updates\n      const progressInterval = setInterval(() => {\n        setImportProgress(prev => {\n          if (prev >= 90) {\n            clearInterval(progressInterval);\n            return prev;\n          }\n          return prev + 10;\n        });\n      }, 500);\n\n      const response = await fetch('/api/schedule-import/execute', {\n        method: 'POST',\n        body: formData,\n      });\n\n      clearInterval(progressInterval);\n      setImportProgress(100);\n\n      const result = await response.json();\n      setImportResults(result);\n      return result;\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Importació completada\" : \"Importación completada\",\n        description: language === \"ca\" \n          ? \"Els horaris s'han importat correctament\"\n          : \"Los horarios se han importado correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === \"ca\" ? \"Error d'importació\" : \"Error de importación\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsImporting(false);\n    }\n  });\n\n  // Test with real uploaded file function\n  const handleTestRealFile = async () => {\n    setIsImporting(true);\n    setImportResults(null);\n\n    try {\n      const response = await apiRequest('POST', '/api/schedule-import/test-real', {});\n      const result = await response.json();\n\n      setImportResults(result);\n      \n      // Refresh statistics\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/schedule-import/statistics', user?.institutionId, selectedAcademicYear] \n      });\n      \n      toast({\n        title: language === \"ca\" ? \"Horaris importats\" : \"Horarios importados\",\n        description: `${result.sessionsImported} sessions d'horaris importades correctament`,\n      });\n    } catch (error) {\n      console.error('Test import error:', error);\n      toast({\n        title: language === \"ca\" ? \"Error d'importació\" : \"Error de importación\",\n        description: error instanceof Error ? error.message : \"Error desconegut\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsImporting(false);\n    }\n  };\n\n  // Complete import function\n  const handleCompleteImport = async () => {\n    if (isImporting) return; // Evita múltiples clicks\n    \n    setIsImporting(true);\n    setImportResults(null);\n\n    try {\n      const response = await apiRequest('POST', '/api/schedule-import/complete-import', {});\n      const result = await response.json();\n\n      setImportResults(result);\n      \n      // Refresh all queries\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/schedule-import/statistics', user?.institutionId, selectedAcademicYear] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/employees', user?.institutionId] \n      });\n      \n      toast({\n        title: language === \"ca\" ? \"Importació completa exitosa\" : \"Importación completa exitosa\",\n        description: language === \"ca\" \n          ? \"Tots els arxius GP Untis s'han importat correctament: professorat, matèries, grups i horaris\"\n          : \"Todos los archivos GP Untis se han importado correctamente: profesorado, materias, grupos y horarios\",\n      });\n    } catch (error) {\n      console.error('Complete import error:', error);\n      toast({\n        title: language === \"ca\" ? \"Error d'importació completa\" : \"Error de importación completa\",\n        description: error instanceof Error ? error.message : \"Error desconegut\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsImporting(false);\n    }\n  };\n\n  // Import teachers function\n  const handleImportTeachers = async () => {\n    setIsImporting(true);\n    setImportResults(null);\n\n    try {\n      const response = await apiRequest('POST', '/api/schedule-import/import-teachers', {});\n      const result = await response.json();\n\n      setImportResults(result);\n      \n      // Refresh employees query\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/employees', user?.institutionId] \n      });\n      \n      toast({\n        title: language === \"ca\" ? \"Professorat importat\" : \"Profesorado importado\",\n        description: `${result.created} professors creats, ${result.updated} actualitzats`,\n      });\n    } catch (error) {\n      console.error('Teachers import error:', error);\n      toast({\n        title: language === \"ca\" ? \"Error d'importació de professorat\" : \"Error de importación de profesorado\",\n        description: error instanceof Error ? error.message : \"Error desconegut\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsImporting(false);\n    }\n  };\n\n  return (\n    <ProtectedRoute requiredRoles={['superadmin', 'admin']}>\n      <div className=\"container mx-auto py-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">\n              {language === \"ca\" ? \"Importació d'Horaris GP Untis\" : \"Importación de Horarios GP Untis\"}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {language === \"ca\" \n                ? \"Importa horaris, professorat i matèries des de GP Untis\"\n                : \"Importa horarios, profesorado y materias desde GP Untis\"}\n            </p>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"import\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"import\" className=\"flex items-center gap-2\">\n              <Upload className=\"h-4 w-4\" />\n              {language === \"ca\" ? \"Importar\" : \"Importar\"}\n            </TabsTrigger>\n            <TabsTrigger value=\"statistics\" className=\"flex items-center gap-2\">\n              <FileText className=\"h-4 w-4\" />\n              {language === \"ca\" ? \"Estadístiques\" : \"Estadísticas\"}\n            </TabsTrigger>\n            <TabsTrigger value=\"copy\" className=\"flex items-center gap-2\">\n              <Copy className=\"h-4 w-4\" />\n              {language === \"ca\" ? \"Copiar Dades\" : \"Copiar Datos\"}\n            </TabsTrigger>\n            <TabsTrigger value=\"templates\" className=\"flex items-center gap-2\">\n              <Download className=\"h-4 w-4\" />\n              {language === \"ca\" ? \"Plantilles\" : \"Plantillas\"}\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"import\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Upload className=\"h-5 w-5\" />\n                  {language === \"ca\" ? \"Importar des de GP Untis\" : \"Importar desde GP Untis\"}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  {/* Complete GP Untis import section */}\n                  <div className=\"p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                    <h4 className=\"font-medium text-green-800 dark:text-green-200 mb-2\">\n                      {language === \"ca\" ? \"Importació completa de dades GP Untis\" : \"Importación completa de datos GP Untis\"}\n                    </h4>\n                    <p className=\"text-sm text-green-600 dark:text-green-300 mb-3\">\n                      {language === \"ca\" \n                        ? \"Importa tots els arxius: professorat, matèries, grups i horaris de l'Institut Bitàcola\"\n                        : \"Importa todos los archivos: profesorado, materias, grupos y horarios del Institut Bitàcola\"}\n                    </p>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        onClick={handleCompleteImport}\n                        className=\"bg-green-600 hover:bg-green-700 text-white\"\n                        size=\"sm\"\n                        disabled={isImporting}\n                        data-testid=\"button-complete-import\"\n                      >\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        {language === \"ca\" ? \"Importació completa\" : \"Importación completa\"}\n                      </Button>\n                      <Button\n                        onClick={handleImportTeachers}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"text-green-600 border-green-300 hover:bg-green-100 dark:text-green-400 dark:border-green-600 dark:hover:bg-green-900/40\"\n                        disabled={isImporting}\n                        data-testid=\"button-import-teachers\"\n                      >\n                        <Users className=\"h-4 w-4 mr-2\" />\n                        {language === \"ca\" ? \"Només professorat\" : \"Solo profesorado\"}\n                      </Button>\n                      <Button\n                        onClick={handleTestRealFile}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"text-blue-600 border-blue-300 hover:bg-blue-100 dark:text-blue-400 dark:border-blue-600 dark:hover:bg-blue-900/40\"\n                        disabled={isImporting}\n                        data-testid=\"button-import-schedules\"\n                      >\n                        <FileText className=\"h-4 w-4 mr-2\" />\n                        {language === \"ca\" ? \"Només horaris\" : \"Solo horarios\"}\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"academic-year-select\">\n                      {language === \"ca\" ? \"Curs acadèmic\" : \"Curso académico\"}\n                    </Label>\n                    <Select value={selectedAcademicYear} onValueChange={setSelectedAcademicYear}>\n                      <SelectTrigger id=\"academic-year-select\" data-testid=\"select-academic-year\">\n                        <SelectValue placeholder={language === \"ca\" ? \"Selecciona curs\" : \"Selecciona curso\"} />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {(academicYears as any[]).map((year: any) => (\n                          <SelectItem key={year.id} value={year.id}>\n                            {year.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"file-upload\">\n                      {language === \"ca\" ? \"Arxiu GP Untis\" : \"Archivo GP Untis\"}\n                    </Label>\n                    <Input\n                      id=\"file-upload\"\n                      type=\"file\"\n                      accept=\".xml,.gpu,.txt\"\n                      onChange={handleFileSelect}\n                      className=\"mt-1\"\n                      data-testid=\"input-file-upload\"\n                    />\n                    {selectedFileName && (\n                      <p className=\"text-sm text-green-600 dark:text-green-400 mt-1 font-medium\">\n                        {language === \"ca\" ? \"Arxiu seleccionat:\" : \"Archivo seleccionado:\"} {selectedFileName}\n                      </p>\n                    )}\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {language === \"ca\" \n                        ? \"Formats acceptats: XML, GPU, TXT\"\n                        : \"Formatos aceptados: XML, GPU, TXT\"}\n                    </p>\n                  </div>\n\n                  {selectedFile && selectedAcademicYear && (\n                    <div className=\"flex gap-2\">\n                      <Button onClick={previewImport} variant=\"outline\">\n                        <FileText className=\"h-4 w-4 mr-2\" />\n                        {language === \"ca\" ? \"Previsualitzar\" : \"Previsualizar\"}\n                      </Button>\n                      <Button \n                        onClick={() => importMutation.mutate()} \n                        disabled={isImporting}\n                        className=\"bg-green-600 hover:bg-green-700\"\n                      >\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        {isImporting \n                          ? (language === \"ca\" ? \"Important...\" : \"Importando...\")\n                          : (language === \"ca\" ? \"Importar\" : \"Importar\")\n                        }\n                      </Button>\n                    </div>\n                  )}\n\n                  {isImporting && (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>{language === \"ca\" ? \"Progrés d'importació\" : \"Progreso de importación\"}</span>\n                        <span>{importProgress}%</span>\n                      </div>\n                      <Progress value={importProgress} className=\"h-2\" />\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {previewData && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <FileText className=\"h-5 w-5\" />\n                    {language === \"ca\" ? \"Previsualització de dades\" : \"Previsualización de datos\"}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-3 gap-4 mb-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{previewData.teachers?.length || 0}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {language === \"ca\" ? \"Professors\" : \"Profesores\"}\n                      </div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">{previewData.subjects?.length || 0}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {language === \"ca\" ? \"Matèries\" : \"Materias\"}\n                      </div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-purple-600\">{previewData.schedules?.length || 0}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {language === \"ca\" ? \"Horaris\" : \"Horarios\"}\n                      </div>\n                    </div>\n                  </div>\n\n                  {previewData.conflicts?.length > 0 && (\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n                        <span className=\"font-medium text-yellow-800\">\n                          {language === \"ca\" ? \"Conflictes detectats\" : \"Conflictos detectados\"}\n                        </span>\n                      </div>\n                      <ul className=\"text-sm text-yellow-700 space-y-1\">\n                        {previewData.conflicts.map((conflict: string, index: number) => (\n                          <li key={index}>• {conflict}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {importResults && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                    {language === \"ca\" ? \"Resultats de la importació\" : \"Resultados de la importación\"}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-semibold text-green-600 mb-2\">\n                        {language === \"ca\" ? \"Creats\" : \"Creados\"}\n                      </h4>\n                      <ul className=\"space-y-1 text-sm\">\n                        <li>• {importResults.created || importResults.teachersCreated || 0} {language === \"ca\" ? \"professors\" : \"profesores\"}</li>\n                        <li>• {importResults.subjectsImported || 0} {language === \"ca\" ? \"matèries\" : \"materias\"}</li>\n                        <li>• {importResults.sessionsImported || importResults.schedulesImported || 0} {language === \"ca\" ? \"horaris\" : \"horarios\"}</li>\n                      </ul>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-blue-600 mb-2\">\n                        {language === \"ca\" ? \"Actualitzats\" : \"Actualizados\"}\n                      </h4>\n                      <ul className=\"space-y-1 text-sm\">\n                        <li>• {importResults.updated || importResults.teachersUpdated || 0} {language === \"ca\" ? \"professors\" : \"profesores\"}</li>\n                        <li>• {importResults.groupsImported || 0} {language === \"ca\" ? \"grups\" : \"grupos\"}</li>\n                        <li>• {importResults.employeesLinked || importResults.finalEmployeesLinked || 0} {language === \"ca\" ? \"horaris vinculats\" : \"horarios vinculados\"}</li>\n                      </ul>\n                    </div>\n                    {importResults.message && (\n                      <div className=\"p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-md\">\n                        <p className=\"text-sm text-green-800 dark:text-green-200\">\n                          {importResults.message}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"statistics\" className=\"space-y-6\">\n            {user?.institutionId && selectedAcademicYear && (\n              <UntisStats institutionId={user.institutionId} academicYearId={selectedAcademicYear} />\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"statistics\" className=\"space-y-6\">\n            {user?.institutionId && selectedAcademicYear ? (\n              <UntisStats institutionId={user.institutionId} academicYearId={selectedAcademicYear} />\n            ) : (\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-center text-muted-foreground\">\n                    <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p>\n                      {language === \"ca\" \n                        ? \"Selecciona un curs acadèmic per veure les estadístiques\"\n                        : \"Selecciona un curso académico para ver las estadísticas\"}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"copy\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Copy className=\"h-5 w-5\" />\n                  {language === \"ca\" ? \"Copiar dades entre cursos\" : \"Copiar datos entre cursos\"}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground mb-4\">\n                  {language === \"ca\" \n                    ? \"Copia professors i matèries d'un curs acadèmic a un altre\"\n                    : \"Copia profesores y materias de un curso académico a otro\"}\n                </p>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label>{language === \"ca\" ? \"Curs d'origen\" : \"Curso de origen\"}</Label>\n                      <Select>\n                        <SelectTrigger>\n                          <SelectValue placeholder={language === \"ca\" ? \"Selecciona...\" : \"Selecciona...\"} />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {(academicYears as any[]).map((year: any) => (\n                            <SelectItem key={year.id} value={year.id}>\n                              {year.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label>{language === \"ca\" ? \"Curs de destí\" : \"Curso de destino\"}</Label>\n                      <Select>\n                        <SelectTrigger>\n                          <SelectValue placeholder={language === \"ca\" ? \"Selecciona...\" : \"Selecciona...\"} />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {(academicYears as any[]).map((year: any) => (\n                            <SelectItem key={year.id} value={year.id}>\n                              {year.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <Button className=\"w-full\">\n                    <Copy className=\"h-4 w-4 mr-2\" />\n                    {language === \"ca\" ? \"Copiar dades\" : \"Copiar datos\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"templates\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Download className=\"h-5 w-5\" />\n                  {language === \"ca\" ? \"Plantilles d'importació\" : \"Plantillas de importación\"}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <Button variant=\"outline\" className=\"h-20 flex-col\">\n                      <FileText className=\"h-6 w-6 mb-2\" />\n                      <span className=\"text-sm\">\n                        {language === \"ca\" ? \"Plantilla XML\" : \"Plantilla XML\"}\n                      </span>\n                    </Button>\n                    <Button variant=\"outline\" className=\"h-20 flex-col\">\n                      <FileText className=\"h-6 w-6 mb-2\" />\n                      <span className=\"text-sm\">\n                        {language === \"ca\" ? \"Plantilla CSV\" : \"Plantilla CSV\"}\n                      </span>\n                    </Button>\n                  </div>\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                    <h4 className=\"font-medium text-blue-800 mb-2\">\n                      {language === \"ca\" ? \"Instruccions\" : \"Instrucciones\"}\n                    </h4>\n                    <ol className=\"text-sm text-blue-700 space-y-1 list-decimal list-inside\">\n                      <li>{language === \"ca\" ? \"Exporta les dades des de GP Untis\" : \"Exporta los datos desde GP Untis\"}</li>\n                      <li>{language === \"ca\" ? \"Selecciona el format XML o GPU\" : \"Selecciona el formato XML o GPU\"}</li>\n                      <li>{language === \"ca\" ? \"Puja l'arxiu utilitzant el formulari\" : \"Sube el archivo usando el formulario\"}</li>\n                      <li>{language === \"ca\" ? \"Revisa la previsualització abans d'importar\" : \"Revisa la previsualización antes de importar\"}</li>\n                    </ol>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </ProtectedRoute>\n  );\n}","size_bytes":28725},"client/src/pages/Settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePermissions } from \"@/hooks/usePermissions\";\nimport { t } from \"@/lib/i18n\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Info, \n  Shield, \n  UserPlus,\n  Edit,\n  Trash2,\n  Save,\n  Users,\n  Mail,\n  AlertTriangle,\n  Settings as SettingsIcon,\n  FileText\n} from \"lucide-react\";\nimport NetworkSettingsForm from \"@/components/NetworkSettingsForm\";\nimport EmailSettingsForm from \"@/components/EmailSettingsForm\";\nimport { PasswordChangeModal } from \"@/components/PasswordChangeModal\";\n\nimport AdminPasswordChangeForm from \"@/components/AdminPasswordChangeForm\";\n\ninterface CenterSettings {\n  centerName: string;\n  academicYear: string;\n  timezone: string;\n  defaultLanguage: string;\n}\n\nexport default function Settings() {\n  const { language, setLanguage } = useLanguage();\n  const { user } = useAuth();\n  const permissions = usePermissions();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Get institution ID from authenticated user\n  const institutionId = user?.institutionId || null;\n\n  const [centerSettings, setCenterSettings] = useState<CenterSettings>({\n    centerName: \"\",\n    academicYear: \"2025-2026\",\n    timezone: \"Europe/Barcelona\",\n    defaultLanguage: \"ca\",\n  });\n\n  const [autoDeleteEnabled, setAutoDeleteEnabled] = useState(true); // Default enabled for regulatory compliance\n  const [showAddAdminForm, setShowAddAdminForm] = useState(false);\n  const [showEditAdminForm, setShowEditAdminForm] = useState(false);\n  const [editingAdmin, setEditingAdmin] = useState<any>(null);\n  const [passwordChangeUser, setPasswordChangeUser] = useState<{ id: string; email: string } | null>(null);\n\n  const [newAdminData, setNewAdminData] = useState({\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    role: \"admin\",\n    password: \"prof123\"\n  });\n  const [editAdminData, setEditAdminData] = useState({\n    id: \"\",\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    role: \"admin\"\n  });\n\n  const { data: settings = [], isLoading: settingsLoading, error: settingsError } = useQuery({\n    queryKey: [\"/api/settings\", institutionId],\n    enabled: !!institutionId,\n    staleTime: 30000,\n    refetchOnWindowFocus: false,\n  });\n\n  // Load existing center settings when data is received  \n  useEffect(() => {\n    if (settings && Array.isArray(settings) && settings.length > 0) {\n      const settingsObj = settings.reduce((acc: any, setting: any) => {\n        acc[setting.key] = setting.value;\n        return acc;\n      }, {});\n      \n      const newCenterSettings = {\n        centerName: settingsObj.centerName || \"\",\n        academicYear: settingsObj.academicYear || \"2025-2026\",\n        timezone: settingsObj.timezone || \"Europe/Barcelona\",\n        defaultLanguage: settingsObj.defaultLanguage || \"ca\",\n      };\n      \n      // Only update if different to prevent loops\n      if (JSON.stringify(newCenterSettings) !== JSON.stringify(centerSettings)) {\n        setCenterSettings(newCenterSettings);\n      }\n      \n      // Handle both string and boolean values, default to true for compliance\n      const newAutoDeleteEnabled = settingsObj.autoDeleteEnabled === true || \n        settingsObj.autoDeleteEnabled === \"true\" || \n        (settingsObj.autoDeleteEnabled === undefined || settingsObj.autoDeleteEnabled === null);\n      \n      if (newAutoDeleteEnabled !== autoDeleteEnabled) {\n        setAutoDeleteEnabled(newAutoDeleteEnabled);\n      }\n    }\n  }, [settings]);\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (settingsData: CenterSettings) => {\n      console.log('SETTINGS_CLIENT: Updating settings:', settingsData);\n      console.log('SETTINGS_CLIENT: Auto delete enabled:', autoDeleteEnabled);\n      \n      // Use the correct endpoint that expects a settings object\n      const allSettings = {\n        ...settingsData,\n        autoDeleteEnabled: autoDeleteEnabled.toString()\n      };\n      \n      console.log('SETTINGS_CLIENT: Sending all settings:', allSettings);\n      \n      const response = await apiRequest(\"PUT\", `/api/settings/${institutionId}`, { \n        settings: allSettings \n      });\n      \n      console.log('SETTINGS_CLIENT: Response:', response);\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\", institutionId] });\n      toast({\n        title: t(\"success\", language),\n        description: language === \"ca\" ? \"Configuració guardada correctament\" : \"Configuración guardada correctamente\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\", language),\n        description: language === \"ca\" ? \"Error guardant la configuració\" : \"Error guardando la configuración\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveSettings = () => {\n    updateSettingsMutation.mutate(centerSettings);\n  };\n\n  const handleInputChange = (field: keyof CenterSettings, value: string) => {\n    setCenterSettings(prev => ({ ...prev, [field]: value }));\n  };\n\n  // Fetch real admin users from database\n  const { data: adminUsers = [], isLoading: usersLoading, error: usersError } = useQuery({\n    queryKey: [\"/api/users/admins\", institutionId],\n    enabled: !!institutionId,\n    staleTime: 30000,\n    refetchOnWindowFocus: false,\n  });\n\n  const createAdminMutation = useMutation({\n    mutationFn: async (adminData: typeof newAdminData) => {\n      return await apiRequest(\"POST\", `/api/users/admins`, {\n        ...adminData,\n        institutionId\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/admins\", institutionId] });\n      toast({\n        title: t(\"success\", language),\n        description: language === \"ca\" ? \"Administrador creat correctament\" : \"Administrador creado correctamente\",\n      });\n      setShowAddAdminForm(false);\n      setNewAdminData({\n        email: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        role: \"admin\",\n        password: \"prof123\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: t(\"error\", language),\n        description: error.message || (language === \"ca\" ? \"Error creant l'administrador\" : \"Error creando el administrador\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAdminMutation = useMutation({\n    mutationFn: async (adminData: typeof editAdminData) => {\n      return await apiRequest(\"PUT\", `/api/users/admins/${adminData.id}`, {\n        email: adminData.email,\n        firstName: adminData.firstName,\n        lastName: adminData.lastName,\n        role: adminData.role,\n        institutionId\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/admins\", institutionId] });\n      toast({\n        title: t(\"success\", language),\n        description: language === \"ca\" ? \"Administrador actualitzat correctament\" : \"Administrador actualizado correctamente\",\n      });\n      setShowEditAdminForm(false);\n      setEditingAdmin(null);\n      setEditAdminData({\n        id: \"\",\n        email: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        role: \"admin\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: t(\"error\", language),\n        description: error.message || (language === \"ca\" ? \"Error actualitzant l'administrador\" : \"Error actualizando el administrador\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditAdmin = (admin: any) => {\n    setEditingAdmin(admin);\n    setEditAdminData({\n      id: admin.id,\n      email: admin.email,\n      firstName: admin.firstName,\n      lastName: admin.lastName,\n      role: admin.role\n    });\n    setShowEditAdminForm(true);\n  };\n\n  const getRoleBadge = (role: string) => {\n    const roleMap = {\n      superadmin: {\n        label: language === \"ca\" ? \"Superadministrador\" : \"Superadministrador\",\n        className: \"bg-primary/10 text-primary\"\n      },\n      admin: {\n        label: language === \"ca\" ? \"Administrador\" : \"Administrador\", \n        className: \"bg-secondary/10 text-secondary\"\n      },\n      employee: {\n        label: language === \"ca\" ? \"Empleat\" : \"Empleado\",\n        className: \"bg-gray-100 text-gray-600\"\n      }\n    };\n    \n    const roleInfo = roleMap[role as keyof typeof roleMap] || roleMap.employee;\n    \n    return (\n      <Badge className={roleInfo.className}>\n        {roleInfo.label}\n      </Badge>\n    );\n  };\n\n  // Handle errors first\n  if (settingsError) {\n    return (\n      <main className=\"p-6 space-y-6\">\n        <div className=\"text-center text-red-600\">\n          <p>Error carregant configuració: {String(settingsError)}</p>\n        </div>\n      </main>\n    );\n  }\n  if (usersError) {\n    return (\n      <main className=\"p-6 space-y-6\">\n        <div className=\"text-center text-red-600\">\n          <p>Error carregant usuaris: {String(usersError)}</p>\n        </div>\n      </main>\n    );\n  }\n  \n  // Only show loading if we don't have institutionId or both queries are truly loading\n  if (!institutionId) {\n    return (\n      <main className=\"p-6 space-y-6\">\n        <div className=\"text-center\">\n          <p>Carregant informació del centre...</p>\n        </div>\n      </main>\n    );\n  }\n\n  // Show loading only if both queries are still pending AND we don't have data\n  const reallyLoading = (settingsLoading && (!settings || (Array.isArray(settings) && settings.length === 0))) || \n                       (usersLoading && (!adminUsers || (Array.isArray(adminUsers) && adminUsers.length === 0)));\n  \n  if (reallyLoading) {\n    return (\n      <main className=\"p-6 space-y-6\">\n        <div className=\"text-center\">\n          <p>Carregant configuració...</p>\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"p-6 space-y-6\">\n      {/* Personal Settings */}\n      <Card data-testid=\"personal-settings-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            {language === \"ca\" ? \"Configuració Personal\" : \"Configuración Personal\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">{language === \"ca\" ? \"Canviar contrasenya\" : \"Cambiar contraseña\"}</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  {language === \"ca\" \n                    ? \"Actualitza la teva contrasenya per mantenir el compte segur\" \n                    : \"Actualiza tu contraseña para mantener la cuenta segura\"}\n                </p>\n              </div>\n              <PasswordChangeModal>\n                <Button variant=\"outline\" data-testid=\"change-password-button\">\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  {language === \"ca\" ? \"Canviar\" : \"Cambiar\"}\n                </Button>\n              </PasswordChangeModal>\n            </div>\n            \n            <div className=\"border-t pt-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">{language === \"ca\" ? \"Informació del perfil\" : \"Información del perfil\"}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {user?.firstName} {user?.lastName} ({user?.email})\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Center Configuration */}\n      <Card data-testid=\"center-config-card\">\n        <CardHeader>\n          <CardTitle>\n            {t(\"center_configuration\", language)}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"center-name\">\n                {t(\"center_name\", language)}\n              </Label>\n              <Input\n                id=\"center-name\"\n                value={centerSettings.centerName}\n                onChange={(e) => handleInputChange(\"centerName\", e.target.value)}\n                data-testid=\"center-name-input\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"academic-year\">\n                {t(\"academic_year\", language)}\n              </Label>\n              <Select \n                value={centerSettings.academicYear} \n                onValueChange={(value) => handleInputChange(\"academicYear\", value)}\n              >\n                <SelectTrigger id=\"academic-year\" data-testid=\"academic-year-select\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"2024-2025\">2024-2025</SelectItem>\n                  <SelectItem value=\"2025-2026\">2025-2026</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"timezone\">\n                {t(\"timezone\", language)}\n              </Label>\n              <Select \n                value={centerSettings.timezone} \n                onValueChange={(value) => handleInputChange(\"timezone\", value)}\n              >\n                <SelectTrigger id=\"timezone\" data-testid=\"timezone-select\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Europe/Barcelona\">Europe/Barcelona</SelectItem>\n                  <SelectItem value=\"Europe/Madrid\">Europe/Madrid</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"default-language\">\n                {t(\"default_language\", language)}\n              </Label>\n              <Select \n                value={centerSettings.defaultLanguage} \n                onValueChange={(value) => handleInputChange(\"defaultLanguage\", value)}\n              >\n                <SelectTrigger id=\"default-language\" data-testid=\"default-language-select\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"ca\">Català</SelectItem>\n                  <SelectItem value=\"es\">Español</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <Button \n            onClick={handleSaveSettings}\n            disabled={updateSettingsMutation.isPending}\n            className=\"mt-6\"\n            data-testid=\"save-settings-button\"\n          >\n            <Save className=\"mr-2 h-4 w-4\" />\n            {t(\"save\", language)}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Data Retention Policy */}\n      <Card data-testid=\"data-retention-card\">\n        <CardHeader>\n          <CardTitle>\n            {t(\"data_retention\", language)}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-start\">\n              <Info className=\"text-blue-600 mr-3 h-5 w-5 mt-0.5\" />\n              <div>\n                <p className=\"text-sm font-medium text-blue-800 mb-1\">\n                  {language === \"ca\" ? \"Compliment RGPD\" : \"Cumplimiento RGPD\"}\n                </p>\n                <p className=\"text-sm text-blue-700\">\n                  {language === \"ca\" \n                    ? \"Les dades es conservaran durant 4 anys segons la normativa vigent. Aquest sistema compleix amb el Reglament General de Protecció de Dades (RGPD).\"\n                    : \"Los datos se conservarán durante 4 años según la normativa vigente. Este sistema cumple con el Reglamento General de Protección de Datos (RGPD).\"}\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n              <div>\n                <p className=\"font-medium text-text\">\n                  {language === \"ca\" ? \"Eliminació automàtica\" : \"Eliminación automática\"}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  {language === \"ca\" \n                    ? \"Eliminar dades automàticament després de 4 anys\"\n                    : \"Eliminar datos automáticamente después de 4 años\"}\n                </p>\n              </div>\n              <Switch\n                checked={autoDeleteEnabled}\n                onCheckedChange={setAutoDeleteEnabled}\n                data-testid=\"auto-delete-switch\"\n              />\n            </div>\n            \n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              <h4 className=\"font-medium text-text mb-2\">\n                {language === \"ca\" ? \"Drets dels treballadors\" : \"Derechos de los trabajadores\"}\n              </h4>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                <li>• {language === \"ca\" ? \"Accés a les seves dades\" : \"Acceso a sus datos\"}</li>\n                <li>• {language === \"ca\" ? \"Rectificació de dades incorrectes\" : \"Rectificación de datos incorrectos\"}</li>\n                <li>• {language === \"ca\" ? \"Limitació del tractament\" : \"Limitación del tratamiento\"}</li>\n                <li>• {language === \"ca\" ? \"Portabilitat de les dades\" : \"Portabilidad de los datos\"}</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Email Configuration Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Mail className=\"mr-2 h-5 w-5\" />\n            {language === \"ca\" ? \"Configuració d'Email\" : \"Configuración de Email\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-start\">\n              <Info className=\"text-green-600 mr-3 h-5 w-5 mt-0.5\" />\n              <div>\n                <p className=\"text-sm font-medium text-green-800 mb-1\">\n                  {language === \"ca\" ? \"Notificacions automàtiques\" : \"Notificaciones automáticas\"}\n                </p>\n                <p className=\"text-sm text-green-700\">\n                  {language === \"ca\" \n                    ? \"Configura el servidor d'email per enviar alertes automàtiques de retards, absències i notificacions legals.\"\n                    : \"Configura el servidor de email para enviar alertas automáticas de retrasos, ausencias y notificaciones legales.\"}\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          <EmailSettingsForm institutionId={institutionId} language={language} />\n        </CardContent>\n      </Card>\n\n      {/* Network Settings Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Shield className=\"mr-2 h-5 w-5\" />\n            {language === \"ca\" ? \"Configuració de Xarxa per Fitxatge\" : \"Configuración de Red para Fichaje\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-start\">\n              <Info className=\"text-blue-600 mr-3 h-5 w-5 mt-0.5\" />\n              <div>\n                <p className=\"text-sm font-medium text-blue-800 mb-1\">\n                  {language === \"ca\" ? \"Control d'accés per xarxa\" : \"Control de acceso por red\"}\n                </p>\n                <p className=\"text-sm text-blue-700\">\n                  {language === \"ca\" \n                    ? \"Configura les adreces IP des d'on es permet fer fitxatge. La gestió del sistema és accessible des de qualsevol lloc, però el fitxatge només des de la xarxa local del centre.\"\n                    : \"Configura las direcciones IP desde donde se permite hacer fichaje. La gestión del sistema es accesible desde cualquier lugar, pero el fichaje solo desde la red local del centro.\"}\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          <NetworkSettingsForm institutionId={institutionId} language={language} />\n        </CardContent>\n      </Card>\n\n\n\n      {/* Unified Alert Management Access */}\n      {permissions.canManageUsers && (\n        <Card data-testid=\"alert-management-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <AlertTriangle className=\"mr-2 h-5 w-5\" />\n              {language === \"ca\" ? \"Gestió d'Alertes\" : \"Gestión de Alertas\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              {language === \"ca\" \n                ? \"Accés centralitzat a la gestió completa d'alertes: configuració automàtica, justificacions d'absències i administració del sistema.\"\n                : \"Acceso centralizado a la gestión completa de alertas: configuración automática, justificaciones de ausencias y administración del sistema.\"\n              }\n            </p>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n              <div className=\"p-3 border rounded-lg\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <SettingsIcon className=\"h-4 w-4 text-blue-600\" />\n                  <span className=\"text-sm font-medium\">\n                    {language === \"ca\" ? \"Configuració\" : \"Configuración\"}\n                  </span>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {language === \"ca\" ? \"Alertes automàtiques i regles\" : \"Alertas automáticas y reglas\"}\n                </p>\n              </div>\n              <div className=\"p-3 border rounded-lg\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <FileText className=\"h-4 w-4 text-amber-600\" />\n                  <span className=\"text-sm font-medium\">\n                    {language === \"ca\" ? \"Justificacions\" : \"Justificaciones\"}\n                  </span>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {language === \"ca\" ? \"Revisió d'absències\" : \"Revisión de ausencias\"}\n                </p>\n              </div>\n              <div className=\"p-3 border rounded-lg\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Users className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"text-sm font-medium\">\n                    {language === \"ca\" ? \"Administració\" : \"Administración\"}\n                  </span>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {language === \"ca\" ? \"Historial i gestió\" : \"Historial y gestión\"}\n                </p>\n              </div>\n            </div>\n            <Button \n              onClick={() => window.location.href = '/alerts'}\n              className=\"w-full\"\n              data-testid=\"access-alert-management-button\"\n            >\n              <AlertTriangle className=\"mr-2 h-4 w-4\" />\n              {language === \"ca\" ? \"Accedir a la Gestió d'Alertes\" : \"Acceder a la Gestión de Alertas\"}\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* User Management */}\n      <Card data-testid=\"user-management-card\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>\n              {t(\"user_management\", language)}\n            </CardTitle>\n            <Button \n              onClick={() => setShowAddAdminForm(true)}\n              data-testid=\"add-admin-button\"\n            >\n              <UserPlus className=\"mr-2 h-4 w-4\" />\n              {language === \"ca\" ? \"Afegir administrador\" : \"Añadir administrador\"}\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>\n                    {language === \"ca\" ? \"Usuari\" : \"Usuario\"}\n                  </TableHead>\n                  <TableHead>\n                    {language === \"ca\" ? \"Rol\" : \"Rol\"}\n                  </TableHead>\n                  <TableHead>\n                    {language === \"ca\" ? \"Últim accés\" : \"Último acceso\"}\n                  </TableHead>\n                  <TableHead>\n                    {t(\"actions\", language)}\n                  </TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {usersLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={4} className=\"text-center py-8\">\n                      <div className=\"animate-pulse space-y-2\">\n                        <div className=\"h-4 bg-gray-200 rounded w-3/4 mx-auto\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2 mx-auto\"></div>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ) : (adminUsers as any[]).length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={4} className=\"text-center py-8 text-muted-foreground\">\n                      {language === \"ca\" ? \"No hi ha usuaris administradors\" : \"No hay usuarios administradores\"}\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  (adminUsers as any[]).map((admin: any) => (\n                    <TableRow key={admin.id} data-testid={`admin-${admin.id}`}>\n                      <TableCell>\n                        <div className=\"flex items-center\">\n                          <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center mr-3\">\n                            <Users className=\"w-4 h-4 text-primary\" />\n                          </div>\n                          <div>\n                            <p className=\"text-sm font-medium text-text\">\n                              {admin.firstName} {admin.lastName}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              {admin.email}\n                            </p>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {getRoleBadge(admin.role)}\n                      </TableCell>\n                      <TableCell className=\"text-sm text-text\">\n                        {new Date(admin.createdAt).toLocaleDateString(language === \"ca\" ? \"ca-ES\" : \"es-ES\")}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => setPasswordChangeUser({ id: admin.id, email: admin.email })}\n                            data-testid={`change-password-${admin.id}`}\n                            title={language === \"ca\" ? \"Canviar contrasenya\" : \"Cambiar contraseña\"}\n                          >\n                            <Shield className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => handleEditAdmin(admin)}\n                            data-testid={`edit-admin-${admin.id}`}\n                            title={language === \"ca\" ? \"Editar administrador\" : \"Editar administrador\"}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Security Settings */}\n      <Card data-testid=\"security-settings-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Shield className=\"mr-2 h-5 w-5\" />\n            {language === \"ca\" ? \"Configuració de seguretat\" : \"Configuración de seguridad\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n              <div className=\"flex items-start\">\n                <Shield className=\"text-green-600 mr-3 h-5 w-5 mt-0.5\" />\n                <div>\n                  <p className=\"text-sm font-medium text-green-800 mb-1\">\n                    {language === \"ca\" ? \"Seguretat habilitada\" : \"Seguridad habilitada\"}\n                  </p>\n                  <ul className=\"text-sm text-green-700 space-y-1\">\n                    <li>• {language === \"ca\" ? \"Xifratge de dades en repòs i en trànsit\" : \"Cifrado de datos en reposo y en tránsito\"}</li>\n                    <li>• {language === \"ca\" ? \"Autenticació robusta amb Replit Auth\" : \"Autenticación robusta con Replit Auth\"}</li>\n                    <li>• {language === \"ca\" ? \"Control d'accés basat en rols\" : \"Control de acceso basado en roles\"}</li>\n                    <li>• {language === \"ca\" ? \"Registres d'accés i auditoria\" : \"Registros de acceso y auditoría\"}</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Add Admin Dialog */}\n      {showAddAdminForm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">\n                {language === \"ca\" ? \"Afegir administrador\" : \"Añadir administrador\"}\n              </h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowAddAdminForm(false)}\n                data-testid=\"close-admin-form\"\n              >\n                ✕\n              </Button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"admin-email\">Email</Label>\n                <Input\n                  id=\"admin-email\"\n                  type=\"email\"\n                  value={newAdminData.email}\n                  onChange={(e) => setNewAdminData({...newAdminData, email: e.target.value})}\n                  placeholder=\"administrador@centre.edu\"\n                  data-testid=\"admin-email-input\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"admin-firstname\">\n                  {language === \"ca\" ? \"Nom\" : \"Nombre\"}\n                </Label>\n                <Input\n                  id=\"admin-firstname\"\n                  value={newAdminData.firstName}\n                  onChange={(e) => setNewAdminData({...newAdminData, firstName: e.target.value})}\n                  data-testid=\"admin-firstname-input\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"admin-lastname\">\n                  {language === \"ca\" ? \"Cognoms\" : \"Apellidos\"}\n                </Label>\n                <Input\n                  id=\"admin-lastname\"\n                  value={newAdminData.lastName}\n                  onChange={(e) => setNewAdminData({...newAdminData, lastName: e.target.value})}\n                  data-testid=\"admin-lastname-input\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"admin-role\">\n                  {language === \"ca\" ? \"Rol\" : \"Rol\"}\n                </Label>\n                <Select \n                  value={newAdminData.role}\n                  onValueChange={(value) => setNewAdminData({...newAdminData, role: value})}\n                >\n                  <SelectTrigger id=\"admin-role\" data-testid=\"admin-role-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"admin\">\n                      {language === \"ca\" ? \"Administrador\" : \"Administrador\"}\n                    </SelectItem>\n                    <SelectItem value=\"superadmin\">\n                      {language === \"ca\" ? \"Superadministrador\" : \"Superadministrador\"}\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"bg-gray-50 p-3 rounded\">\n                <p className=\"text-sm text-gray-600\">\n                  {language === \"ca\" \n                    ? \"Contrasenya per defecte: prof123\"\n                    : \"Contraseña por defecto: prof123\"}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2 mt-6\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowAddAdminForm(false)}\n                data-testid=\"cancel-admin-button\"\n              >\n                {language === \"ca\" ? \"Cancel·lar\" : \"Cancelar\"}\n              </Button>\n              <Button\n                onClick={() => createAdminMutation.mutate(newAdminData)}\n                disabled={createAdminMutation.isPending || !newAdminData.email || !newAdminData.firstName}\n                data-testid=\"save-admin-button\"\n              >\n                {createAdminMutation.isPending ? (\n                  language === \"ca\" ? \"Creant...\" : \"Creando...\"\n                ) : (\n                  language === \"ca\" ? \"Crear\" : \"Crear\"\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Edit Admin Dialog */}\n      {showEditAdminForm && editingAdmin && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">\n                {language === \"ca\" ? \"Editar administrador\" : \"Editar administrador\"}\n              </h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => {\n                  setShowEditAdminForm(false);\n                  setEditingAdmin(null);\n                  setEditAdminData({\n                    id: \"\",\n                    email: \"\",\n                    firstName: \"\",\n                    lastName: \"\",\n                    role: \"admin\"\n                  });\n                }}\n                data-testid=\"close-edit-admin-form\"\n              >\n                ✕\n              </Button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"edit-admin-email\">Email</Label>\n                <Input\n                  id=\"edit-admin-email\"\n                  type=\"email\"\n                  value={editAdminData.email}\n                  onChange={(e) => setEditAdminData({...editAdminData, email: e.target.value})}\n                  data-testid=\"edit-admin-email-input\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"edit-admin-firstname\">\n                  {language === \"ca\" ? \"Nom\" : \"Nombre\"}\n                </Label>\n                <Input\n                  id=\"edit-admin-firstname\"\n                  value={editAdminData.firstName}\n                  onChange={(e) => setEditAdminData({...editAdminData, firstName: e.target.value})}\n                  data-testid=\"edit-admin-firstname-input\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"edit-admin-lastname\">\n                  {language === \"ca\" ? \"Cognoms\" : \"Apellidos\"}\n                </Label>\n                <Input\n                  id=\"edit-admin-lastname\"\n                  value={editAdminData.lastName}\n                  onChange={(e) => setEditAdminData({...editAdminData, lastName: e.target.value})}\n                  data-testid=\"edit-admin-lastname-input\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"edit-admin-role\">\n                  {language === \"ca\" ? \"Rol\" : \"Rol\"}\n                </Label>\n                <Select \n                  value={editAdminData.role}\n                  onValueChange={(value) => setEditAdminData({...editAdminData, role: value})}\n                >\n                  <SelectTrigger id=\"edit-admin-role\" data-testid=\"edit-admin-role-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"admin\">\n                      {language === \"ca\" ? \"Administrador\" : \"Administrador\"}\n                    </SelectItem>\n                    <SelectItem value=\"superadmin\">\n                      {language === \"ca\" ? \"Superadministrador\" : \"Superadministrador\"}\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2 mt-6\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setShowEditAdminForm(false);\n                  setEditingAdmin(null);\n                  setEditAdminData({\n                    id: \"\",\n                    email: \"\",\n                    firstName: \"\",\n                    lastName: \"\",\n                    role: \"admin\"\n                  });\n                }}\n                data-testid=\"cancel-edit-admin-button\"\n              >\n                {language === \"ca\" ? \"Cancel·lar\" : \"Cancelar\"}\n              </Button>\n              <Button\n                onClick={() => updateAdminMutation.mutate(editAdminData)}\n                disabled={updateAdminMutation.isPending || !editAdminData.email || !editAdminData.firstName}\n                data-testid=\"save-edit-admin-button\"\n              >\n                {updateAdminMutation.isPending ? (\n                  language === \"ca\" ? \"Guardant...\" : \"Guardando...\"\n                ) : (\n                  language === \"ca\" ? \"Guardar\" : \"Guardar\"\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Admin Password Change Modal */}\n      {passwordChangeUser && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">\n                {language === \"ca\" ? \"Canviar contrasenya\" : \"Cambiar contraseña\"}\n              </h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setPasswordChangeUser(null)}\n                data-testid=\"close-password-change-form\"\n              >\n                ✕\n              </Button>\n            </div>\n            \n            <div className=\"mb-4\">\n              <p className=\"text-sm text-gray-600\">\n                {language === \"ca\" \n                  ? `Canviant la contrasenya per a: ${passwordChangeUser.email}`\n                  : `Cambiando la contraseña para: ${passwordChangeUser.email}`}\n              </p>\n            </div>\n            \n            <AdminPasswordChangeForm \n              userId={passwordChangeUser.id} \n              userEmail={passwordChangeUser.email}\n              onSuccess={() => setPasswordChangeUser(null)}\n              language={language}\n            />\n          </div>\n        </div>\n      )}\n      \n\n    </main>\n  );\n}\n","size_bytes":40922},"client/src/pages/WeeklySchedule.tsx":{"content":"import React, { useState, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { Calendar, Clock, BookOpen, Users, ChevronLeft, ChevronRight, Timer } from \"lucide-react\";\nimport { format, startOfWeek, addDays, addWeeks, subWeeks, isSameDay } from \"date-fns\";\nimport { ca, es } from \"date-fns/locale\";\nimport { calculateExpectedTimes, getTodayDayOfWeek, type ScheduleSession } from \"@/lib/scheduleUtils\";\n\n// ScheduleSession interface moved to scheduleUtils.ts\n\nexport default function WeeklySchedule() {\n  const { user } = useAuth();\n  const { language } = useLanguage();\n  const [currentWeek, setCurrentWeek] = useState(new Date());\n  \n  const locale = language === \"ca\" ? ca : es;\n\n  // Memoize calculations to prevent re-renders\n  const weekStart = useMemo(() => startOfWeek(currentWeek, { weekStartsOn: 1 }), [currentWeek]);\n  const weekStartString = useMemo(() => format(weekStart, 'yyyy-MM-dd'), [weekStart]);\n  const weekDays = useMemo(() => Array.from({ length: 5 }, (_, i) => addDays(weekStart, i)), [weekStart]);\n  const hourPeriods = useMemo(() => Array.from({ length: 8 }, (_, i) => i + 1), []); // Hours 1-8\n\n  // Get weekly schedule data\n  const { data: scheduleData, isLoading, error } = useQuery({\n    queryKey: ['/api/schedule/weekly', user?.id, weekStartString],\n    queryFn: async () => {\n      if (!user?.id) return [];\n      const response = await fetch(`/api/schedule/weekly/${user.id}/${weekStartString}`);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return response.json();\n    },\n    enabled: !!user?.id,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    staleTime: 30 * 60 * 1000, // 30 minutes\n  });\n\n  const getSessionForSlot = (day: number, hour: number): ScheduleSession | null => {\n    if (!scheduleData || !Array.isArray(scheduleData)) return null;\n    return scheduleData.find(\n      (session: ScheduleSession) => session.dayOfWeek === day && session.hourPeriod === hour\n    ) || null;\n  };\n\n  const getTimeForHour = (hour: number): string => {\n    // Institut Bitàcola schedule according to specifications\n    const times = [\n      \"08:00-09:00\", // 1a hora\n      \"09:00-10:00\", // 2a hora  \n      \"10:00-11:00\", // 3a hora\n      \"11:30-12:30\", // 4a hora (després del pati 11:00-11:30)\n      \"12:30-13:30\", // 5a hora\n      \"13:30-14:30\", // 6a hora\n      \"15:30-16:30\", // 7a hora (després del dinar 14:30-15:30)\n      \"16:30-17:30\"  // 8a hora\n    ];\n    return times[hour - 1] || `${7 + hour}:00-${8 + hour}:00`;\n  };\n\n  const isBreakTime = (hour: number): boolean => {\n    return false; // No break time rows, just time gaps\n  };\n\n  // Memoize calculations to prevent re-renders\n  const totalHours = useMemo(() => {\n    if (!scheduleData || !Array.isArray(scheduleData)) return { lective: 0, nonLective: 0 };\n    \n    const lective = scheduleData.filter((s: ScheduleSession) => s.isLectiveHour).length;\n    const nonLective = scheduleData.filter((s: ScheduleSession) => !s.isLectiveHour).length;\n    \n    return { lective, nonLective };\n  }, [scheduleData]);\n\n  const { lective, nonLective } = totalHours;\n\n  // Calculate expected times for today - memoized\n  const todayDayOfWeek = useMemo(() => getTodayDayOfWeek(), []);\n  const todayExpectedTimes = useMemo(() => \n    calculateExpectedTimes(scheduleData || [], todayDayOfWeek), \n    [scheduleData, todayDayOfWeek]\n  );\n  const isToday = useMemo(() => isSameDay(new Date(), new Date()), []);\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n              <Calendar className=\"h-8 w-8\" />\n              {language === \"ca\" ? \"El meu horari personal\" : \"Mi horario personal\"}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {language === \"ca\" \n                ? \"Visualitza el teu horari de classes personal\" \n                : \"Visualiza tu horario de clases personal\"}\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentWeek(subWeeks(currentWeek, 1))}\n              data-testid=\"button-previous-week\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <div className=\"text-sm font-medium px-3\">\n              {format(weekStart, 'dd MMM', { locale })} - {format(addDays(weekStart, 4), 'dd MMM yyyy', { locale })}\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentWeek(addWeeks(currentWeek, 1))}\n              data-testid=\"button-next-week\"\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Today's Expected Times */}\n        {isToday && todayExpectedTimes.hasScheduleToday && (\n          <Card className=\"mb-6 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20 border-blue-200 dark:border-blue-800\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-blue-900 dark:text-blue-100\">\n                <Timer className=\"h-5 w-5\" />\n                {language === \"ca\" ? \"Horaris previstos d'avui\" : \"Horarios previstos de hoy\"}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-white/60 dark:bg-gray-800/60 rounded-lg border\">\n                  <div className=\"text-lg font-bold text-green-700 dark:text-green-400\">\n                    {todayExpectedTimes.expectedEntry || \"--:--\"}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {language === \"ca\" ? \"Entrada prevista\" : \"Entrada prevista\"}\n                  </div>\n                </div>\n                <div className=\"text-center p-4 bg-white/60 dark:bg-gray-800/60 rounded-lg border\">\n                  <div className=\"text-lg font-bold text-blue-700 dark:text-blue-400\">\n                    {todayExpectedTimes.expectedExit || \"--:--\"}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {language === \"ca\" ? \"Sortida prevista\" : \"Salida prevista\"}\n                  </div>\n                </div>\n              </div>\n              <div className=\"mt-3 text-center\">\n                <p className=\"text-xs text-blue-700 dark:text-blue-300\">\n                  {language === \"ca\" \n                    ? \"Horaris calculats segons la primera i última classe del dia\" \n                    : \"Horarios calculados según la primera y última clase del día\"}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Hours summary */}\n        <div className=\"grid grid-cols-3 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{lective}</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {language === \"ca\" ? \"Hores lectives\" : \"Horas lectivas\"}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-orange-600\">{nonLective}</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {language === \"ca\" ? \"Hores no lectives\" : \"Horas no lectivas\"}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{lective + nonLective}</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {language === \"ca\" ? \"Total hores\" : \"Total horas\"}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Schedule grid */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"h-5 w-5\" />\n            {language === \"ca\" ? \"Horari setmanal\" : \"Horario semanal\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full border-collapse\">\n              <thead>\n                <tr>\n                  <th className=\"border p-2 bg-muted text-left w-24\">\n                    {language === \"ca\" ? \"Hora\" : \"Hora\"}\n                  </th>\n                  {weekDays.map((day, index) => (\n                    <th key={index} className=\"border p-2 bg-muted text-center min-w-[200px]\">\n                      <div className=\"font-medium\">\n                        {format(day, 'EEEE', { locale })}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {format(day, 'dd/MM', { locale })}\n                      </div>\n                    </th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {hourPeriods.map((hour) => {\n                  // Add visual separator after 3rd hour (pati) and 6th hour (dinar)\n                  const showSeparator = hour === 3 || hour === 6;\n                  \n                  return (\n                    <React.Fragment key={`hour-${hour}`}>\n                      <tr>\n                        <td className=\"border p-2 text-sm font-medium\">\n                          <div>{hour}ª</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {getTimeForHour(hour)}\n                          </div>\n                        </td>\n                        {weekDays.map((day, dayIndex) => {\n                          const dayOfWeek = dayIndex + 1; // Monday = 1\n                          const session = getSessionForSlot(dayOfWeek, hour);\n                          \n                          if (!session) {\n                            return (\n                              <td key={dayIndex} className=\"border p-2 text-center text-muted-foreground\">\n                                -\n                              </td>\n                            );\n                          }\n                          \n                          return (\n                            <td key={dayIndex} className=\"border p-2\">\n                              <div className={`p-2 rounded text-sm ${\n                                session.isLectiveHour \n                                  ? 'bg-blue-100 dark:bg-blue-900/30 border-l-4 border-l-blue-500'\n                                  : 'bg-orange-100 dark:bg-orange-900/30 border-l-4 border-l-orange-500'\n                              }`}>\n                                <div className=\"font-medium flex items-center gap-1\">\n                                  <BookOpen className=\"h-3 w-3\" />\n                                  {session.subjectName || session.subjectCode}\n                                </div>\n                                {session.groupCode && (\n                                  <div className=\"text-xs flex items-center gap-1 mt-1\">\n                                    <Users className=\"h-3 w-3\" />\n                                    {session.groupCode}\n                                  </div>\n                                )}\n                                {session.classroomCode && (\n                                  <div className=\"text-xs text-muted-foreground mt-1\">\n                                    {session.classroomCode}\n                                  </div>\n                                )}\n                              </div>\n                            </td>\n                          );\n                        })}\n                      </tr>\n                      {showSeparator && (\n                        <tr className=\"bg-yellow-50 dark:bg-yellow-900/10\">\n                          <td className=\"border p-1 text-xs text-center text-muted-foreground\">\n                            {hour === 3 ? (language === \"ca\" ? \"Pati\" : \"Recreo\") : (language === \"ca\" ? \"Dinar\" : \"Comida\")}\n                          </td>\n                          {weekDays.map((_, dayIndex) => (\n                            <td key={dayIndex} className=\"border p-1 text-xs text-center text-muted-foreground\">\n                              {hour === 3 ? \"11:00-11:30\" : \"14:30-15:30\"}\n                            </td>\n                          ))}\n                        </tr>\n                      )}\n                    </React.Fragment>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          \n          <div className=\"mt-4 flex gap-4 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 bg-blue-100 dark:bg-blue-900/30 border-l-4 border-l-blue-500 rounded\"></div>\n              <span>{language === \"ca\" ? \"Hores lectives\" : \"Horas lectivas\"}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 bg-orange-100 dark:bg-orange-900/30 border-l-4 border-l-orange-500 rounded\"></div>\n              <span>{language === \"ca\" ? \"Hores no lectives\" : \"Horas no lectivas\"}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14450},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/modals/EmployeeModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { t } from \"@/lib/i18n\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle \n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { insertEmployeeSchema, type Employee } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { X } from \"lucide-react\";\n\ninterface EmployeeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  employee?: Employee | null;\n  institutionId: string;\n}\n\ninterface EmployeeFormData {\n  fullName: string;\n  dni: string;\n  email: string;\n  phone: string;\n  departmentId: string;\n  contractType: \"full_time\" | \"part_time\" | \"substitute\";\n  status: \"active\" | \"inactive\" | \"temporary_leave\";\n  startDate: string;\n  endDate: string;\n  schedules: {\n    monday: string;\n    tuesday: string;\n    wednesday: string;\n    thursday: string;\n    friday: string;\n  };\n}\n\nexport default function EmployeeModal({ isOpen, onClose, employee, institutionId }: EmployeeModalProps) {\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [formData, setFormData] = useState<EmployeeFormData>({\n    fullName: \"\",\n    dni: \"\",\n    email: \"\",\n    phone: \"\",\n    departmentId: \"\",\n    contractType: \"full_time\",\n    status: \"active\",\n    startDate: \"\",\n    endDate: \"\",\n    schedules: {\n      monday: \"08:00-16:00\",\n      tuesday: \"08:00-16:00\",\n      wednesday: \"08:00-16:00\",\n      thursday: \"08:00-16:00\",\n      friday: \"08:00-16:00\",\n    },\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    if (employee) {\n      // Handle data from employees list - employee.firstName/lastName from users table\n      setFormData({\n        fullName: employee.fullName || `${employee.firstName || ''} ${employee.lastName || ''}`.trim(),\n        dni: employee.dni || \"\",\n        email: employee.email || \"\",\n        phone: employee.phone || \"\",\n        departmentId: employee.departmentId || \"\",\n        contractType: employee.contractType || \"full_time\",\n        status: employee.status || \"active\",\n        startDate: employee.startDate || \"\",\n        endDate: employee.endDate || \"\",\n        schedules: {\n          monday: \"08:00-16:00\",\n          tuesday: \"08:00-16:00\", \n          wednesday: \"08:00-16:00\",\n          thursday: \"08:00-16:00\",\n          friday: \"08:00-16:00\",\n        },\n      });\n    } else {\n      // Reset form for new employee\n      setFormData({\n        fullName: \"\",\n        dni: \"\",\n        email: \"\",\n        phone: \"\",\n        departmentId: \"\",\n        contractType: \"full_time\",\n        status: \"active\",\n        startDate: \"\",\n        endDate: \"\",\n        schedules: {\n          monday: \"08:00-16:00\",\n          tuesday: \"08:00-16:00\",\n          wednesday: \"08:00-16:00\",\n          thursday: \"08:00-16:00\",\n          friday: \"08:00-16:00\",\n        },\n      });\n    }\n    setErrors({});\n  }, [employee, isOpen]);\n\n  const employeeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // Use the correct admin route for updating employees - employee.id is the user_id\n      const url = employee ? `/api/admin/employees/${employee.id}` : \"/api/employees\";\n      const method = employee ? \"PUT\" : \"POST\";\n      console.log('EMPLOYEE_MODAL: Updating employee with:', method, url, data);\n      return await apiRequest(method, url, data);\n    },\n    onSuccess: () => {\n      // Invalidate all relevant cache keys\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/employees\", institutionId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/employees\"] });\n      toast({\n        title: t(\"success\", language),\n        description: employee \n          ? (language === \"ca\" ? \"Empleat actualitzat correctament\" : \"Empleado actualizado correctamente\")\n          : (language === \"ca\" ? \"Empleat creat correctament\" : \"Empleado creado correctamente\"),\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      if (error.message.includes(\"Invalid employee data\")) {\n        const errorData = JSON.parse(error.message.split(\"Invalid employee data\")[1] || \"{}\");\n        if (errorData.errors) {\n          const fieldErrors: Record<string, string> = {};\n          errorData.errors.forEach((err: any) => {\n            fieldErrors[err.path[0]] = err.message;\n          });\n          setErrors(fieldErrors);\n        }\n      } else {\n        toast({\n          title: t(\"error\", language),\n          description: employee\n            ? (language === \"ca\" ? \"Error actualitzant l'empleat\" : \"Error actualizando el empleado\")\n            : (language === \"ca\" ? \"Error creant l'empleat\" : \"Error creando el empleado\"),\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleInputChange = (field: keyof EmployeeFormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: \"\" }));\n    }\n  };\n\n  const handleScheduleChange = (day: keyof EmployeeFormData[\"schedules\"], value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      schedules: { ...prev.schedules, [day]: value }\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      // Prepare data to send to backend\n      const employeeData = {\n        userId: employee?.id || \"temp-user-id\", // employee.id IS the user_id\n        institutionId,\n        fullName: formData.fullName,\n        dni: formData.dni,\n        email: formData.email,\n        phone: formData.phone,\n        departmentId: formData.departmentId || null,\n        contractType: formData.contractType,\n        status: formData.status,\n        startDate: formData.startDate,\n        endDate: formData.endDate || null,\n        role: employee?.role || 'employee',\n      };\n\n      // Basic validation\n      if (!formData.fullName.trim()) {\n        setErrors({ fullName: language === \"ca\" ? \"El nom és obligatori\" : \"El nombre es obligatorio\" });\n        return;\n      }\n      if (!formData.dni.trim()) {\n        setErrors({ dni: language === \"ca\" ? \"El DNI és obligatori\" : \"El DNI es obligatorio\" });\n        return;\n      }\n      if (!formData.email.trim()) {\n        setErrors({ email: language === \"ca\" ? \"L'email és obligatori\" : \"El email es obligatorio\" });\n        return;\n      }\n\n      employeeMutation.mutate(employeeData);\n    } catch (error) {\n      console.error(\"Validation error:\", error);\n    }\n  };\n\n  const departmentOptions = [\n    { value: \"primary\", label: t(\"primary_education\", language) },\n    { value: \"secondary\", label: t(\"secondary_education\", language) },\n    { value: \"administration\", label: t(\"administration\", language) },\n  ];\n\n  const contractTypeOptions = [\n    { value: \"full_time\", label: t(\"full_time\", language) },\n    { value: \"part_time\", label: t(\"part_time\", language) },\n    { value: \"substitute\", label: t(\"substitute\", language) },\n  ];\n\n  const statusOptions = [\n    { value: \"active\", label: t(\"active\", language) },\n    { value: \"inactive\", label: t(\"inactive\", language) },\n    { value: \"temporary_leave\", label: t(\"temporary_leave\", language) },\n  ];\n\n  const dayLabels = [\n    { key: \"monday\", label: t(\"monday\", language) },\n    { key: \"tuesday\", label: t(\"tuesday\", language) },\n    { key: \"wednesday\", label: t(\"wednesday\", language) },\n    { key: \"thursday\", label: t(\"thursday\", language) },\n    { key: \"friday\", label: t(\"friday\", language) },\n  ];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto modal-content-solid\" data-testid=\"employee-modal\">\n        <DialogHeader>\n          <DialogTitle>\n            {employee \n              ? (language === \"ca\" ? \"Editar empleat\" : \"Editar empleado\")\n              : (language === \"ca\" ? \"Afegir nou empleat\" : \"Añadir nuevo empleado\")}\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"full-name\">\n                {t(\"full_name\", language)} *\n              </Label>\n              <Input\n                id=\"full-name\"\n                value={formData.fullName}\n                onChange={(e) => handleInputChange(\"fullName\", e.target.value)}\n                className={errors.fullName ? \"border-error\" : \"\"}\n                data-testid=\"employee-fullname-input\"\n              />\n              {errors.fullName && (\n                <p className=\"text-sm text-error mt-1\">{errors.fullName}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"dni\">DNI/NIE *</Label>\n              <Input\n                id=\"dni\"\n                value={formData.dni}\n                onChange={(e) => handleInputChange(\"dni\", e.target.value)}\n                className={errors.dni ? \"border-error\" : \"\"}\n                data-testid=\"employee-dni-input\"\n              />\n              {errors.dni && (\n                <p className=\"text-sm text-error mt-1\">{errors.dni}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"email\">\n                {t(\"email\", language)} *\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                className={errors.email ? \"border-error\" : \"\"}\n                data-testid=\"employee-email-input\"\n              />\n              {errors.email && (\n                <p className=\"text-sm text-error mt-1\">{errors.email}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"phone\">\n                {t(\"phone\", language)}\n              </Label>\n              <Input\n                id=\"phone\"\n                type=\"tel\"\n                value={formData.phone}\n                onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n                data-testid=\"employee-phone-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"department\">\n                {t(\"department\", language)}\n              </Label>\n              <Select value={formData.departmentId} onValueChange={(value) => handleInputChange(\"departmentId\", value)}>\n                <SelectTrigger id=\"department\" data-testid=\"employee-department-select\">\n                  <SelectValue placeholder={language === \"ca\" ? \"Selecciona departament\" : \"Selecciona departamento\"} />\n                </SelectTrigger>\n                <SelectContent>\n                  {departmentOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"contract-type\">\n                {t(\"contract_type\", language)}\n              </Label>\n              <Select value={formData.contractType} onValueChange={(value: any) => handleInputChange(\"contractType\", value)}>\n                <SelectTrigger id=\"contract-type\" data-testid=\"employee-contract-select\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {contractTypeOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"start-date\">\n                {t(\"start_date\", language)}\n              </Label>\n              <Input\n                id=\"start-date\"\n                type=\"date\"\n                value={formData.startDate}\n                onChange={(e) => handleInputChange(\"startDate\", e.target.value)}\n                data-testid=\"employee-startdate-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"end-date\">\n                {t(\"end_date\", language)}\n              </Label>\n              <Input\n                id=\"end-date\"\n                type=\"date\"\n                value={formData.endDate}\n                onChange={(e) => handleInputChange(\"endDate\", e.target.value)}\n                data-testid=\"employee-enddate-input\"\n              />\n            </div>\n          </div>\n\n          {/* Weekly Schedule */}\n          <div>\n            <Label className=\"text-base font-medium\">\n              {language === \"ca\" ? \"Horari setmanal\" : \"Horario semanal\"}\n            </Label>\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 mt-3\">\n              {dayLabels.map((day) => (\n                <div key={day.key}>\n                  <Label className=\"text-xs text-gray-600\">\n                    {day.label}\n                  </Label>\n                  <Input\n                    placeholder=\"08:00-16:00\"\n                    value={formData.schedules[day.key as keyof typeof formData.schedules]}\n                    onChange={(e) => handleScheduleChange(day.key as keyof typeof formData.schedules, e.target.value)}\n                    className=\"text-sm\"\n                    data-testid={`employee-schedule-${day.key}`}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-6 border-t border-gray-200\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onClose}\n              data-testid=\"employee-cancel-button\"\n            >\n              {t(\"cancel\", language)}\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={employeeMutation.isPending}\n              data-testid=\"employee-save-button\"\n            >\n              {employeeMutation.isPending \n                ? t(\"loading\", language)\n                : employee \n                  ? (language === \"ca\" ? \"Actualitzar\" : \"Actualizar\")\n                  : t(\"create\", language)\n              }\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14803},"client/src/components/modals/QuickAttendanceModal.tsx":{"content":"import { useLanguage } from \"@/hooks/useLanguage\";\nimport { t } from \"@/lib/i18n\";\nimport { \n  Dialog, \n  DialogContent,\n  DialogTitle,\n  DialogDescription \n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock, LogIn, LogOut, Loader2, Timer, CheckCircle, XCircle } from \"lucide-react\";\nimport { type ExpectedTimes, type AttendanceStatus } from \"@/lib/scheduleUtils\";\n\ninterface QuickAttendanceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onCheckIn: () => void;\n  onCheckOut: () => void;\n  currentTime: string;\n  shouldDisableCheckIn?: boolean;\n  shouldDisableCheckOut?: boolean;\n  isLoading?: boolean;\n  expectedTimes?: ExpectedTimes;\n  attendanceStatus?: AttendanceStatus;\n}\n\nexport default function QuickAttendanceModal({ \n  isOpen, \n  onClose, \n  onCheckIn, \n  onCheckOut, \n  currentTime,\n  shouldDisableCheckIn = false,\n  shouldDisableCheckOut = false,\n  isLoading = false,\n  expectedTimes,\n  attendanceStatus\n}: QuickAttendanceModalProps) {\n  const { language } = useLanguage();\n\n  const handleCheckIn = () => {\n    onCheckIn();\n  };\n\n  const handleCheckOut = () => {\n    onCheckOut();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md modal-content-solid\" data-testid=\"quick-attendance-modal\">\n        <DialogTitle className=\"sr-only\">\n          Control d'assistència ràpid\n        </DialogTitle>\n        <DialogDescription className=\"sr-only\">\n          Marca la teva entrada o sortida de manera ràpida\n        </DialogDescription>\n        <div className=\"text-center p-6\">\n          <Clock className=\"h-16 w-16 text-primary mx-auto mb-4\" />\n          <h3 className=\"text-xl font-semibold text-text mb-2\">\n            {t(\"quick_checkin\", language)}\n          </h3>\n          <p className=\"text-3xl font-mono text-primary mb-4\" data-testid=\"modal-current-time\">\n            {currentTime}\n          </p>\n          \n          {/* Expected Times Display */}\n          {expectedTimes?.hasScheduleToday && (\n            <div className=\"mb-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n              <h4 className=\"text-sm font-medium text-blue-900 dark:text-blue-100 mb-3 flex items-center gap-2\">\n                <Timer className=\"h-4 w-4\" />\n                {language === \"ca\" ? \"Horaris previstos\" : \"Horarios previstos\"}\n              </h4>\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"text-center\">\n                  <div className={`text-lg font-bold ${attendanceStatus?.entryColor === 'green' ? 'text-green-600' : attendanceStatus?.entryColor === 'red' ? 'text-red-600' : 'text-gray-600'}`}>\n                    {expectedTimes.expectedEntry || \"--:--\"}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground flex items-center justify-center gap-1\">\n                    {attendanceStatus?.entryColor === 'green' && <CheckCircle className=\"h-3 w-3 text-green-600\" />}\n                    {attendanceStatus?.entryColor === 'red' && <XCircle className=\"h-3 w-3 text-red-600\" />}\n                    {language === \"ca\" ? \"Entrada\" : \"Entrada\"}\n                  </div>\n                </div>\n                <div className=\"text-center\">\n                  <div className={`text-lg font-bold ${attendanceStatus?.exitColor === 'green' ? 'text-green-600' : attendanceStatus?.exitColor === 'red' ? 'text-red-600' : 'text-gray-600'}`}>\n                    {expectedTimes.expectedExit || \"--:--\"}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground flex items-center justify-center gap-1\">\n                    {attendanceStatus?.exitColor === 'green' && <CheckCircle className=\"h-3 w-3 text-green-600\" />}\n                    {attendanceStatus?.exitColor === 'red' && <XCircle className=\"h-3 w-3 text-red-600\" />}\n                    {language === \"ca\" ? \"Sortida\" : \"Salida\"}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <div className=\"space-y-3\">\n            <Button \n              onClick={handleCheckIn}\n              disabled={shouldDisableCheckIn || isLoading}\n              className={`w-full py-3 px-6 text-lg font-medium ${\n                shouldDisableCheckIn || isLoading\n                  ? \"bg-gray-400 text-gray-600 cursor-not-allowed\" \n                  : \"bg-blue-600 hover:bg-blue-700 text-white\"\n              }`}\n              data-testid=\"modal-checkin-button\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                  {language === \"ca\" ? \"Registrant...\" : \"Registrando...\"}\n                </>\n              ) : (\n                <>\n                  <LogIn className=\"mr-2 h-5 w-5\" />\n                  {language === \"ca\" ? \"Fitxar entrada\" : \"Fichar entrada\"}\n                </>\n              )}\n            </Button>\n            <Button \n              onClick={handleCheckOut}\n              disabled={shouldDisableCheckOut || isLoading}\n              className={`w-full py-3 px-6 text-lg font-medium ${\n                shouldDisableCheckOut || isLoading\n                  ? \"bg-gray-400 text-gray-600 cursor-not-allowed\" \n                  : \"bg-green-600 hover:bg-green-700 text-white\"\n              }`}\n              data-testid=\"modal-checkout-button\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                  {language === \"ca\" ? \"Registrant...\" : \"Registrando...\"}\n                </>\n              ) : (\n                <>\n                  <LogOut className=\"mr-2 h-5 w-5 rotate-180\" />\n                  {language === \"ca\" ? \"Fitxar sortida\" : \"Fichar salida\"}\n                </>\n              )}\n            </Button>\n          </div>\n          \n          <Button \n            variant=\"ghost\"\n            onClick={onClose} \n            className=\"mt-4 text-gray-500 hover:text-gray-700 text-sm\"\n            data-testid=\"modal-close-button\"\n          >\n            {t(\"close\", language)}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6291},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/90 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border-2 border-border bg-white dark:bg-gray-950 p-6 shadow-2xl duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4448},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border border-rose-100 dark:border-slate-600 bg-white dark:bg-slate-800/50 text-slate-900 dark:text-slate-100 shadow-sm backdrop-blur-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6 border-b border-rose-50 dark:border-slate-700\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight text-slate-800 dark:text-slate-200\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-slate-600 dark:text-slate-400\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":2043},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border-2 border-border bg-white dark:bg-gray-950 p-1 text-gray-900 dark:text-gray-100 shadow-2xl data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border-2 border-border bg-white dark:bg-gray-950 p-1 text-gray-900 dark:text-gray-100 shadow-2xl animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7510},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-40 bg-black/90 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border-2 border-rose-200 dark:border-slate-600 bg-white dark:bg-slate-900 p-6 shadow-2xl duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-xl\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground hover:bg-gray-100 dark:hover:bg-gray-800\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3921},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/90\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border-2 border-border bg-white dark:bg-gray-950 shadow-2xl\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3060},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border-2 border-border bg-white dark:bg-gray-950 p-1 text-gray-900 dark:text-gray-100 shadow-2xl data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border-2 border-border bg-white dark:bg-gray-950 p-1 text-gray-900 dark:text-gray-100 shadow-2xl data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7691},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border-2 border-border/50 bg-white dark:bg-gray-950 p-4 text-gray-900 dark:text-gray-100 shadow-2xl outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin] ring-1 ring-black/10 dark:ring-white/10\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1335},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border-2 border-border bg-white dark:bg-gray-950 p-4 text-gray-900 dark:text-gray-100 shadow-2xl outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1321},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border-2 border-border bg-white dark:bg-gray-950 text-gray-900 dark:text-gray-100 shadow-2xl data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5783},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/90 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-white dark:bg-gray-950 p-6 shadow-2xl transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500 border-l-2 border-border\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4318},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border-2 border-border/50 bg-gray-900 dark:bg-gray-100 px-3 py-1.5 text-sm text-white dark:text-gray-900 shadow-2xl animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin] ring-1 ring-black/10 dark:ring-white/10\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1293},"client/src/pages/AdminManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, AlertTriangle, FileText, MessageSquare, Shield, Download, Upload, Calendar, Settings } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePermissions } from \"@/hooks/usePermissions\";\n\n// Import individual admin components\nimport StaffManagement from \"@/components/admin/StaffManagement\";\nimport AlertsManagement from \"@/components/admin/AlertsManagement\";\nimport ReportsManagement from \"@/components/admin/ReportsManagement\";\nimport CommunicationsManagement from \"@/components/admin/CommunicationsManagement\";\nimport PrivacyManagement from \"@/components/admin/PrivacyManagement\";\nimport RiskAssessmentDashboard from \"@/components/admin/RiskAssessmentDashboard\";\nimport EmailConfigurationPanel from \"@/components/admin/EmailConfigurationPanel\";\n\n\nexport default function AdminManagement() {\n  const { user } = useAuth();\n  const permissions = usePermissions();\n  const [activeTab, setActiveTab] = useState(\"staff\");\n\n  // Only allow admins and superadmins\n  if (!permissions.canManageUsers) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Card className=\"w-96\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5 text-red-500\" />\n              Accés Restringit\n            </CardTitle>\n            <CardDescription>\n              No tens permisos per accedir a la gestió administrativa.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  // Get admin overview stats\n  const { data: adminStats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/admin/overview', user?.institutionId],\n    enabled: !!user?.institutionId && permissions.canManageUsers,\n  });\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Gestió Administrativa</h1>\n          <p className=\"text-muted-foreground\">\n            Panell de control per a la gestió del centre educatiu\n          </p>\n        </div>\n        \n        {/* Quick Stats Cards */}\n        <div className=\"grid grid-cols-4 gap-4\">\n          {statsLoading ? (\n            <div className=\"animate-pulse bg-gray-200 h-16 w-20 rounded\"></div>\n          ) : (\n            <>\n              <Card className=\"p-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Users className=\"h-4 w-4 text-blue-500\" />\n                  <div className=\"text-sm\">\n                    <p className=\"font-semibold\">{adminStats?.totalEmployees || 0}</p>\n                    <p className=\"text-muted-foreground\">Personal</p>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-3\">\n                <div className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n                  <div className=\"text-sm\">\n                    <p className=\"font-semibold\">{adminStats?.pendingAlerts || 0}</p>\n                    <p className=\"text-muted-foreground\">Alertes</p>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-3\">\n                <div className=\"flex items-center gap-2\">\n                  <MessageSquare className=\"h-4 w-4 text-green-500\" />\n                  <div className=\"text-sm\">\n                    <p className=\"font-semibold\">{adminStats?.totalCommunications || 0}</p>\n                    <p className=\"text-muted-foreground\">Comunicacions</p>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Shield className=\"h-4 w-4 text-purple-500\" />\n                  <div className=\"text-sm\">\n                    <p className=\"font-semibold\">{adminStats?.privacyRequests || 0}</p>\n                    <p className=\"text-muted-foreground\">Sol·licituds GDPR</p>\n                  </div>\n                </div>\n              </Card>\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Main Admin Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-7\">\n          <TabsTrigger value=\"staff\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Personal\n          </TabsTrigger>\n          <TabsTrigger value=\"alerts\" className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            Alertes\n          </TabsTrigger>\n          <TabsTrigger value=\"reports\" className=\"flex items-center gap-2\">\n            <FileText className=\"h-4 w-4\" />\n            Informes\n          </TabsTrigger>\n          <TabsTrigger value=\"communications\" className=\"flex items-center gap-2\">\n            <MessageSquare className=\"h-4 w-4\" />\n            Comunicacions\n          </TabsTrigger>\n          <TabsTrigger value=\"privacy\" className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4\" />\n            Privacitat\n          </TabsTrigger>\n          <TabsTrigger value=\"risk\" className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            Riscos\n          </TabsTrigger>\n          <TabsTrigger value=\"email\" className=\"flex items-center gap-2\">\n            <Settings className=\"h-4 w-4\" />\n            Email\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"staff\" className=\"space-y-4\">\n          <StaffManagement />\n        </TabsContent>\n\n        <TabsContent value=\"alerts\" className=\"space-y-4\">\n          <AlertsManagement />\n        </TabsContent>\n\n        <TabsContent value=\"reports\" className=\"space-y-4\">\n          <ReportsManagement />\n        </TabsContent>\n\n        <TabsContent value=\"communications\" className=\"space-y-4\">\n          <CommunicationsManagement />\n        </TabsContent>\n\n        <TabsContent value=\"privacy\" className=\"space-y-4\">\n          <PrivacyManagement />\n        </TabsContent>\n\n        <TabsContent value=\"risk\" className=\"space-y-4\">\n          <RiskAssessmentDashboard />\n        </TabsContent>\n\n        <TabsContent value=\"email\" className=\"space-y-4\">\n          <EmailConfigurationPanel />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":6814},"client/src/components/admin/EmailConfigurationPanel.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Mail, Settings, FileText, Send, TestTube, Check, AlertTriangle } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst smtpConfigSchema = z.object({\n  host: z.string().min(1, \"Host es requerido\"),\n  port: z.number().min(1).max(65535),\n  username: z.string().min(1, \"Usuario es requerido\"),\n  password: z.string().min(1, \"Contraseña es requerida\"),\n  isSecure: z.boolean(),\n  fromEmail: z.string().email(\"Email inválido\"),\n  fromName: z.string().min(1, \"Nombre es requerido\"),\n  isActive: z.boolean(),\n});\n\nconst emailTemplateSchema = z.object({\n  name: z.string().min(1, \"Nombre es requerido\"),\n  subject: z.string().min(1, \"Asunto es requerido\"),\n  content: z.string().min(1, \"Contenido es requerido\"),\n  templateType: z.enum(['alert', 'notification', 'reminder']),\n  isActive: z.boolean(),\n});\n\ninterface SMTPConfig {\n  id?: string;\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  isSecure: boolean;\n  fromEmail: string;\n  fromName: string;\n  isActive: boolean;\n}\n\ninterface EmailTemplate {\n  id?: string;\n  name: string;\n  subject: string;\n  content: string;\n  templateType: 'alert' | 'notification' | 'reminder';\n  isActive: boolean;\n}\n\nexport default function EmailConfigurationPanel() {\n  const { user } = useAuth();\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [testEmail, setTestEmail] = useState(\"\");\n  const [isTestDialogOpen, setIsTestDialogOpen] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState<EmailTemplate | null>(null);\n  const [isTemplateDialogOpen, setIsTemplateDialogOpen] = useState(false);\n\n  // Fetch SMTP configuration\n  const { data: smtpConfig, isLoading: smtpLoading } = useQuery<SMTPConfig>({\n    queryKey: ['/api/admin/smtp-config', user?.institutionId],\n    enabled: !!user?.institutionId,\n  });\n\n  // SMTP Configuration form\n  const smtpForm = useForm<SMTPConfig>({\n    resolver: zodResolver(smtpConfigSchema),\n    defaultValues: {\n      host: \"\",\n      port: 587,\n      username: \"\",\n      password: \"\",\n      isSecure: true,\n      fromEmail: \"\",\n      fromName: \"\",\n      isActive: true,\n    },\n  });\n\n  // Email Template form\n  const templateForm = useForm<EmailTemplate>({\n    resolver: zodResolver(emailTemplateSchema),\n    defaultValues: {\n      name: \"\",\n      subject: \"\",\n      content: \"\",\n      templateType: \"alert\",\n      isActive: true,\n    },\n  });\n\n  // Fetch email templates\n  const { data: emailTemplates, isLoading: loadingTemplates } = useQuery({\n    queryKey: ['/api/admin/email-templates', user?.institutionId],\n    enabled: !!user?.institutionId,\n  });\n\n  // Save SMTP configuration mutation\n  const saveSMTPMutation = useMutation({\n    mutationFn: async (data: SMTPConfig) => {\n      return await apiRequest(\"POST\", \"/api/admin/smtp-config\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Configuració guardada\" : \"Configuración guardada\",\n        description: language === \"ca\" ? \"La configuració SMTP s'ha guardat correctament\" : \"La configuración SMTP se ha guardado correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/smtp-config', user?.institutionId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || (language === \"ca\" ? \"Error guardant la configuració\" : \"Error guardando la configuración\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Save email template mutation\n  const saveTemplateMutation = useMutation({\n    mutationFn: async (data: EmailTemplate) => {\n      const endpoint = selectedTemplate \n        ? `/api/admin/email-templates/${selectedTemplate.id}`\n        : \"/api/admin/email-templates\";\n      const method = selectedTemplate ? \"PUT\" : \"POST\";\n      return await apiRequest(method, endpoint, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Plantilla guardada\" : \"Plantilla guardada\",\n        description: language === \"ca\" ? \"La plantilla s'ha guardat correctament\" : \"La plantilla se ha guardado correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/email-templates', user?.institutionId] });\n      setIsTemplateDialogOpen(false);\n      setSelectedTemplate(null);\n      templateForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || (language === \"ca\" ? \"Error guardant la plantilla\" : \"Error guardando la plantilla\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Effect to update form when SMTP config is loaded\n  React.useEffect(() => {\n    if (smtpConfig && !smtpLoading) {\n      smtpForm.reset({\n        host: smtpConfig.host || \"\",\n        port: smtpConfig.port || 587,\n        username: smtpConfig.username || \"\",\n        password: \"\", // Don't populate password for security\n        isSecure: smtpConfig.isSecure ?? true,\n        fromEmail: smtpConfig.fromEmail || \"\",\n        fromName: smtpConfig.fromName || \"\",\n        isActive: smtpConfig.isActive ?? true,\n      });\n    }\n  }, [smtpConfig, smtpLoading, smtpForm]);\n\n  // Test email mutation\n  const testEmailMutation = useMutation({\n    mutationFn: async (email: string) => {\n      return await apiRequest(\"POST\", \"/api/admin/test-email\", { email });\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Email de prova enviat\" : \"Email de prueba enviado\",\n        description: language === \"ca\" ? \"Revisa la teva bústia d'entrada\" : \"Revisa tu bandeja de entrada\",\n      });\n      setIsTestDialogOpen(false);\n      setTestEmail(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || (language === \"ca\" ? \"Error enviant email de prova\" : \"Error enviando email de prueba\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSaveSMTP = (data: SMTPConfig) => {\n    // If password is empty and we have existing config, keep the existing password\n    const submitData = {\n      ...data,\n      password: data.password || (smtpConfig?.password ? \"***KEEP_EXISTING***\" : \"\")\n    };\n    saveSMTPMutation.mutate(submitData);\n  };\n\n  const onSaveTemplate = (data: EmailTemplate) => {\n    saveTemplateMutation.mutate(data);\n  };\n\n  const handleEditTemplate = (template: EmailTemplate) => {\n    setSelectedTemplate(template);\n    templateForm.reset(template);\n    setIsTemplateDialogOpen(true);\n  };\n\n  const getTemplateTypeText = (type: string) => {\n    const types = {\n      ca: { alert: 'Alerta', notification: 'Notificació', reminder: 'Recordatori' },\n      es: { alert: 'Alerta', notification: 'Notificación', reminder: 'Recordatorio' }\n    };\n    return types[language as 'ca' | 'es']?.[type as keyof typeof types.ca] || type;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">\n            {language === \"ca\" ? \"Configuració d'Email\" : \"Configuración de Email\"}\n          </h2>\n          <p className=\"text-muted-foreground\">\n            {language === \"ca\" \n              ? \"Gestiona la configuració SMTP i plantilles d'email del sistema\" \n              : \"Gestiona la configuración SMTP y plantillas de email del sistema\"}\n          </p>\n        </div>\n        <Dialog open={isTestDialogOpen} onOpenChange={setIsTestDialogOpen}>\n          <DialogTrigger asChild>\n            <Button variant=\"outline\">\n              <TestTube className=\"h-4 w-4 mr-2\" />\n              {language === \"ca\" ? \"Provar Email\" : \"Probar Email\"}\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"modal-content-solid\">\n            <DialogHeader>\n              <DialogTitle>\n                {language === \"ca\" ? \"Enviar Email de Prova\" : \"Enviar Email de Prueba\"}\n              </DialogTitle>\n              <DialogDescription>\n                {language === \"ca\" \n                  ? \"Envia un email de prova per verificar la configuració SMTP\" \n                  : \"Envía un email de prueba para verificar la configuración SMTP\"}\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <Input\n                placeholder={language === \"ca\" ? \"Adreça de correu\" : \"Dirección de correo\"}\n                value={testEmail}\n                onChange={(e) => setTestEmail(e.target.value)}\n                type=\"email\"\n              />\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setIsTestDialogOpen(false)}>\n                  {language === \"ca\" ? \"Cancel·lar\" : \"Cancelar\"}\n                </Button>\n                <Button \n                  onClick={() => testEmailMutation.mutate(testEmail)}\n                  disabled={testEmailMutation.isPending || !testEmail}\n                >\n                  {testEmailMutation.isPending ? (\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\" />\n                  ) : (\n                    <Send className=\"h-4 w-4 mr-2\" />\n                  )}\n                  {language === \"ca\" ? \"Enviar\" : \"Enviar\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Tabs defaultValue=\"smtp\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"smtp\">\n            <Settings className=\"h-4 w-4 mr-2\" />\n            {language === \"ca\" ? \"Configuració SMTP\" : \"Configuración SMTP\"}\n          </TabsTrigger>\n          <TabsTrigger value=\"templates\">\n            <FileText className=\"h-4 w-4 mr-2\" />\n            {language === \"ca\" ? \"Plantilles\" : \"Plantillas\"}\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"smtp\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Mail className=\"h-5 w-5\" />\n                {language === \"ca\" ? \"Configuració del Servidor SMTP\" : \"Configuración del Servidor SMTP\"}\n              </CardTitle>\n              <CardDescription className=\"space-y-2\">\n                <p>\n                  {language === \"ca\" \n                    ? \"Configura el servidor d'email per enviar notificacions automàtiques\" \n                    : \"Configura el servidor de email para enviar notificaciones automáticas\"}\n                </p>\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg border border-blue-200 dark:border-blue-800\">\n                  <p className=\"text-sm text-blue-800 dark:text-blue-200 font-medium\">\n                    📧 {language === \"ca\" ? \"Per Gmail:\" : \"Para Gmail:\"}\n                  </p>\n                  <ul className=\"text-xs text-blue-700 dark:text-blue-300 mt-1 space-y-1\">\n                    <li>• {language === \"ca\" ? \"Activa l'autenticació de dos factors al teu compte Gmail\" : \"Activa la autenticación de dos factores en tu cuenta Gmail\"}</li>\n                    <li>• {language === \"ca\" ? \"Genera una contrasenya d'aplicació a \" : \"Genera una contraseña de aplicación en \"}<a href=\"https://myaccount.google.com/apppasswords\" target=\"_blank\" className=\"underline\">myaccount.google.com/apppasswords</a></li>\n                    <li>• {language === \"ca\" ? \"Utilitza aquesta contrasenya d'aplicació, no la contrasenya normal\" : \"Utiliza esta contraseña de aplicación, no la contraseña normal\"}</li>\n                  </ul>\n                </div>\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...smtpForm}>\n                <form onSubmit={smtpForm.handleSubmit(onSaveSMTP)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={smtpForm.control}\n                      name=\"host\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Host SMTP</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"smtp.gmail.com\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={smtpForm.control}\n                      name=\"port\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Port</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"587\" \n                              {...field} \n                              onChange={(e) => field.onChange(parseInt(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={smtpForm.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>\n                            {language === \"ca\" ? \"Usuari\" : \"Usuario\"}\n                          </FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"admin@centre.edu\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={smtpForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>\n                            {language === \"ca\" ? \"Contrasenya\" : \"Contraseña\"}\n                          </FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"password\" \n                              placeholder={\n                                smtpConfig \n                                  ? (language === \"ca\" ? \"Deixa buit per mantenir l'actual\" : \"Dejar vacío para mantener actual\")\n                                  : (language === \"ca\" ? \"Per Gmail: Contrasenya d'aplicació\" : \"Para Gmail: Contraseña de aplicación\")\n                              } \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={smtpForm.control}\n                      name=\"fromEmail\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email remitent</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"noreply@centre.edu\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={smtpForm.control}\n                      name=\"fromName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Nom remitent</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Sistema EduPresència\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"flex items-center gap-4\">\n                    <FormField\n                      control={smtpForm.control}\n                      name=\"isSecure\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex items-center gap-2\">\n                          <FormControl>\n                            <Switch checked={field.value} onCheckedChange={field.onChange} />\n                          </FormControl>\n                          <FormLabel>\n                            {language === \"ca\" ? \"Connexió segura (recomanat per Gmail)\" : \"Conexión segura (recomendado para Gmail)\"}\n                          </FormLabel>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={smtpForm.control}\n                      name=\"isActive\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex items-center gap-2\">\n                          <FormControl>\n                            <Switch checked={field.value} onCheckedChange={field.onChange} />\n                          </FormControl>\n                          <FormLabel>\n                            {language === \"ca\" ? \"Configuració activa\" : \"Configuración activa\"}\n                          </FormLabel>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <Button type=\"submit\" disabled={saveSMTPMutation.isPending}>\n                    {saveSMTPMutation.isPending ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                    ) : (\n                      <Check className=\"h-4 w-4 mr-2\" />\n                    )}\n                    {language === \"ca\" ? \"Guardar Configuració\" : \"Guardar Configuración\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"templates\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <FileText className=\"h-5 w-5\" />\n                  {language === \"ca\" ? \"Plantilles d'Email\" : \"Plantillas de Email\"}\n                </div>\n                <Dialog open={isTemplateDialogOpen} onOpenChange={setIsTemplateDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button onClick={() => { setSelectedTemplate(null); templateForm.reset(); }}>\n                      {language === \"ca\" ? \"Nova Plantilla\" : \"Nueva Plantilla\"}\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle>\n                        {selectedTemplate \n                          ? (language === \"ca\" ? \"Editar Plantilla\" : \"Editar Plantilla\")\n                          : (language === \"ca\" ? \"Nova Plantilla\" : \"Nueva Plantilla\")\n                        }\n                      </DialogTitle>\n                    </DialogHeader>\n                    <Form {...templateForm}>\n                      <form onSubmit={templateForm.handleSubmit(onSaveTemplate)} className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={templateForm.control}\n                            name=\"name\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Nom</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Nom de la plantilla\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={templateForm.control}\n                            name=\"templateType\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Tipus</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"alert\">\n                                      {getTemplateTypeText(\"alert\")}\n                                    </SelectItem>\n                                    <SelectItem value=\"notification\">\n                                      {getTemplateTypeText(\"notification\")}\n                                    </SelectItem>\n                                    <SelectItem value=\"reminder\">\n                                      {getTemplateTypeText(\"reminder\")}\n                                    </SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={templateForm.control}\n                          name=\"subject\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Assumpte</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Assumpte de l'email\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={templateForm.control}\n                          name=\"content\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Contingut</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Contingut de l'email...\" \n                                  rows={8} \n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormDescription>\n                                {language === \"ca\" \n                                  ? \"Pots usar {{name}}, {{email}}, {{date}} com a variables\" \n                                  : \"Puedes usar {{name}}, {{email}}, {{date}} como variables\"}\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={templateForm.control}\n                          name=\"isActive\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex items-center gap-2\">\n                              <FormControl>\n                                <Switch checked={field.value} onCheckedChange={field.onChange} />\n                              </FormControl>\n                              <FormLabel>\n                                {language === \"ca\" ? \"Plantilla activa\" : \"Plantilla activa\"}\n                              </FormLabel>\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"flex justify-end gap-2\">\n                          <Button variant=\"outline\" onClick={() => setIsTemplateDialogOpen(false)}>\n                            {language === \"ca\" ? \"Cancel·lar\" : \"Cancelar\"}\n                          </Button>\n                          <Button type=\"submit\" disabled={saveTemplateMutation.isPending}>\n                            {saveTemplateMutation.isPending ? (\n                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                            ) : (\n                              <Check className=\"h-4 w-4 mr-2\" />\n                            )}\n                            {language === \"ca\" ? \"Guardar\" : \"Guardar\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {Array.isArray(emailTemplates) && emailTemplates.map((template: EmailTemplate) => (\n                  <div key={template.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <h3 className=\"font-medium\">{template.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{template.subject}</p>\n                      <div className=\"flex items-center gap-2 mt-2\">\n                        <Badge variant={template.isActive ? \"default\" : \"secondary\"}>\n                          {getTemplateTypeText(template.templateType)}\n                        </Badge>\n                        <Badge variant={template.isActive ? \"default\" : \"secondary\"}>\n                          {template.isActive \n                            ? (language === \"ca\" ? \"Activa\" : \"Activa\")\n                            : (language === \"ca\" ? \"Inactiva\" : \"Inactiva\")\n                          }\n                        </Badge>\n                      </div>\n                    </div>\n                    <Button variant=\"outline\" onClick={() => handleEditTemplate(template)}>\n                      {language === \"ca\" ? \"Editar\" : \"Editar\"}\n                    </Button>\n                  </div>\n                ))}\n                \n                {Array.isArray(emailTemplates) && emailTemplates.length === 0 && (\n                  <Alert>\n                    <AlertTriangle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      {language === \"ca\" \n                        ? \"No hi ha plantilles configurades. Crea la primera plantilla per començar.\" \n                        : \"No hay plantillas configuradas. Crea la primera plantilla para comenzar.\"}\n                    </AlertDescription>\n                  </Alert>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":28494},"client/src/components/admin/RiskAssessmentDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertTriangle, Send, User, Clock, Calendar } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface RiskAssessment {\n  id: string;\n  employeeId: string;\n  employeeName: string;\n  employeeEmail: string;\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n  delayMinutes: number;\n  absenceDays: number;\n  lastCalculated: string;\n  notes?: string;\n}\n\nexport default function RiskAssessmentDashboard() {\n  const { user } = useAuth();\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedEmployee, setSelectedEmployee] = useState<RiskAssessment | null>(null);\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\n  const [isNotificationOpen, setIsNotificationOpen] = useState(false);\n\n  // Fetch risk assessments\n  const { data: riskAssessments, isLoading } = useQuery({\n    queryKey: [`/api/admin/risk-assessments/${user?.institutionId}`],\n    enabled: !!user?.institutionId,\n  });\n\n  // Send manual notification mutation\n  const sendNotificationMutation = useMutation({\n    mutationFn: async (data: { employeeId: string; message: string }) => {\n      return await apiRequest(\"POST\", \"/api/admin/send-notification\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Notificació enviada\" : \"Notificación enviada\",\n        description: language === \"ca\" ? \"La notificació s'ha enviat correctament\" : \"La notificación se ha enviado correctamente\",\n      });\n      setIsNotificationOpen(false);\n      setNotificationMessage(\"\");\n      setSelectedEmployee(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || (language === \"ca\" ? \"Error enviant la notificació\" : \"Error enviando la notificación\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getRiskLevelColor = (level: string) => {\n    switch (level) {\n      case 'low': return 'bg-green-100 text-green-800 border-green-200';\n      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'critical': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getRiskLevelText = (level: string) => {\n    const texts = {\n      ca: { low: 'Baix', medium: 'Mitjà', high: 'Alt', critical: 'Crític' },\n      es: { low: 'Bajo', medium: 'Medio', high: 'Alto', critical: 'Crítico' }\n    };\n    return texts[language as 'ca' | 'es'][level as keyof typeof texts.ca] || level;\n  };\n\n  const getEmpatheticTemplate = (level: string) => {\n    const templates = {\n      ca: {\n        medium: `Hola {{name}},\\n\\nHem notat que últimament has tingut alguns retards o absències. Volem recordar-te la importància de la puntualitat per al bon funcionament del centre.\\n\\nSi tens alguna dificultat o necessites suport, no dubtis a contactar amb nosaltres. Estem aquí per ajudar-te.\\n\\nGràcies per la teva comprensió.`,\n        high: `Estimat/da {{name}},\\n\\nEns hem adonat que els teus registres d'assistència mostren algunes irregularitats que ens preocupen. Volem treballar amb tu per trobar una solució.\\n\\nT'agraïríem que ens expliquis si hi ha alguna circumstància que estigui afectant la teva assistència. El nostre objectiu és donar-te el suport que necessitis.\\n\\nEsperem la teva resposta per poder ajudar-te.`,\n        critical: `{{name}},\\n\\nLes dades d'assistència mostren una situació que requereix la nostra atenció immediata. És important que ens reunim per parlar sobre aquesta qüestió.\\n\\nContacta amb direcció el més aviat possible per concertar una reunió. Volem entendre la situació i trobar la millor manera d'avançar junts.\\n\\nGràcies per la teva col·laboració.`\n      },\n      es: {\n        medium: `Hola {{name}},\\n\\nHemos notado que últimamente has tenido algunos retrasos o ausencias. Queremos recordarte la importancia de la puntualidad para el buen funcionamiento del centro.\\n\\nSi tienes alguna dificultad o necesitas apoyo, no dudes en contactar con nosotros. Estamos aquí para ayudarte.\\n\\nGracias por tu comprensión.`,\n        high: `Estimado/a {{name}},\\n\\nNos hemos dado cuenta de que tus registros de asistencia muestran algunas irregularidades que nos preocupan. Queremos trabajar contigo para encontrar una solución.\\n\\nTe agradeceríamos que nos expliques si hay alguna circunstancia que esté afectando tu asistencia. Nuestro objetivo es darte el apoyo que necesites.\\n\\nEsperamos tu respuesta para poder ayudarte.`,\n        critical: `{{name}},\\n\\nLos datos de asistencia muestran una situación que requiere nuestra atención inmediata. Es importante que nos reunamos para hablar sobre esta cuestión.\\n\\nContacta con dirección lo antes posible para concertar una reunión. Queremos entender la situación y encontrar la mejor manera de avanzar juntos.\\n\\nGracias por tu colaboración.`\n      }\n    };\n    \n    const template = templates[language as 'ca' | 'es'][level as keyof typeof templates.ca];\n    return template || '';\n  };\n\n  const handleSendNotification = () => {\n    if (!selectedEmployee || !notificationMessage.trim()) return;\n    \n    sendNotificationMutation.mutate({\n      employeeId: selectedEmployee.employeeId,\n      message: notificationMessage\n    });\n  };\n\n  const handleUseTemplate = (employee: RiskAssessment) => {\n    const template = getEmpatheticTemplate(employee.riskLevel);\n    const personalizedMessage = template.replace(/\\{\\{name\\}\\}/g, employee.employeeName.split(' ')[0]);\n    setNotificationMessage(personalizedMessage);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">\n            {language === \"ca\" ? \"Avaluació de Riscos\" : \"Evaluación de Riesgos\"}\n          </h2>\n          <p className=\"text-muted-foreground\">\n            {language === \"ca\" \n              ? \"Monitoratge proactiu del personal amb nivells de risc d'assistència\" \n              : \"Monitoreo proactivo del personal con niveles de riesgo de asistencia\"}\n          </p>\n        </div>\n      </div>\n\n      {/* Risk Level Summary */}\n      <div className=\"grid grid-cols-4 gap-4\">\n        {['low', 'medium', 'high', 'critical'].map(level => {\n          const count = Array.isArray(riskAssessments) ? riskAssessments.filter((r: RiskAssessment) => r.riskLevel === level).length : 0;\n          return (\n            <Card key={level}>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <Badge className={getRiskLevelColor(level)}>\n                    {getRiskLevelText(level)}\n                  </Badge>\n                  <span className=\"text-2xl font-bold\">{count}</span>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Risk Assessment List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            {language === \"ca\" ? \"Personal per Nivell de Risc\" : \"Personal por Nivel de Riesgo\"}\n          </CardTitle>\n          <CardDescription>\n            {language === \"ca\" \n              ? \"Llista ordenada per nivell de risc d'assistència\" \n              : \"Lista ordenada por nivel de riesgo de asistencia\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {Array.isArray(riskAssessments) && riskAssessments.map((assessment: RiskAssessment) => (\n              <div key={assessment.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div className=\"flex items-center gap-4\">\n                  <Badge className={getRiskLevelColor(assessment.riskLevel)}>\n                    {getRiskLevelText(assessment.riskLevel)}\n                  </Badge>\n                  <div>\n                    <h3 className=\"font-medium\">{assessment.employeeName}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{assessment.employeeEmail}</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-right text-sm\">\n                    <div className=\"flex items-center gap-1 text-orange-600\">\n                      <Clock className=\"h-4 w-4\" />\n                      {assessment.delayMinutes} min {language === \"ca\" ? \"retard\" : \"retraso\"}\n                    </div>\n                    <div className=\"flex items-center gap-1 text-red-600\">\n                      <Calendar className=\"h-4 w-4\" />\n                      {assessment.absenceDays} {language === \"ca\" ? \"dies absència\" : \"días ausencia\"}\n                    </div>\n                  </div>\n                  \n                  <Dialog open={isNotificationOpen && selectedEmployee?.id === assessment.id} \n                          onOpenChange={(open) => {\n                            setIsNotificationOpen(open);\n                            if (open) {\n                              setSelectedEmployee(assessment);\n                              handleUseTemplate(assessment);\n                            } else {\n                              setSelectedEmployee(null);\n                              setNotificationMessage(\"\");\n                            }\n                          }}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Send className=\"h-4 w-4 mr-2\" />\n                        {language === \"ca\" ? \"Notificar\" : \"Notificar\"}\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-md\">\n                      <DialogHeader>\n                        <DialogTitle>\n                          {language === \"ca\" ? \"Enviar Notificació\" : \"Enviar Notificación\"}\n                        </DialogTitle>\n                        <DialogDescription>\n                          {language === \"ca\" \n                            ? `Enviant notificació a ${assessment.employeeName}` \n                            : `Enviando notificación a ${assessment.employeeName}`}\n                        </DialogDescription>\n                      </DialogHeader>\n                      \n                      <div className=\"space-y-4\">\n                        <Alert>\n                          <AlertTriangle className=\"h-4 w-4\" />\n                          <AlertDescription>\n                            {language === \"ca\" \n                              ? \"Plantilla empàtica precarregada basada en el nivell de risc\" \n                              : \"Plantilla empática precargada basada en el nivel de riesgo\"}\n                          </AlertDescription>\n                        </Alert>\n                        \n                        <Textarea\n                          placeholder={language === \"ca\" ? \"Missatge personalitzat...\" : \"Mensaje personalizado...\"}\n                          value={notificationMessage}\n                          onChange={(e) => setNotificationMessage(e.target.value)}\n                          rows={8}\n                        />\n                        \n                        <div className=\"flex justify-end gap-2\">\n                          <Button variant=\"outline\" onClick={() => setIsNotificationOpen(false)}>\n                            {language === \"ca\" ? \"Cancel·lar\" : \"Cancelar\"}\n                          </Button>\n                          <Button \n                            onClick={handleSendNotification}\n                            disabled={sendNotificationMutation.isPending || !notificationMessage.trim()}\n                          >\n                            {sendNotificationMutation.isPending ? (\n                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\" />\n                            ) : (\n                              <Send className=\"h-4 w-4 mr-2\" />\n                            )}\n                            {language === \"ca\" ? \"Enviar\" : \"Enviar\"}\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13473},"client/src/components/admin/AlertsManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  AlertTriangle, \n  Plus, \n  Search, \n  Edit, \n  Send,\n  Clock,\n  Filter \n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Alert {\n  id: string;\n  type: string;\n  subject: string;\n  content: string;\n  employeeId: string;\n  employeeName: string;\n  sentAt: string;\n  emailSent: boolean;\n  delayMinutes?: number;\n  accumulatedMinutes?: number;\n}\n\ninterface Employee {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n}\n\nexport function AlertsManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [dateFilter, setDateFilter] = useState(\"all\");\n  const [userFilter, setUserFilter] = useState(\"all\");\n  const [newAlertDialogOpen, setNewAlertDialogOpen] = useState(false);\n\n\n  // Fetch alerts history\n  const { data: alerts = [], isLoading: alertsLoading } = useQuery({\n    queryKey: ['/api/admin/alerts', user?.institutionId],\n    enabled: !!user?.institutionId,\n  });\n\n\n\n  // Fetch employees for recipient selection\n  const { data: employees = [] } = useQuery({\n    queryKey: ['/api/admin/employees', user?.institutionId],\n    enabled: !!user?.institutionId,\n  });\n\n  // Enhanced filtered alerts with multiple filters\n  const filteredAlerts = (alerts as Alert[]).filter((alert: Alert) => {\n    const matchesSearch = \n      alert.subject.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      alert.employeeName.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesType = typeFilter === \"all\" || alert.type === typeFilter;\n    \n    const matchesStatus = statusFilter === \"all\" || \n      (statusFilter === \"sent\" && alert.emailSent) ||\n      (statusFilter === \"pending\" && !alert.emailSent);\n    \n    const matchesUser = userFilter === \"all\" || alert.employeeId === userFilter;\n    \n    const matchesDate = dateFilter === \"all\" || (() => {\n      const alertDate = new Date(alert.sentAt);\n      const today = new Date();\n      const yesterday = new Date(today);\n      yesterday.setDate(yesterday.getDate() - 1);\n      const lastWeek = new Date(today);\n      lastWeek.setDate(lastWeek.getDate() - 7);\n      \n      switch (dateFilter) {\n        case \"today\":\n          return alertDate.toDateString() === today.toDateString();\n        case \"yesterday\":\n          return alertDate.toDateString() === yesterday.toDateString();\n        case \"week\":\n          return alertDate >= lastWeek;\n        default:\n          return true;\n      }\n    })();\n    \n    return matchesSearch && matchesType && matchesStatus && matchesUser && matchesDate;\n  });\n\n  // Send manual alert mutation\n  const sendAlertMutation = useMutation({\n    mutationFn: async (data: {\n      recipients: string[];\n      subject: string;\n      message: string;\n      type: string;\n    }) => {\n      return fetch('/api/admin/alerts/send-custom', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...data,\n          institutionId: user?.institutionId,\n        }),\n      }).then(res => res.json());\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Alerta enviada\",\n        description: \"L'alerta s'ha enviat correctament.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/alerts'] });\n      setNewAlertDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error enviant alerta\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getAlertTypeColor = (type: string) => {\n    switch (type) {\n      case 'delay_alert': return 'bg-orange-100 text-orange-800';\n      case 'accumulated_delay': return 'bg-red-100 text-red-800';\n      case 'manual_notification': return 'bg-blue-100 text-blue-800';\n      case 'scheduled': return 'bg-purple-100 text-purple-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getAlertTypeName = (type: string) => {\n    switch (type) {\n      case 'delay_alert': return 'Retard Puntual';\n      case 'accumulated_delay': return 'Retard Acumulat';\n      case 'manual_notification': return 'Notificació Manual';\n      case 'scheduled': return 'Programada';\n      default: return type;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Gestió d'Alertes</h2>\n          <p className=\"text-muted-foreground\">\n            Administra i configura les alertes del sistema\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button size=\"sm\" onClick={() => setNewAlertDialogOpen(true)}>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Nova Alerta\n          </Button>\n          \n          <Dialog open={newAlertDialogOpen} onOpenChange={setNewAlertDialogOpen}>\n            <DialogContent className=\"max-w-2xl modal-content-solid\">\n              <DialogHeader>\n                <DialogTitle>Enviar Nova Alerta</DialogTitle>\n                <DialogDescription>Envia una alerta manual als usuaris seleccionats</DialogDescription>\n              </DialogHeader>\n              <form onSubmit={(e) => {\n                e.preventDefault();\n                const formData = new FormData(e.currentTarget);\n                sendAlertMutation.mutate({\n                  recipients: [formData.get('recipient') as string],\n                  subject: formData.get('subject') as string,\n                  message: formData.get('message') as string,\n                  type: 'manual_notification',\n                });\n              }}>\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Destinatari *</label>\n                    <Select name=\"recipient\" required>\n                      <SelectTrigger className=\"select-content-solid\">\n                        <SelectValue placeholder=\"Selecciona un empleat\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"select-content-solid\">\n                        {(employees as Employee[]).map((employee: Employee) => (\n                          <SelectItem key={employee.id} value={employee.id}>\n                            {employee.firstName} {employee.lastName} - {employee.email}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Assumpte *</label>\n                    <Input \n                      name=\"subject\"\n                      placeholder=\"Introdueix l'assumpte de l'alerta...\"\n                      required \n                      className=\"select-content-solid\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Missatge *</label>\n                    <Textarea \n                      name=\"message\"\n                      placeholder=\"Escriu el missatge de l'alerta...\"\n                      required \n                      rows={4}\n                      className=\"select-content-solid\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex justify-end space-x-2 pt-4\">\n                    <Button variant=\"outline\" onClick={() => setNewAlertDialogOpen(false)}>\n                      Cancel·lar\n                    </Button>\n                    <Button type=\"submit\" disabled={sendAlertMutation.isPending}>\n                      <Send className=\"h-4 w-4 mr-2\" />\n                      {sendAlertMutation.isPending ? \"Enviant...\" : \"Enviar Alerta\"}\n                    </Button>\n                  </div>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Cercar per assumpte o empleat...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n              />\n            </div>\n            \n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filtrar per tipus\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tots els tipus</SelectItem>\n                <SelectItem value=\"delay_alert\">Retard Puntual</SelectItem>\n                <SelectItem value=\"accumulated_delay\">Retard Acumulat</SelectItem>\n                <SelectItem value=\"manual_notification\">Manual</SelectItem>\n                <SelectItem value=\"scheduled\">Programada</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Alerts Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-5 w-5\" />\n            Historial d'Alertes ({filteredAlerts.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {alertsLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Tipus</TableHead>\n                  <TableHead>Assumpte</TableHead>\n                  <TableHead>Empleat</TableHead>\n                  <TableHead>Data Enviament</TableHead>\n                  <TableHead>Estat Email</TableHead>\n                  <TableHead>Detalls</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredAlerts.map((alert: Alert) => (\n                  <TableRow key={alert.id}>\n                    <TableCell>\n                      <Badge className={getAlertTypeColor(alert.type)}>\n                        {getAlertTypeName(alert.type)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">{alert.subject}</TableCell>\n                    <TableCell>{alert.employeeName}</TableCell>\n                    <TableCell>\n                      {new Date(alert.sentAt).toLocaleString('ca-ES')}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={alert.emailSent ? \"default\" : \"destructive\"}>\n                        {alert.emailSent ? \"Enviat\" : \"Pendent\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {alert.delayMinutes && (\n                        <span className=\"text-sm text-orange-600\">\n                          +{alert.delayMinutes}min\n                        </span>\n                      )}\n                      {alert.accumulatedMinutes && (\n                        <span className=\"text-sm text-red-600\">\n                          Total: {alert.accumulatedMinutes}min\n                        </span>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))}\n                \n                {filteredAlerts.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center text-muted-foreground py-8\">\n                      No s'han trobat alertes amb els filtres aplicats\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default AlertsManagement;","size_bytes":13242},"client/src/components/admin/CommunicationsManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  MessageSquare, \n  Plus, \n  Search, \n  Edit, \n  Send,\n  Shield,\n  Eye\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { t } from \"@/lib/i18n\";\n\ninterface Communication {\n  id: string;\n  senderId: string;\n  senderName: string;\n  recipientId: string;\n  recipientName: string;\n  messageType: string;\n  subject: string;\n  message: string;\n  status: string;\n  priority: string;\n  createdAt: string;\n  readAt?: string;\n  emailSent: boolean;\n}\n\nexport function CommunicationsManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { language } = useLanguage();\n  const queryClient = useQueryClient();\n  \n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [newCommDialogOpen, setNewCommDialogOpen] = useState(false);\n\n  // Fetch all communications for the institution\n  const { data: communications = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/communications', user?.institutionId],\n    enabled: !!user?.institutionId,\n  });\n\n  // Fetch employees for recipient selection\n  const { data: employees = [] } = useQuery({\n    queryKey: ['/api/admin/employees', user?.institutionId],\n    enabled: !!user?.institutionId,\n  });\n\n  // Filter communications\n  const filteredCommunications = (communications as Communication[]).filter((comm: Communication) => {\n    const matchesSearch = \n      comm.subject.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      comm.senderName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      comm.recipientName.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesType = typeFilter === \"all\" || comm.messageType === typeFilter;\n    const matchesStatus = statusFilter === \"all\" || comm.status === statusFilter;\n    \n    return matchesSearch && matchesType && matchesStatus;\n  });\n\n  // Send new communication mutation\n  const sendCommMutation = useMutation({\n    mutationFn: async (data: {\n      recipientId: string;\n      messageType: string;\n      subject: string;\n      message: string;\n      priority: string;\n    }) => {\n      return await apiRequest('POST', '/api/communications', {\n        ...data,\n        emailSent: true\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Comunicació enviada\",\n        description: \"La comunicació s'ha enviat correctament.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/communications'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/communications'] });\n      setNewCommDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error enviant comunicació\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'alert': return 'bg-red-100 text-red-800';\n      case 'notification': return 'bg-blue-100 text-blue-800';\n      case 'communication': return 'bg-green-100 text-green-800';\n      case 'announcement': return 'bg-purple-100 text-purple-800';\n      case 'privacy_policy': return 'bg-orange-100 text-orange-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTypeName = (type: string) => {\n    switch (type) {\n      case 'alert': return 'Alerta';\n      case 'notification': return 'Notificació';\n      case 'communication': return 'Comunicació';\n      case 'announcement': return 'Comunicat';\n      case 'privacy_policy': return 'Política Privacitat';\n      default: return type;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'sent': return 'bg-green-100 text-green-800';\n      case 'delivered': return 'bg-blue-100 text-blue-800';\n      case 'read': return 'bg-purple-100 text-purple-800';\n      case 'draft': return 'bg-gray-100 text-gray-800';\n      case 'failed': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const canEditCommunication = (comm: Communication) => {\n    // Only sender can edit their own communications\n    return comm.senderId === user?.id && comm.status === 'draft';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Gestió de Comunicacions</h2>\n          <p className=\"text-muted-foreground\">\n            Administra totes les comunicacions del centre educatiu\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Dialog open={newCommDialogOpen} onOpenChange={setNewCommDialogOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Nova Comunicació\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl modal-content-solid\">\n              <DialogHeader>\n                <DialogTitle>Enviar Nova Comunicació</DialogTitle>\n                <DialogDescription>\n                  Crea i envia una nova comunicació als usuaris del centre\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={(e) => {\n                e.preventDefault();\n                const formData = new FormData(e.currentTarget);\n                sendCommMutation.mutate({\n                  recipientId: formData.get('recipient') as string,\n                  messageType: formData.get('messageType') as string,\n                  subject: formData.get('subject') as string,\n                  message: formData.get('message') as string,\n                  priority: formData.get('priority') as string,\n                });\n              }}>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium\">Destinatari</label>\n                      <Select name=\"recipient\" required>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecciona un usuari\" />\n                        </SelectTrigger>\n                        <SelectContent className=\"select-content-solid\">\n                          {(employees as any[]).map((employee: any) => (\n                            <SelectItem key={employee.id} value={employee.id}>\n                              {employee.firstName} {employee.lastName}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <label className=\"text-sm font-medium\">Tipus</label>\n                      <Select name=\"messageType\" required>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Tipus de missatge\" />\n                        </SelectTrigger>\n                        <SelectContent className=\"select-content-solid\">\n                          <SelectItem value=\"communication\">Comunicació</SelectItem>\n                          <SelectItem value=\"notification\">Notificació</SelectItem>\n                          <SelectItem value=\"announcement\">Comunicat</SelectItem>\n                          <SelectItem value=\"privacy_policy\">\n                            <div className=\"flex items-center gap-2\">\n                              <Shield className=\"h-4 w-4\" />\n                              Política de Privacitat\n                            </div>\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"text-sm font-medium\">Prioritat</label>\n                    <Select name=\"priority\" required defaultValue=\"normal\">\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"select-content-solid\">\n                        <SelectItem value=\"low\">{t(\"low\", language)}</SelectItem>\n                        <SelectItem value=\"normal\">{t(\"normal\", language)}</SelectItem>\n                        <SelectItem value=\"high\">{t(\"high\", language)}</SelectItem>\n                        <SelectItem value=\"urgent\">{t(\"urgent\", language)}</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <label className=\"text-sm font-medium\">Assumpte</label>\n                    <Input name=\"subject\" required placeholder=\"Assumpte de la comunicació\" />\n                  </div>\n                  \n                  <div>\n                    <label className=\"text-sm font-medium\">Missatge</label>\n                    <Textarea name=\"message\" required placeholder=\"Contingut del missatge\" rows={6} />\n                  </div>\n                  \n                  <div className=\"flex justify-end gap-2\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setNewCommDialogOpen(false)}>\n                      Cancel·lar\n                    </Button>\n                    <Button type=\"submit\" disabled={sendCommMutation.isPending}>\n                      <Send className=\"h-4 w-4 mr-2\" />\n                      {sendCommMutation.isPending ? \"Enviant...\" : \"Enviar\"}\n                    </Button>\n                  </div>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Cercar per assumpte o usuari...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n              />\n            </div>\n            \n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filtrar per tipus\" />\n              </SelectTrigger>\n              <SelectContent className=\"select-content-solid\">\n                <SelectItem value=\"all\">Tots els tipus</SelectItem>\n                <SelectItem value=\"communication\">Comunicacions</SelectItem>\n                <SelectItem value=\"notification\">Notificacions</SelectItem>\n                <SelectItem value=\"announcement\">Comunicats</SelectItem>\n                <SelectItem value=\"alert\">Alertes</SelectItem>\n                <SelectItem value=\"privacy_policy\">Privacitat</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filtrar per estat\" />\n              </SelectTrigger>\n              <SelectContent className=\"select-content-solid\">\n                <SelectItem value=\"all\">Tots els estats</SelectItem>\n                <SelectItem value=\"draft\">Esborranys</SelectItem>\n                <SelectItem value=\"sent\">Enviats</SelectItem>\n                <SelectItem value=\"delivered\">Entregats</SelectItem>\n                <SelectItem value=\"read\">Llegits</SelectItem>\n                <SelectItem value=\"failed\">Fallits</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Communications Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <MessageSquare className=\"h-5 w-5\" />\n            Registre de Comunicacions ({filteredCommunications.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Tipus</TableHead>\n                  <TableHead>Assumpte</TableHead>\n                  <TableHead>Emissor</TableHead>\n                  <TableHead>Destinatari</TableHead>\n                  <TableHead>Estat</TableHead>\n                  <TableHead>Data</TableHead>\n                  <TableHead>Accions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredCommunications.map((comm: Communication) => (\n                  <TableRow key={comm.id}>\n                    <TableCell>\n                      <Badge className={getTypeColor(comm.messageType)}>\n                        {getTypeName(comm.messageType)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">{comm.subject}</TableCell>\n                    <TableCell>{comm.senderName}</TableCell>\n                    <TableCell>{comm.recipientName}</TableCell>\n                    <TableCell>\n                      <Badge className={getStatusColor(comm.status)}>\n                        {comm.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {new Date(comm.createdAt).toLocaleDateString('ca-ES')}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        {canEditCommunication(comm) && (\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                \n                {filteredCommunications.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center text-muted-foreground py-8\">\n                      No s'han trobat comunicacions amb els filtres aplicats\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default CommunicationsManagement;","size_bytes":15826},"client/src/components/admin/PrivacyManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Shield, \n  Search, \n  Eye, \n  Check, \n  X,\n  Clock,\n  AlertTriangle,\n  FileText\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PrivacyRequest {\n  id: string;\n  userId: string;\n  userName: string;\n  userEmail: string;\n  requestType: string;\n  description: string;\n  status: string;\n  adminResponse?: string;\n  assignedTo?: string;\n  assignedToName?: string;\n  dueDate?: string;\n  resolvedAt?: string;\n  createdAt: string;\n}\n\nexport function PrivacyManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [selectedRequest, setSelectedRequest] = useState<PrivacyRequest | null>(null);\n  const [responseDialogOpen, setResponseDialogOpen] = useState(false);\n\n  // Fetch privacy requests\n  const { data: privacyRequests = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/privacy-requests', user?.institutionId],\n    enabled: !!user?.institutionId,\n  });\n\n  // Filter requests\n  const filteredRequests = privacyRequests.filter((request: PrivacyRequest) => {\n    const matchesSearch = \n      request.userName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      request.userEmail.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      request.description.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || request.status === statusFilter;\n    const matchesType = typeFilter === \"all\" || request.requestType === typeFilter;\n    \n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  // Update request status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: async (data: {\n      requestId: string;\n      status: string;\n      adminResponse: string;\n    }) => {\n      return apiRequest(`/api/admin/privacy-requests/${data.requestId}/status`, {\n        method: 'PUT',\n        body: JSON.stringify({\n          status: data.status,\n          adminResponse: data.adminResponse,\n        }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sol·licitud actualitzada\",\n        description: \"L'estat de la sol·licitud s'ha actualitzat correctament.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/privacy-requests'] });\n      setResponseDialogOpen(false);\n      setSelectedRequest(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error actualitzant sol·licitud\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'initiated': return 'bg-blue-100 text-blue-800';\n      case 'in_progress': return 'bg-orange-100 text-orange-800';\n      case 'resolved': return 'bg-green-100 text-green-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusName = (status: string) => {\n    switch (status) {\n      case 'initiated': return 'Iniciada';\n      case 'in_progress': return 'En Tràmit';\n      case 'resolved': return 'Resolta';\n      case 'rejected': return 'Rebutjada';\n      default: return status;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'access': return 'bg-blue-100 text-blue-800';\n      case 'rectification': return 'bg-orange-100 text-orange-800';\n      case 'deletion': return 'bg-red-100 text-red-800';\n      case 'portability': return 'bg-purple-100 text-purple-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTypeName = (type: string) => {\n    switch (type) {\n      case 'access': return 'Accés a Dades';\n      case 'rectification': return 'Rectificació';\n      case 'deletion': return 'Eliminació';\n      case 'portability': return 'Portabilitat';\n      default: return type;\n    }\n  };\n\n  const isOverdue = (dueDate: string) => {\n    return new Date(dueDate) < new Date();\n  };\n\n  const handleResponse = (request: PrivacyRequest) => {\n    setSelectedRequest(request);\n    setResponseDialogOpen(true);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Gestió de Política de Privacitat</h2>\n          <p className=\"text-muted-foreground\">\n            Seguiment i gestió de sol·licituds GDPR i drets dels usuaris\n          </p>\n        </div>\n        \n        {/* Summary Stats */}\n        <div className=\"grid grid-cols-4 gap-4\">\n          <Card className=\"p-3\">\n            <div className=\"flex items-center gap-2\">\n              <Clock className=\"h-4 w-4 text-blue-500\" />\n              <div className=\"text-sm\">\n                <p className=\"font-semibold\">\n                  {filteredRequests.filter((r: PrivacyRequest) => r.status === 'initiated').length}\n                </p>\n                <p className=\"text-muted-foreground\">Iniciades</p>\n              </div>\n            </div>\n          </Card>\n          \n          <Card className=\"p-3\">\n            <div className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n              <div className=\"text-sm\">\n                <p className=\"font-semibold\">\n                  {filteredRequests.filter((r: PrivacyRequest) => r.status === 'in_progress').length}\n                </p>\n                <p className=\"text-muted-foreground\">En Tràmit</p>\n              </div>\n            </div>\n          </Card>\n          \n          <Card className=\"p-3\">\n            <div className=\"flex items-center gap-2\">\n              <Check className=\"h-4 w-4 text-green-500\" />\n              <div className=\"text-sm\">\n                <p className=\"font-semibold\">\n                  {filteredRequests.filter((r: PrivacyRequest) => r.status === 'resolved').length}\n                </p>\n                <p className=\"text-muted-foreground\">Resoltes</p>\n              </div>\n            </div>\n          </Card>\n          \n          <Card className=\"p-3\">\n            <div className=\"flex items-center gap-2\">\n              <X className=\"h-4 w-4 text-red-500\" />\n              <div className=\"text-sm\">\n                <p className=\"font-semibold\">\n                  {filteredRequests.filter((r: PrivacyRequest) => \n                    r.dueDate && isOverdue(r.dueDate)\n                  ).length}\n                </p>\n                <p className=\"text-muted-foreground\">Vençudes</p>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Cercar per usuari o descripció...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n              />\n            </div>\n            \n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filtrar per estat\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tots els estats</SelectItem>\n                <SelectItem value=\"initiated\">Iniciades</SelectItem>\n                <SelectItem value=\"in_progress\">En Tràmit</SelectItem>\n                <SelectItem value=\"resolved\">Resoltes</SelectItem>\n                <SelectItem value=\"rejected\">Rebutjades</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filtrar per tipus\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tots els tipus</SelectItem>\n                <SelectItem value=\"access\">Accés a Dades</SelectItem>\n                <SelectItem value=\"rectification\">Rectificació</SelectItem>\n                <SelectItem value=\"deletion\">Eliminació</SelectItem>\n                <SelectItem value=\"portability\">Portabilitat</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Privacy Requests Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Sol·licituds de Privacitat ({filteredRequests.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Tipus Sol·licitud</TableHead>\n                  <TableHead>Usuari</TableHead>\n                  <TableHead>Descripció</TableHead>\n                  <TableHead>Estat</TableHead>\n                  <TableHead>Data Creació</TableHead>\n                  <TableHead>Data Límit</TableHead>\n                  <TableHead>Accions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredRequests.map((request: PrivacyRequest) => (\n                  <TableRow key={request.id}>\n                    <TableCell>\n                      <Badge className={getTypeColor(request.requestType)}>\n                        {getTypeName(request.requestType)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <p className=\"font-medium\">{request.userName}</p>\n                        <p className=\"text-sm text-muted-foreground\">{request.userEmail}</p>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"max-w-xs\">\n                      <div className=\"truncate\" title={request.description}>\n                        {request.description}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={getStatusColor(request.status)}>\n                        {getStatusName(request.status)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {new Date(request.createdAt).toLocaleDateString('ca-ES')}\n                    </TableCell>\n                    <TableCell>\n                      {request.dueDate && (\n                        <div className={`${isOverdue(request.dueDate) ? 'text-red-600' : ''}`}>\n                          {new Date(request.dueDate).toLocaleDateString('ca-ES')}\n                          {isOverdue(request.dueDate) && (\n                            <AlertTriangle className=\"inline h-4 w-4 ml-1\" />\n                          )}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleResponse(request)}\n                          disabled={request.status === 'resolved'}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                \n                {filteredRequests.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center text-muted-foreground py-8\">\n                      No s'han trobat sol·licituds amb els filtres aplicats\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Response Dialog */}\n      {selectedRequest && (\n        <Dialog open={responseDialogOpen} onOpenChange={setResponseDialogOpen}>\n          <DialogContent className=\"max-w-2xl modal-content-solid\">\n            <DialogHeader>\n              <DialogTitle>Respondre Sol·licitud de Privacitat</DialogTitle>\n              <DialogDescription>\n                Gestiona la resposta a la sol·licitud de {selectedRequest.userName}\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              {/* Request Details */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Detalls de la Sol·licitud</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <div><strong>Tipus:</strong> {getTypeName(selectedRequest.requestType)}</div>\n                  <div><strong>Usuari:</strong> {selectedRequest.userName} ({selectedRequest.userEmail})</div>\n                  <div><strong>Descripció:</strong> {selectedRequest.description}</div>\n                  <div><strong>Data Creació:</strong> {new Date(selectedRequest.createdAt).toLocaleString('ca-ES')}</div>\n                  {selectedRequest.dueDate && (\n                    <div><strong>Data Límit:</strong> {new Date(selectedRequest.dueDate).toLocaleString('ca-ES')}</div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Response Form */}\n              <form onSubmit={(e) => {\n                e.preventDefault();\n                const formData = new FormData(e.currentTarget);\n                updateStatusMutation.mutate({\n                  requestId: selectedRequest.id,\n                  status: formData.get('status') as string,\n                  adminResponse: formData.get('adminResponse') as string,\n                });\n              }}>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Nou Estat</label>\n                    <Select name=\"status\" required defaultValue={selectedRequest.status}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"initiated\">Iniciada</SelectItem>\n                        <SelectItem value=\"in_progress\">En Tràmit</SelectItem>\n                        <SelectItem value=\"resolved\">Resolta</SelectItem>\n                        <SelectItem value=\"rejected\">Rebutjada</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <label className=\"text-sm font-medium\">Resposta Administrativa</label>\n                    <Textarea \n                      name=\"adminResponse\" \n                      placeholder=\"Escriu la resposta o explicació per a l'usuari...\"\n                      rows={4}\n                      defaultValue={selectedRequest.adminResponse || ''}\n                    />\n                  </div>\n                  \n                  <div className=\"flex justify-end gap-2\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setResponseDialogOpen(false)}>\n                      Cancel·lar\n                    </Button>\n                    <Button type=\"submit\" disabled={updateStatusMutation.isPending}>\n                      {updateStatusMutation.isPending ? \"Guardant...\" : \"Guardar Resposta\"}\n                    </Button>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n\nexport default PrivacyManagement;","size_bytes":17143},"client/src/components/admin/ReportsManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { \n  FileText, \n  Download, \n  Calendar, \n  Users, \n  TrendingUp,\n  Filter\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { WeeklyScheduleModal } from \"./WeeklyScheduleModal\";\n\nexport function ReportsManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const [selectedEmployees, setSelectedEmployees] = useState<string[]>([]);\n  const [dateRange, setDateRange] = useState({\n    start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    end: new Date().toISOString().split('T')[0]\n  });\n  const [reportType, setReportType] = useState(\"attendance\");\n  const [showWeeklyDetailModal, setShowWeeklyDetailModal] = useState(false);\n  const [selectedUserForDetail, setSelectedUserForDetail] = useState<string | null>(null);\n\n  // Define interfaces for type safety\n  interface Employee {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  }\n\n  interface WeeklyEmployeeData {\n    id: string;\n    name: string;\n    email: string;\n    complianceRate?: number;\n    weeklyDetails?: Array<{\n      status: 'present' | 'late' | 'absent' | 'unknown';\n      actualHours?: number;\n      scheduledHours?: number;\n    }>;\n  }\n\n  interface ReportGenerationResponse {\n    success: boolean;\n    reportData: Array<{\n      id: string;\n      name: string;\n      email: string;\n      total_records: number;\n      avg_hours: number;\n      total_delays: number;\n      days_present: number;\n      missing_exits: number;\n    }>;\n    reportType: string;\n    dateRange: { start: string; end: string };\n    employeeCount: number;\n    generatedAt: string;\n  }\n\n  // Fetch weekly attendance data for all employees\n  const { data: weeklyData = [], isLoading: weeklyLoading } = useQuery<WeeklyEmployeeData[]>({\n    queryKey: ['/api/admin/weekly-attendance', user?.institutionId],\n    enabled: !!user?.institutionId && showWeeklyDetailModal,\n    retry: 1,\n    refetchOnWindowFocus: false,\n  });\n\n  // Fetch employees for selection\n  const { data: employees = [] } = useQuery<Employee[]>({\n    queryKey: ['/api/admin/employees', user?.institutionId],\n    enabled: !!user?.institutionId,\n  });\n\n  const handleEmployeeSelection = (employeeId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedEmployees([...selectedEmployees, employeeId]);\n    } else {\n      setSelectedEmployees(selectedEmployees.filter(id => id !== employeeId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedEmployees(['all']);\n    } else {\n      setSelectedEmployees([]);\n    }\n  };\n\n  const isAllSelected = selectedEmployees.includes('all');\n  const isIndeterminate = selectedEmployees.length > 0 && !isAllSelected;\n\n  // Generate and download report\n  const generateReport = () => {\n    if (!user?.institutionId) {\n      toast({\n        title: \"Error\",\n        description: \"No s'ha pogut identificar la institució\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (selectedEmployees.length === 0) {\n      toast({\n        title: \"Error\", \n        description: \"Selecciona almenys un empleat per generar l'informe\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const employeeParam = selectedEmployees.includes('all') ? 'all' : selectedEmployees.join(',');\n    \n    const params = new URLSearchParams({\n      institutionId: user.institutionId,\n      employees: employeeParam,\n      startDate: dateRange.start,\n      endDate: dateRange.end,\n      type: reportType\n    });\n\n    // Open download in new window\n    const downloadUrl = `/api/admin/reports/generate?${params}`;\n    window.open(downloadUrl, '_blank');\n\n    toast({\n      title: \"Informe generat\",\n      description: \"L'informe s'està descarregant...\",\n    });\n  };\n\n  // Generate custom report data (for preview/analysis)\n  const generateCustomReportMutation = useMutation({\n    mutationFn: async (): Promise<ReportGenerationResponse> => {\n      const response = await fetch('/api/admin/reports/generate-custom', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          selectedEmployees,\n          reportType,\n          dateRange,\n          institutionId: user?.institutionId\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Error generant informe');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Informe generat\",\n        description: `S'han processat ${data.employeeCount} empleats correctament`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Error generant informe\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const presetReports = [\n    {\n      id: 'monthly_attendance',\n      name: 'Informe Mensual d\\'Assistència',\n      description: 'Resum d\\'assistència de tots els empleats del mes actual',\n      type: 'attendance'\n    },\n    {\n      id: 'weekly_summary',\n      name: 'Informe Setmanal',\n      description: 'Llista d\\'usuaris amb fitxatges reals vs horaris previstos',\n      type: 'weekly_detailed'\n    },\n    {\n      id: 'employee_performance',\n      name: 'Rendiment per Empleat',\n      description: 'Anàlisi detallada del rendiment individual',\n      type: 'performance'\n    },\n    {\n      id: 'delay_analysis',\n      name: 'Anàlisi de Retards',\n      description: 'Informe de retards i absències injustificades',\n      type: 'delays'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Gestió d'Informes</h2>\n          <p className=\"text-muted-foreground\">\n            Genera informes personalitzats i estadístiques del centre\n          </p>\n        </div>\n      </div>\n\n      {/* Quick Reports */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5\" />\n            Informes Predefinits\n          </CardTitle>\n          <CardDescription>\n            Genera ràpidament informes amb configuracions predeterminades\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {presetReports.map((report) => (\n              <Card key={report.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">{report.name}</CardTitle>\n                    <Badge variant=\"outline\">{report.type}</Badge>\n                  </div>\n                  <CardDescription>{report.description}</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Button \n                    size=\"sm\" \n                    className=\"w-full\"\n                    onClick={() => {\n                      if (report.id === 'weekly_summary') {\n                        setShowWeeklyDetailModal(true);\n                      } else {\n                        setReportType(report.type);\n                        generateReport();\n                      }\n                    }}\n                    data-testid={`button-generate-${report.id}`}\n                  >\n                    {report.id === 'weekly_summary' ? (\n                      <>\n                        <Users className=\"h-4 w-4 mr-2\" />\n                        Veure Llista Usuaris\n                      </>\n                    ) : (\n                      <>\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Generar\n                      </>\n                    )}\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Custom Report Generator */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Generador d'Informes Personalitzats\n          </CardTitle>\n          <CardDescription>\n            Selecciona empleats específics i personalitza el període de l'informe\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Date Range Selection */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Data Inici</label>\n              <Input\n                type=\"date\"\n                value={dateRange.start}\n                onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Data Final</label>\n              <Input\n                type=\"date\"\n                value={dateRange.end}\n                onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Tipus d'Informe</label>\n              <Select value={reportType} onValueChange={setReportType}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"attendance\">Assistència</SelectItem>\n                  <SelectItem value=\"summary\">Resum</SelectItem>\n                  <SelectItem value=\"performance\">Rendiment</SelectItem>\n                  <SelectItem value=\"delays\">Retards</SelectItem>\n                  <SelectItem value=\"detailed\">Detallat</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Employee Selection */}\n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <label className=\"text-sm font-medium\">\n                Seleccionar Empleats ({isAllSelected ? 'Tots' : selectedEmployees.length} seleccionats)\n              </label>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"select-all\"\n                    checked={isAllSelected}\n                    onCheckedChange={handleSelectAll}\n                    data-testid=\"checkbox-select-all\"\n                  />\n                  <label htmlFor=\"select-all\" className=\"text-sm cursor-pointer\">\n                    Seleccionar tots els empleats\n                  </label>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setSelectedEmployees([])}\n                  disabled={selectedEmployees.length === 0}\n                  data-testid=\"button-clear-selection\"\n                >\n                  Esborrar selecció\n                </Button>\n              </div>\n            </div>\n\n            {!isAllSelected && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 max-h-64 overflow-y-auto border rounded p-4\">\n                {(employees as Employee[]).map((employee: Employee) => (\n                  <div key={employee.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={employee.id}\n                      checked={selectedEmployees.includes(employee.id)}\n                      onCheckedChange={(checked) => \n                        handleEmployeeSelection(employee.id, checked as boolean)\n                      }\n                      data-testid={`checkbox-employee-${employee.id}`}\n                    />\n                    <label\n                      htmlFor={employee.id}\n                      className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                    >\n                      {employee.firstName} {employee.lastName}\n                      <span className=\"text-muted-foreground block text-xs font-normal\">\n                        {employee.email}\n                      </span>\n                    </label>\n                  </div>\n                ))}\n              </div>\n            )}\n            \n            {isAllSelected && (\n              <div className=\"border rounded p-4 bg-muted/20\">\n                <p className=\"text-sm text-muted-foreground text-center\">\n                  S'han seleccionat tots els empleats ({(employees as Employee[]).length} empleats)\n                </p>\n              </div>\n            )}\n          </div>\n\n          {/* Generate Button */}\n          <div className=\"flex justify-end\">\n            <Button\n              onClick={generateReport}\n              disabled={selectedEmployees.length === 0}\n              className=\"min-w-32\"\n              data-testid=\"button-generate-report\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Generar Informe ({isAllSelected ? 'Tots els empleats' : `${selectedEmployees.length} seleccionats`})\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Reports */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Informes Recents\n          </CardTitle>\n          <CardDescription>\n            Descarrega informes generats anteriorment\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center text-muted-foreground py-8\">\n            <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p>Els informes generats apareixeran aquí</p>\n            <p className=\"text-sm\">Genera el teu primer informe per començar</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Weekly Detailed Report Modal */}\n      <Dialog open={showWeeklyDetailModal} onOpenChange={setShowWeeklyDetailModal}>\n        <DialogContent className=\"max-w-6xl max-h-[80vh] overflow-y-auto bg-white dark:bg-slate-900 border border-rose-200 dark:border-slate-700\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              Informe Setmanal Detallat\n            </DialogTitle>\n            <DialogDescription>\n              Llista d'usuaris amb comparació entre fitxatges reals i horaris previstos\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            {weeklyLoading && (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                <p>Carregant dades dels empleats...</p>\n              </div>\n            )}\n            \n            {/* Employee List */}\n            <div className=\"grid gap-4\">\n              {(weeklyData as any[]).map((employee: any) => (\n                <Card \n                  key={employee.id} \n                  className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                  onClick={() => setSelectedUserForDetail(employee.id)}\n                >\n                  <CardHeader className=\"pb-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"font-semibold\">{employee.firstName} {employee.lastName}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{employee.email}</p>\n                      </div>\n                      <div className=\"flex items-center gap-4\">\n                        <Badge variant={employee.totalAttendance > 0 ? \"default\" : \"secondary\"}>\n                          {employee.totalAttendance || 0} fitxatges\n                        </Badge>\n                        <Badge variant={employee.scheduledHours > 0 ? \"outline\" : \"secondary\"}>\n                          {employee.scheduledHours || 0}h previstes\n                        </Badge>\n                        {employee.complianceRate !== undefined && (\n                          <Badge \n                            variant={employee.complianceRate >= 80 ? \"default\" : \n                                   employee.complianceRate >= 60 ? \"secondary\" : \"destructive\"}\n                          >\n                            {employee.complianceRate}% compliment\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"grid grid-cols-5 gap-2 text-sm\">\n                      {['Dilluns', 'Dimarts', 'Dimecres', 'Dijous', 'Divendres'].map((day, index) => {\n                        const dayData = employee.weeklyDetails?.[index];\n                        return (\n                          <div key={day} className=\"text-center\">\n                            <div className=\"font-medium\">{day}</div>\n                            <div className={`mt-1 p-1 rounded text-xs ${\n                              dayData?.status === 'present' ? 'bg-green-100 text-green-800' :\n                              dayData?.status === 'late' ? 'bg-yellow-100 text-yellow-800' :\n                              dayData?.status === 'absent' ? 'bg-red-100 text-red-800' :\n                              'bg-gray-100 text-gray-600'\n                            }`}>\n                              {dayData?.status === 'present' ? 'Present' :\n                               dayData?.status === 'late' ? 'Retard' :\n                               dayData?.status === 'absent' ? 'Absent' : 'Sense dades'}\n                            </div>\n                            {dayData?.actualHours && (\n                              <div className=\"text-xs text-muted-foreground mt-1\">\n                                {dayData.actualHours}h / {dayData.scheduledHours || 0}h\n                              </div>\n                            )}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {!weeklyLoading && weeklyData.length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>No hi ha dades d'empleats disponibles</p>\n                <p className=\"text-sm\">Verifiqueu que hi hagi empleats registrats al sistema</p>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* User Detail Modal */}\n      {selectedUserForDetail && (\n        <WeeklyScheduleModal \n          userId={selectedUserForDetail} \n          onClose={() => setSelectedUserForDetail(null)} \n        />\n      )}\n    </div>\n  );\n}\n\nexport default ReportsManagement;","size_bytes":19920},"client/src/components/admin/StaffManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Users, \n  Download, \n  Upload, \n  Search, \n  Edit, \n  Eye, \n  Calendar,\n  Plus,\n  FileSpreadsheet \n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { WeeklyScheduleModal } from \"./WeeklyScheduleModal\";\n\ninterface Employee {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: string;\n  createdAt: string;\n  lastAttendance?: string;\n  totalHours?: number;\n}\n\nexport function StaffManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState(\"all\");\n  const [scheduleModalUserId, setScheduleModalUserId] = useState<string | null>(null);\n  const [importDialogOpen, setImportDialogOpen] = useState(false);\n\n  // Fetch all employees for the institution\n  const { data: employees = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/employees', user?.institutionId],\n    enabled: !!user?.institutionId,\n  });\n\n  // Filtered employees based on search and role filter\n  const filteredEmployees = (employees as Employee[]).filter((employee: Employee) => {\n    const matchesSearch = \n      employee.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.email.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesRole = roleFilter === \"all\" || employee.role === roleFilter;\n    \n    return matchesSearch && matchesRole;\n  });\n\n  // Download import template\n  const downloadTemplate = () => {\n    const csvContent = [\n      \"firstName,lastName,email,role,department,startDate\",\n      \"Joan,García,joan.garcia@centre.edu,employee,Matemàtiques,2024-09-01\",\n      \"Maria,López,maria.lopez@centre.edu,employee,Història,2024-09-01\",\n      \"Pere,Martín,pere.martin@centre.edu,admin,Direcció,2024-09-01\"\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"plantilla_personal.csv\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  // Import employees from file\n  const importMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('institutionId', user?.institutionId || '');\n      \n      const response = await fetch('/api/admin/employees/import', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Error importing employees');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Importació completada\",\n        description: `${data.successful} empleats importats correctament, ${data.failed} errors.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/employees'] });\n      setImportDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error en la importació\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'superadmin': return 'bg-purple-100 text-purple-800';\n      case 'admin': return 'bg-blue-100 text-blue-800';\n      case 'employee': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with actions */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Gestió de Personal</h2>\n          <p className=\"text-muted-foreground\">\n            Administra els empleats del centre educatiu\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={downloadTemplate}\n            data-testid=\"button-download-template\"\n          >\n            <FileSpreadsheet className=\"h-4 w-4 mr-2\" />\n            Descarregar Plantilla\n          </Button>\n          \n          <Dialog open={importDialogOpen} onOpenChange={setImportDialogOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" data-testid=\"button-import-employees\">\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Importar Personal\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"modal-content-solid\">\n              <DialogHeader>\n                <DialogTitle>Importar Personal</DialogTitle>\n                <DialogDescription>\n                  Selecciona un fitxer CSV amb les dades del personal a importar.\n                  Assegura't que segueix el format de la plantilla.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <Input\n                  type=\"file\"\n                  accept=\".csv\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) {\n                      importMutation.mutate(file);\n                    }\n                  }}\n                  data-testid=\"input-import-file\"\n                />\n                <div className=\"text-sm text-muted-foreground\">\n                  Formats acceptats: CSV. Mida màxima: 10MB\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n\n          <Button size=\"sm\" data-testid=\"button-add-employee\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Afegir Personal\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Cercar per nom, cognoms o email...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"input-search-employees\"\n              />\n            </div>\n            \n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filtrar per rol\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tots els rols</SelectItem>\n                <SelectItem value=\"employee\">Empleats</SelectItem>\n                <SelectItem value=\"admin\">Administradors</SelectItem>\n                <SelectItem value=\"superadmin\">Superadministradors</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Employees Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Llistat de Personal ({filteredEmployees.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Nom Complet</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Rol</TableHead>\n                  <TableHead>Data Creació</TableHead>\n                  <TableHead>Última Assistència</TableHead>\n                  <TableHead>Hores Setmana</TableHead>\n                  <TableHead>Accions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredEmployees.map((employee: Employee) => (\n                  <TableRow key={employee.id}>\n                    <TableCell className=\"font-medium\">\n                      {employee.firstName} {employee.lastName}\n                    </TableCell>\n                    <TableCell>{employee.email}</TableCell>\n                    <TableCell>\n                      <Badge className={getRoleBadgeColor(employee.role)}>\n                        {employee.role}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {new Date(employee.createdAt).toLocaleDateString('ca-ES')}\n                    </TableCell>\n                    <TableCell>\n                      {employee.lastAttendance \n                        ? new Date(employee.lastAttendance).toLocaleDateString('ca-ES')\n                        : '-'\n                      }\n                    </TableCell>\n                    <TableCell>\n                      {typeof employee.totalHours === 'number' ? employee.totalHours.toFixed(1) : parseFloat(employee.totalHours?.toString() || '0').toFixed(1)}h\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setScheduleModalUserId(employee.id)}\n                          data-testid={`button-schedule-${employee.id}`}\n                        >\n                          <Calendar className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          data-testid={`button-edit-${employee.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          data-testid={`button-view-${employee.id}`}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                \n                {filteredEmployees.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center text-muted-foreground py-8\">\n                      No s'han trobat empleats amb els filtres aplicats\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Weekly Schedule Modal */}\n      {scheduleModalUserId && (\n        <WeeklyScheduleModal\n          userId={scheduleModalUserId}\n          onClose={() => setScheduleModalUserId(null)}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default StaffManagement;","size_bytes":12062},"server/gmailService.ts":{"content":"import nodemailer from 'nodemailer';\nimport { EmailSetting } from '@shared/schema';\n\nexport class GmailService {\n  private transporter: nodemailer.Transporter | null = null;\n  \n  constructor(private emailConfig: EmailSetting) {\n    this.initializeTransporter();\n  }\n  \n  private initializeTransporter() {\n    this.transporter = nodemailer.createTransporter({\n      host: this.emailConfig.smtpHost,\n      port: this.emailConfig.smtpPort,\n      secure: false, // true for 465, false for other ports like 587\n      auth: {\n        user: this.emailConfig.smtpUser,\n        pass: this.emailConfig.smtpPassword, // App-specific password for Gmail\n      },\n      tls: {\n        rejectUnauthorized: false\n      }\n    });\n  }\n  \n  async sendCommunicationEmail({\n    to,\n    subject,\n    content,\n    senderName,\n    priority = 'medium'\n  }: {\n    to: string;\n    subject: string;\n    content: string;\n    senderName: string;\n    priority?: string;\n  }): Promise<boolean> {\n    if (!this.transporter) {\n      console.error('Gmail transporter not initialized');\n      return false;\n    }\n    \n    try {\n      const priorityHeaders: Record<string, string> = {\n        'low': '5',\n        'medium': '3', \n        'high': '2',\n        'urgent': '1'\n      };\n      \n      const mailOptions = {\n        from: `\"${this.emailConfig.senderName}\" <${this.emailConfig.senderEmail}>`,\n        to: to,\n        subject: `[${this.emailConfig.senderName}] ${subject}`,\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 20px;\">\n              <h2 style=\"color: #333; margin: 0;\">Nova comunicació de ${senderName}</h2>\n            </div>\n            \n            <div style=\"padding: 20px; background-color: #ffffff; border: 1px solid #e9ecef; border-radius: 8px;\">\n              <h3 style=\"color: #0066cc; margin-top: 0;\">${subject}</h3>\n              <div style=\"margin: 20px 0; line-height: 1.6; color: #333;\">\n                ${content.replace(/\\n/g, '<br>')}\n              </div>\n            </div>\n            \n            <div style=\"margin-top: 20px; padding: 15px; background-color: #f8f9fa; border-radius: 8px; font-size: 12px; color: #666;\">\n              <p style=\"margin: 0;\"><strong>Informació del missatge:</strong></p>\n              <p style=\"margin: 5px 0;\">De: ${senderName}</p>\n              <p style=\"margin: 5px 0;\">Prioritat: ${priority}</p>\n              <p style=\"margin: 5px 0;\">Data: ${new Date().toLocaleDateString('ca-ES')}</p>\n            </div>\n            \n            <div style=\"margin-top: 20px; padding: 10px; background-color: #e3f2fd; border-left: 4px solid #2196f3; font-size: 11px; color: #555;\">\n              <p style=\"margin: 0;\"><strong>Sistema de Gestió EduPresència</strong></p>\n              <p style=\"margin: 5px 0;\">Aquest missatge ha estat enviat automàticament des del sistema de comunicacions interna.</p>\n            </div>\n          </div>\n        `,\n        headers: {\n          'X-Priority': priorityHeaders[priority] || '3',\n          'X-MSMail-Priority': priority === 'urgent' ? 'High' : priority === 'high' ? 'High' : 'Normal'\n        }\n      };\n      \n      const result = await this.transporter.sendMail(mailOptions);\n      console.log('Gmail email sent successfully:', result.messageId);\n      return true;\n      \n    } catch (error) {\n      console.error('Gmail sending failed:', error);\n      return false;\n    }\n  }\n  \n  async testConnection(): Promise<boolean> {\n    if (!this.transporter) {\n      return false;\n    }\n    \n    try {\n      await this.transporter.verify();\n      console.log('Gmail connection test successful');\n      return true;\n    } catch (error) {\n      console.error('Gmail connection test failed:', error);\n      return false;\n    }\n  }\n}\n\n// Singleton service instance\nlet gmailServiceInstance: GmailService | null = null;\n\nexport async function getGmailService(emailConfig: EmailSetting): Promise<GmailService> {\n  if (!gmailServiceInstance) {\n    gmailServiceInstance = new GmailService(emailConfig);\n  }\n  return gmailServiceInstance;\n}","size_bytes":4161},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":5543},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n// ACL functionality will be implemented when needed for protected communications\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Default to private for communications\n      const isPublic = false;\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Simple access check for communications - owner can access\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n  }: {\n    userId?: string;\n    objectFile: File;\n  }): Promise<boolean> {\n    // For now, basic check - could be enhanced with ACL later\n    return userId !== undefined;\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":7666},"server/sendgridService.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  console.warn(\"SENDGRID_API_KEY environment variable not set - email functionality will be disabled\");\n}\n\nconst mailService = new MailService();\nif (process.env.SENDGRID_API_KEY) {\n  mailService.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n  attachments?: Array<{\n    content: string;\n    filename: string;\n    type: string;\n    disposition: string;\n  }>;\n}\n\nexport class SendGridService {\n  async sendEmail(params: EmailParams): Promise<boolean> {\n    if (!process.env.SENDGRID_API_KEY) {\n      console.error('SendGrid API key not configured');\n      return false;\n    }\n\n    try {\n      await mailService.send({\n        to: params.to,\n        from: params.from,\n        subject: params.subject,\n        text: params.text,\n        html: params.html,\n        attachments: params.attachments,\n      });\n      \n      console.log(`Email sent successfully to ${params.to}`);\n      return true;\n    } catch (error) {\n      console.error('SendGrid email error:', error);\n      return false;\n    }\n  }\n\n  async sendCommunicationEmail(\n    recipientEmail: string, \n    senderEmail: string,\n    senderName: string,\n    subject: string, \n    content: string,\n    communicationId: string\n  ): Promise<boolean> {\n    const emailSubject = `[EduPresència] ${subject}`;\n    \n    const htmlContent = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"background-color: #1e40af; color: white; padding: 20px; text-align: center;\">\n          <h1 style=\"margin: 0;\">EduPresència</h1>\n          <p style=\"margin: 10px 0 0 0;\">Sistema de Comunicacions</p>\n        </div>\n        \n        <div style=\"background-color: #f8fafc; padding: 20px; border-left: 4px solid #1e40af;\">\n          <h2 style=\"color: #1e40af; margin-top: 0;\">Nou missatge de ${senderName}</h2>\n          <p><strong>De:</strong> ${senderEmail}</p>\n          <p><strong>Assumpte:</strong> ${subject}</p>\n        </div>\n        \n        <div style=\"padding: 20px; background-color: white; border: 1px solid #e2e8f0;\">\n          <div style=\"white-space: pre-wrap; line-height: 1.6;\">${content}</div>\n        </div>\n        \n        <div style=\"background-color: #f1f5f9; padding: 15px; font-size: 12px; color: #64748b; text-align: center;\">\n          <p>Aquest correu ha estat enviat automàticament pel sistema EduPresència.</p>\n          <p>Per respondre, utilitzeu la plataforma web del centre educatiu.</p>\n          <p style=\"margin-top: 10px;\">\n            <strong>ID de comunicació:</strong> ${communicationId}\n          </p>\n        </div>\n      </div>\n    `;\n\n    const textContent = `\nEduPresència - Sistema de Comunicacions\n\nNou missatge de ${senderName}\nDe: ${senderEmail}\nAssumpte: ${subject}\n\n${content}\n\n---\nAquest correu ha estat enviat automàticament pel sistema EduPresència.\nPer respondre, utilitzeu la plataforma web del centre educatiu.\nID de comunicació: ${communicationId}\n    `;\n\n    return this.sendEmail({\n      to: recipientEmail,\n      from: senderEmail,\n      subject: emailSubject,\n      text: textContent,\n      html: htmlContent,\n    });\n  }\n\n  async sendAlertEmail(\n    recipientEmail: string,\n    institutionName: string,\n    alertType: string,\n    employeeName: string,\n    alertContent: string\n  ): Promise<boolean> {\n    const subject = `[EduPresència] Alerta: ${alertType}`;\n    \n    const htmlContent = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"background-color: #dc2626; color: white; padding: 20px; text-align: center;\">\n          <h1 style=\"margin: 0;\">⚠️ EduPresència - Alerta</h1>\n          <p style=\"margin: 10px 0 0 0;\">${institutionName}</p>\n        </div>\n        \n        <div style=\"background-color: #fef2f2; padding: 20px; border-left: 4px solid #dc2626;\">\n          <h2 style=\"color: #dc2626; margin-top: 0;\">${alertType}</h2>\n          <p><strong>Employee:</strong> ${employeeName}</p>\n          <p><strong>Data i hora:</strong> ${new Date().toLocaleString('ca-ES')}</p>\n        </div>\n        \n        <div style=\"padding: 20px; background-color: white; border: 1px solid #e2e8f0;\">\n          <div style=\"white-space: pre-wrap; line-height: 1.6;\">${alertContent}</div>\n        </div>\n        \n        <div style=\"background-color: #f1f5f9; padding: 15px; font-size: 12px; color: #64748b; text-align: center;\">\n          <p>Aquest correu d'alerta ha estat generat automàticament pel sistema EduPresència.</p>\n          <p>Accediu a la plataforma per veure més detalls i gestionar les incidències.</p>\n        </div>\n      </div>\n    `;\n\n    return this.sendEmail({\n      to: recipientEmail,\n      from: `noreply@${institutionName.toLowerCase().replace(/\\s+/g, '')}.edu`,\n      subject: subject,\n      html: htmlContent,\n    });\n  }\n}\n\nexport const sendGridService = new SendGridService();","size_bytes":5048},"client/src/components/admin/WeeklyScheduleModal.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Clock, MapPin, Coffee } from \"lucide-react\";\n\ninterface WeeklyScheduleModalProps {\n  userId: string;\n  onClose: () => void;\n}\n\ninterface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n}\n\ninterface ScheduleEntry {\n  dayOfWeek: number;\n  hourPeriod: number;\n  timeSlot: string;\n  subjectCode: string;\n  groupCode: string;\n  classroomCode: string;\n  title: string;\n  location: string;\n}\n\nexport function WeeklyScheduleModal({ userId, onClose }: WeeklyScheduleModalProps) {\n  const { data: user } = useQuery({\n    queryKey: ['/api/admin/employees', userId],\n    queryFn: () => apiRequest(`/api/admin/employees/${userId}`),\n  }) as { data: User | undefined };\n\n  const { data: schedule = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/personal-schedule', userId],\n    queryFn: () => apiRequest(`/api/admin/personal-schedule/${userId}?week=${getCurrentWeek()}`),\n  }) as { data: ScheduleEntry[]; isLoading: boolean };\n\n  const getCurrentWeek = () => {\n    const now = new Date();\n    const monday = new Date(now);\n    monday.setDate(monday.getDate() - monday.getDay() + 1);\n    return monday.toISOString().split('T')[0];\n  };\n\n  const dayNames = [\n    'Dilluns', 'Dimarts', 'Dimecres', 'Dijous', 'Divendres', 'Dissabte', 'Diumenge'\n  ];\n\n  const getScheduleForDay = (dayIndex: number): ScheduleEntry[] => {\n    return schedule.filter((entry) => entry.dayOfWeek === dayIndex + 1);\n  };\n\n  const calculateTotalSessions = () => {\n    return schedule.length;\n  };\n\n  const getUniqueSubjects = () => {\n    const subjects = new Set(schedule.map(entry => entry.subjectCode));\n    return subjects.size;\n  };\n\n  const getHourLabel = (hourPeriod: number): string => {\n    const ordinals = ['1a', '2a', '3a', '4a', '5a', '6a', '7a', '8a'];\n    return ordinals[hourPeriod - 1] ? `${ordinals[hourPeriod - 1]} hora` : `Hora ${hourPeriod}`;\n  };\n\n  return (\n    <Dialog open onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto modal-content-solid\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Horari Setmanal - {user?.firstName} {user?.lastName}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Summary Stats */}\n          <div className=\"grid grid-cols-3 gap-4\">\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {calculateTotalSessions()}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  Sessions Setmanals\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {getUniqueSubjects()}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  Matèries Diferents\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {user?.firstName} {user?.lastName}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  Professor/a\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Weekly Schedule Grid */}\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {dayNames.map((dayName, index) => {\n                const daySchedule = getScheduleForDay(index);\n                \n                return (\n                  <Card key={index} className={daySchedule.length > 0 ? \"border-green-200\" : \"border-gray-200\"}>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-lg flex items-center justify-between\">\n                        {dayName}\n                        {daySchedule.length > 0 && (\n                          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                            {daySchedule.length} sessions\n                          </Badge>\n                        )}\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-2\">\n                      {daySchedule.length > 0 ? (\n                        <>\n                          {/* Sessions */}\n                          {daySchedule\n                            .sort((a, b) => a.hourPeriod - b.hourPeriod)\n                            .map((session, sessionIndex) => (\n                              <div key={sessionIndex}>\n                                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg border border-blue-200 dark:border-blue-800\">\n                                  <div className=\"flex items-center justify-between mb-2\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <Clock className=\"h-4 w-4 text-blue-500\" />\n                                      <span className=\"font-medium text-blue-700 dark:text-blue-300\">\n                                        {getHourLabel(session.hourPeriod)}\n                                      </span>\n                                    </div>\n                                    <Badge variant=\"outline\" className=\"text-xs\">\n                                      {session.subjectCode}\n                                    </Badge>\n                                  </div>\n                                  \n                                  <div className=\"text-sm space-y-1\">\n                                    <div className=\"font-medium\">\n                                      {session.title}\n                                    </div>\n                                    \n                                    {session.classroomCode && (\n                                      <div className=\"flex items-center gap-1 text-gray-600 dark:text-gray-400\">\n                                        <MapPin className=\"h-3 w-3\" />\n                                        <span>{session.classroomCode}</span>\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                                \n                                {/* Pati coeducatiu entre 3a i 4a hora */}\n                                {session.hourPeriod === 3 && (\n                                  <div className=\"my-2 bg-yellow-50 dark:bg-yellow-900/20 p-2 rounded-lg border border-yellow-200 dark:border-yellow-800\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <Coffee className=\"h-4 w-4 text-yellow-600\" />\n                                      <span className=\"text-sm font-medium text-yellow-700 dark:text-yellow-300\">\n                                        Patis Coeducatius\n                                      </span>\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            ))}\n                          \n                          {/* Total sessions for day */}\n                          <div className=\"pt-2 border-t\">\n                            <div className=\"text-sm font-medium text-center text-green-600\">\n                              {daySchedule.length} sessions aquest dia\n                            </div>\n                          </div>\n                        </>\n                      ) : (\n                        <div className=\"text-center text-muted-foreground py-4\">\n                          <Calendar className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                          <p className=\"text-sm\">Sense horari definit</p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8917},"client/src/components/EmployeeDetailModal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { t } from \"@/lib/i18n\";\nimport { format, startOfWeek, endOfWeek, eachDayOfInterval, isWeekend, startOfMonth, endOfMonth, getDay } from \"date-fns\";\nimport { ca, es } from \"date-fns/locale\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle \n} from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  User, \n  Mail, \n  Calendar, \n  Clock, \n  CheckCircle, \n  AlertCircle, \n  XCircle,\n  ChevronLeft,\n  ChevronRight\n} from \"lucide-react\";\n// Define the employee type expected from the admin employees endpoint\ninterface AdminEmployee {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: string;\n  createdAt: string;\n  lastAttendance: string | null;\n  totalHours: string;\n}\n\ninterface EmployeeDetailModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  employee: AdminEmployee | null;\n  institutionId: string;\n}\n\ninterface AttendanceRecord {\n  id: string;\n  employeeId: string;\n  date: string;\n  checkIn: string | null;\n  checkOut: string | null;\n  scheduledStart?: string;\n  scheduledEnd?: string;\n  scheduledPeriods?: number;\n  totalHours: number;\n  status: 'present' | 'late' | 'absent' | 'partial';\n  lateMinutes?: number;\n}\n\nexport default function EmployeeDetailModal({ \n  isOpen, \n  onClose, \n  employee, \n  institutionId \n}: EmployeeDetailModalProps) {\n  const { language } = useLanguage();\n  const locale = language === \"ca\" ? ca : es;\n  \n  const [currentMonth, setCurrentMonth] = useState(new Date());\n\n  const { data: attendanceHistory = [], isLoading } = useQuery<AttendanceRecord[]>({\n    queryKey: [\"/api/attendance-history\", employee?.id, format(currentMonth, \"yyyy-MM\")],\n    queryFn: async () => {\n      if (!employee?.id) return [];\n      \n      const startDate = format(startOfMonth(currentMonth), \"yyyy-MM-dd\");\n      const endDate = format(endOfMonth(currentMonth), \"yyyy-MM-dd\");\n      \n      console.log('ATTENDANCE_HISTORY: Fetching for employee:', employee.id, 'period:', startDate, 'to', endDate);\n      \n      const response = await fetch(\n        `/api/attendance-history/${employee.id}?startDate=${startDate}&endDate=${endDate}`,\n        { credentials: 'include' }\n      );\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch attendance history');\n      }\n      \n      const data = await response.json();\n      console.log('ATTENDANCE_HISTORY: Received data:', data);\n      return data;\n    },\n    enabled: !!employee?.id && isOpen,\n  });\n\n  const getDayColor = (record: AttendanceRecord | null, isWorkDay: boolean) => {\n    if (!record) {\n      return \"bg-red-100 text-red-700 border-red-200\"; // No record = absent\n    }\n    \n    // Check late minutes for color coding\n    const lateMinutes = parseFloat(record.lateMinutes?.toString() || '0');\n    \n    if (lateMinutes <= 0) {\n      return \"bg-green-100 text-green-700 border-green-200\"; // On time\n    } else if (lateMinutes <= 15) {\n      return \"bg-yellow-100 text-yellow-700 border-yellow-200\"; // Slightly late\n    } else if (lateMinutes <= 30) {\n      return \"bg-orange-100 text-orange-700 border-orange-200\"; // Late\n    } else {\n      return \"bg-red-100 text-red-700 border-red-200\"; // Very late\n    }\n  };\n\n  const getStatusIcon = (record: AttendanceRecord | null, isWorkDay: boolean) => {\n    if (!record) {\n      return <XCircle className=\"h-3 w-3\" />;\n    }\n    \n    const lateMinutes = parseFloat(record.lateMinutes?.toString() || '0');\n    \n    if (lateMinutes <= 0) {\n      return <CheckCircle className=\"h-3 w-3\" />; // On time\n    } else if (lateMinutes <= 30) {\n      return <AlertCircle className=\"h-3 w-3\" />; // Late but present\n    } else {\n      return <XCircle className=\"h-3 w-3\" />; // Very late\n    }\n  };\n\n  const formatTime = (timeString: string | null) => {\n    if (!timeString) return '--:--';\n    return format(new Date(timeString), 'HH:mm');\n  };\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    setCurrentMonth(prev => {\n      const newDate = new Date(prev);\n      newDate.setMonth(newDate.getMonth() + (direction === 'next' ? 1 : -1));\n      return newDate;\n    });\n  };\n\n  // Generate ONLY weekdays (Monday-Friday) for current month\n  const monthStart = startOfMonth(currentMonth);\n  const monthEnd = endOfMonth(currentMonth);\n  const allDays = eachDayOfInterval({ start: monthStart, end: monthEnd });\n  const calendarDays = allDays.filter(day => {\n    const dayOfWeek = getDay(day);\n    return dayOfWeek >= 1 && dayOfWeek <= 5; // Only Monday (1) to Friday (5)\n  });\n\n  // Create attendance record map for quick lookup\n  const attendanceMap = new Map<string, AttendanceRecord>();\n  attendanceHistory.forEach(record => {\n    attendanceMap.set(record.date, record);\n  });\n\n  if (!employee) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto modal-content-solid\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-3\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n              <User className=\"h-6 w-6 text-primary\" />\n            </div>\n            <div>\n              <h2 className=\"text-xl font-semibold\">\n                {employee.firstName} {employee.lastName}\n              </h2>\n              <p className=\"text-sm text-muted-foreground\">\n                {t(\"employee_details\", language)}\n              </p>\n            </div>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Personal Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4\" />\n                {t(\"personal_information\", language)}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center gap-3\">\n                <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                <div>\n                  <p className=\"text-sm font-medium\">{t(\"email\", language)}</p>\n                  <p className=\"text-sm text-muted-foreground\">{employee.email}</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-3\">\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                <div>\n                  <p className=\"text-sm font-medium\">{t(\"role\", language)}</p>\n                  <Badge variant=\"secondary\">{employee.role}</Badge>\n                </div>\n              </div>\n\n              <Separator />\n              \n              <div className=\"space-y-2\">\n                <h4 className=\"text-sm font-medium flex items-center gap-2\">\n                  <Clock className=\"h-4 w-4\" />\n                  {t(\"monthly_summary\", language)}\n                </h4>\n                <div className=\"text-xs space-y-1\">\n                  <div className=\"flex justify-between\">\n                    <span>{t(\"actual_hours\", language)}:</span>\n                    <span className=\"font-mono\">\n                      {attendanceHistory.reduce((total, record) => total + (parseFloat(record.totalHours.toString()) || 0), 0).toFixed(1)}h\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>{t(\"work_days\", language)}:</span>\n                    <span className=\"font-mono\">\n                      {attendanceHistory.filter(r => r.checkIn).length}/{calendarDays.length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>{t(\"punctuality\", language)}:</span>\n                    <span className=\"font-mono\">\n                      {attendanceHistory.length > 0 \n                        ? Math.round((attendanceHistory.filter(r => r.checkIn && (!r.lateMinutes || parseFloat(r.lateMinutes.toString()) <= 0)).length / Math.max(attendanceHistory.filter(r => r.checkIn).length, 1)) * 100)\n                        : 0}%\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"flex items-center gap-1\">\n                      {t(\"hours_difference\", language)}:\n                    </span>\n                    <span className={`font-mono ${(() => {\n                      const actualHours = attendanceHistory.reduce((total, record) => total + (parseFloat(record.totalHours) || 0), 0);\n                      const expectedHours = calendarDays.length * 8; // Assuming 8h per day standard\n                      const diff = actualHours - expectedHours;\n                      return diff >= 0 ? 'text-green-600' : diff >= -5 ? 'text-orange-600' : 'text-red-600';\n                    })()}`}>\n                      {(() => {\n                        const actualHours = attendanceHistory.reduce((total, record) => total + (parseFloat(record.totalHours.toString()) || 0), 0);\n                        const expectedHours = calendarDays.length * 8; // Standard 8h workday\n                        const diff = actualHours - expectedHours;\n                        return `${diff >= 0 ? '+' : ''}${diff.toFixed(1)}h`;\n                      })()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Attendance Calendar */}\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4\" />\n                  {t(\"attendance_history\", language)}\n                </CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => navigateMonth('prev')}\n                    data-testid=\"prev-month-btn\"\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <span className=\"text-sm font-medium min-w-[120px] text-center\">\n                    {format(currentMonth, \"MMMM yyyy\", { locale })}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => navigateMonth('next')}\n                    data-testid=\"next-month-btn\"\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Legend */}\n              <div className=\"flex flex-wrap gap-4 text-xs\">\n                <div className=\"flex items-center gap-1\">\n                  <div className=\"w-3 h-3 rounded bg-green-100 border border-green-200\"></div>\n                  <span>{t(\"on_time\", language)}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <div className=\"w-3 h-3 rounded bg-yellow-100 border border-yellow-200\"></div>\n                  <span>{t(\"slightly_late\", language)} (&lt;15min)</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <div className=\"w-3 h-3 rounded bg-orange-100 border border-orange-200\"></div>\n                  <span>{t(\"late\", language)} (&lt;30min)</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <div className=\"w-3 h-3 rounded bg-red-100 border border-red-200\"></div>\n                  <span>{t(\"very_late_absent\", language)}</span>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  {/* Day headers - Only weekdays */}\n                  <div className=\"grid grid-cols-5 gap-1 mb-2\">\n                    {['L', 'M', 'X', 'J', 'V'].map(day => (\n                      <div key={day} className=\"p-2 text-center text-xs font-medium text-muted-foreground\">\n                        {day}\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {/* Calendar days - Only weekdays */}\n                  <div className=\"grid grid-cols-5 gap-1\">\n                    {calendarDays.map(day => {\n                    const dateStr = format(day, 'yyyy-MM-dd');\n                    const record = attendanceMap.get(dateStr) || null;\n                    const isWorkDay = !isWeekend(day);\n                    const dayColor = getDayColor(record, isWorkDay);\n                    const statusIcon = getStatusIcon(record, isWorkDay);\n                    \n                    return (\n                      <div\n                        key={dateStr}\n                        className={`\n                          p-2 text-xs rounded border cursor-pointer hover:opacity-80 transition-opacity\n                          ${dayColor}\n                        `}\n                        title={\n                          record \n                            ? `${format(day, 'dd/MM/yyyy', { locale })}\n━━━━━━━━━━━━━━━━━━━━━━━━\n📅 HORARI UNTIS PERSONALITZAT:\n   Entrada: ${record.scheduledStart || 'Sense horari'} (programat)\n   Sortida: ${record.scheduledEnd || 'Sense horari'} (programat)\n   Períodes lectius: ${record.scheduledPeriods || '0'}\n\n⏰ MARCATGE REAL:\n   Entrada: ${formatTime(record.checkIn)}\n   Sortida: ${formatTime(record.checkOut)}\n\n📊 ANÀLISI DEL DIA:\n   Retard entrada: ${Math.round(parseFloat(record.lateMinutes?.toString() || '0'))} min\n   Hores treballades: ${parseFloat(record.totalHours?.toString() || '0').toFixed(1)}h\n   ${(() => {\n     const scheduled = record.scheduledPeriods ? record.scheduledPeriods * 0.9 : 0;\n     const worked = parseFloat(record.totalHours?.toString() || '0');\n     const overtime = worked - scheduled;\n     return overtime > 1 ? `⚠️ Hores extres: +${overtime.toFixed(1)}h` : 'Jornada normal';\n   })()}\n   Estat: ${(() => {\n     const late = parseFloat(record.lateMinutes?.toString() || '0');\n     if (late <= 0) return 'Puntual ✅';\n     if (late <= 15) return 'Lleuger retard ⚠️';\n     if (late <= 30) return 'Retard moderat 🟠';\n     return 'Retard greu ❌';\n   })()}`\n                            : `${format(day, 'dd/MM/yyyy', { locale })}\n━━━━━━━━━━━━━━━━━━━━━━━━\n📅 HORARI UNTIS PERSONALITZAT:\n   ${isWorkDay ? 'Horari segons sessions importades d\\'Untis' : 'Cap sessió programada'}\n\n❌ SENSE ASSISTÈNCIA\n${isWorkDay ? 'No s\\'ha registrat cap marcatge aquest dia' : 'Dia no lectiu (cap sessió a Untis)'}`\n                        }\n                        data-testid={`day-${dateStr}`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"font-mono\">\n                            {format(day, 'd')}\n                          </span>\n                          {statusIcon}\n                        </div>\n                        {record && (\n                          <div className=\"mt-1 space-y-0.5 text-[10px]\">\n                            <div>{formatTime(record.checkIn)}</div>\n                            <div>{formatTime(record.checkOut)}</div>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":16344},"client/src/pages/WeeklyScheduleAdmin.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { format, startOfWeek, addDays, addWeeks, subWeeks } from 'date-fns';\nimport { ca, es } from 'date-fns/locale';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { t } from '@/lib/i18n';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { ChevronLeft, ChevronRight, Calendar, Clock, User, Users } from 'lucide-react';\n\ninterface EmployeeSchedule {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: string;\n  totalSessions: number;\n  weeklyHours: number;\n}\n\ninterface PersonalScheduleSession {\n  dayOfWeek: number;\n  hourPeriod: number;\n  startTime: string;\n  endTime: string;\n  subjectCode: string;\n  groupCode: string;\n  classroomCode: string;\n}\n\nexport default function WeeklyScheduleAdmin() {\n  const { language } = useLanguage();\n  const locale = language === \"ca\" ? ca : es;\n  \n  const [currentWeek, setCurrentWeek] = useState(new Date());\n  const [selectedEmployee, setSelectedEmployee] = useState<EmployeeSchedule | null>(null);\n  const [isPersonalScheduleOpen, setIsPersonalScheduleOpen] = useState(false);\n\n  const weekStart = startOfWeek(currentWeek, { weekStartsOn: 1 }); // Monday start\n\n  // Fetch employees with their weekly schedules\n  const { data: employeeSchedules = [], isLoading } = useQuery<EmployeeSchedule[]>({\n    queryKey: [\"/api/admin/weekly-schedule\", format(weekStart, \"yyyy-MM-dd\")],\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/admin/weekly-schedule?week=${format(weekStart, \"yyyy-MM-dd\")}`,\n        { credentials: 'include' }\n      );\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch weekly schedule');\n      }\n      \n      return response.json();\n    }\n  });\n\n  // Fetch personal schedule for selected employee\n  const { data: personalSchedule = [] } = useQuery<PersonalScheduleSession[]>({\n    queryKey: [\"/api/admin/personal-schedule\", selectedEmployee?.id, format(weekStart, \"yyyy-MM-dd\")],\n    queryFn: async () => {\n      if (!selectedEmployee?.id) return [];\n      \n      const response = await fetch(\n        `/api/admin/personal-schedule/${selectedEmployee.id}?week=${format(weekStart, \"yyyy-MM-dd\")}`,\n        { credentials: 'include' }\n      );\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch personal schedule');\n      }\n      \n      return response.json();\n    },\n    enabled: !!selectedEmployee?.id\n  });\n\n  const navigateWeek = (direction: 'prev' | 'next') => {\n    if (direction === 'prev') {\n      setCurrentWeek(subWeeks(currentWeek, 1));\n    } else {\n      setCurrentWeek(addWeeks(currentWeek, 1));\n    }\n  };\n\n  const openPersonalSchedule = (employee: EmployeeSchedule) => {\n    setSelectedEmployee(employee);\n    setIsPersonalScheduleOpen(true);\n  };\n\n  const getScheduleByDay = (dayOfWeek: number) => {\n    return personalSchedule.filter(session => session.dayOfWeek === dayOfWeek);\n  };\n\n  const formatTimeRange = (startTime: string, endTime: string) => {\n    return `${startTime.slice(0, 5)} - ${endTime.slice(0, 5)}`;\n  };\n\n  const weekDays = ['Dilluns', 'Dimarts', 'Dimecres', 'Dijous', 'Divendres'];\n  const timeSlots = [\n    { period: 1, label: '1a hora' },\n    { period: 2, label: '2a hora' },\n    { period: 3, label: '3a hora' },\n    { period: 'pati', label: 'Patis Coeducatius', isPause: true },\n    { period: 4, label: '4a hora' },\n    { period: 5, label: '5a hora' },\n    { period: 6, label: '6a hora' },\n    { period: 7, label: '7a hora' },\n    { period: 8, label: '8a hora' }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-300 rounded w-1/3 mb-4\"></div>\n          <div className=\"grid gap-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-20 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Calendar className=\"h-6 w-6 text-primary\" />\n          <h1 className=\"text-2xl font-bold\">{t('weeklySchedule')}</h1>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"outline\" onClick={() => navigateWeek('prev')}>\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <span className=\"text-lg font-medium\">\n            {format(weekStart, 'dd/MM/yyyy', { locale })} - {format(addDays(weekStart, 6), 'dd/MM/yyyy', { locale })}\n          </span>\n          <Button variant=\"outline\" onClick={() => navigateWeek('next')}>\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Users className=\"h-5 w-5\" />\n            <span>Personal de l'Institut - Horaris Setmanals</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {employeeSchedules.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No hi ha horaris disponibles per aquesta setmana</p>\n            </div>\n          ) : (\n            <div className=\"grid gap-4\">\n              {employeeSchedules.map(employee => (\n                <div \n                  key={employee.id}\n                  className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-accent hover:text-accent-foreground cursor-pointer transition-colors\"\n                  onClick={() => openPersonalSchedule(employee)}\n                  data-testid={`employee-schedule-${employee.id}`}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <User className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">\n                        {employee.firstName} {employee.lastName}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">{employee.email}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-right\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm font-medium\">{employee.weeklyHours}h</span>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {employee.totalSessions} sessions\n                      </p>\n                    </div>\n                    <Badge variant=\"secondary\">\n                      {employee.role}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Personal Schedule Dialog */}\n      <Dialog open={isPersonalScheduleOpen} onOpenChange={setIsPersonalScheduleOpen}>\n        <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto modal-content-solid\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2 text-foreground\">\n              <User className=\"h-5 w-5 text-rose-600 dark:text-rose-400\" />\n              <span>\n                Horari Personal - {selectedEmployee?.firstName} {selectedEmployee?.lastName}\n              </span>\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"mt-4\">\n            <div className=\"grid grid-cols-6 gap-2 mb-4\">\n              <div className=\"p-3 text-sm font-medium text-center bg-rose-100 dark:bg-slate-800 text-rose-800 dark:text-rose-200 rounded border border-rose-200 dark:border-slate-600\">\n                Hora\n              </div>\n              {weekDays.map(day => (\n                <div key={day} className=\"p-3 text-sm font-medium text-center bg-rose-100 dark:bg-slate-800 text-rose-800 dark:text-rose-200 rounded border border-rose-200 dark:border-slate-600\">\n                  {day}\n                </div>\n              ))}\n            </div>\n\n            <div className=\"space-y-2\">\n              {timeSlots.map(slot => {\n                if (slot.isPause) {\n                  return (\n                    <div key={slot.period} className=\"grid grid-cols-6 gap-2\">\n                      <div className=\"col-span-6 h-6 bg-green-100 dark:bg-green-900/30 border border-green-200 dark:border-green-700 rounded flex items-center justify-center\">\n                        <span className=\"text-xs font-medium text-green-700 dark:text-green-300\">☕ Patis Coeducatius</span>\n                      </div>\n                    </div>\n                  );\n                }\n\n                return (\n                  <div key={slot.period} className=\"grid grid-cols-6 gap-2\">\n                    <div className=\"p-2 text-xs text-center rounded border bg-rose-50 dark:bg-slate-800/50 text-rose-700 dark:text-rose-300 border-rose-200 dark:border-slate-600\">\n                      {slot.label}\n                    </div>\n                    {[1, 2, 3, 4, 5].map(dayOfWeek => {\n                      const daySchedule = getScheduleByDay(dayOfWeek);\n                      const session = daySchedule.find(s => s.hourPeriod === slot.period);\n                      \n                      return (\n                        <div key={`${dayOfWeek}-${slot.period}`} className=\"min-h-[60px] border border-rose-200 dark:border-slate-600 rounded bg-white dark:bg-slate-900\">\n                          {session ? (\n                            <div className=\"p-2 h-full bg-rose-50 dark:bg-rose-950/30 border-l-4 border-rose-500 dark:border-rose-400 rounded\">\n                              <div className=\"text-xs font-medium text-rose-700 dark:text-rose-300\">\n                                {session.subjectCode}\n                              </div>\n                              <div className=\"text-xs text-rose-600 dark:text-rose-400\">\n                                {session.groupCode}\n                              </div>\n                              <div className=\"text-xs text-rose-500 dark:text-rose-500\">\n                                {session.classroomCode}\n                              </div>\n                            </div>\n                          ) : (\n                            <div className=\"p-2 h-full flex items-center justify-center text-slate-400 dark:text-slate-500\">\n                              <span className=\"text-xs\">-</span>\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":11416},"client/src/components/modals/AlertConfigModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Clock, \n  UserX, \n  AlertTriangle, \n  Mail, \n  Settings, \n  Plus,\n  Trash2,\n  Edit,\n  Bell,\n  CheckCircle\n} from \"lucide-react\";\n\ninterface AlertRule {\n  id?: string;\n  name: string;\n  type: 'late_arrival' | 'absence' | 'early_departure' | 'custom';\n  enabled: boolean;\n  condition: {\n    threshold: number;\n    unit: 'minutes' | 'hours' | 'days';\n    comparison: 'greater_than' | 'less_than' | 'equals';\n  };\n  notification: {\n    email: boolean;\n    internal: boolean;\n    emailTemplate?: string;\n    recipients: string[];\n  };\n  schedule: {\n    immediate: boolean;\n    delay: number;\n    repeat: boolean;\n    repeatInterval: number;\n  };\n}\n\ninterface AlertConfigModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  institutionId: string | null;\n  language: string;\n}\n\nexport default function AlertConfigModal({ isOpen, onClose, institutionId, language }: AlertConfigModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [isCreating, setIsCreating] = useState(false);\n  const [editingRule, setEditingRule] = useState<AlertRule | null>(null);\n  const [formData, setFormData] = useState<AlertRule>({\n    name: '',\n    type: 'late_arrival',\n    enabled: true,\n    condition: {\n      threshold: 15,\n      unit: 'minutes',\n      comparison: 'greater_than'\n    },\n    notification: {\n      email: true,\n      internal: true,\n      emailTemplate: '',\n      recipients: []\n    },\n    schedule: {\n      immediate: true,\n      delay: 0,\n      repeat: false,\n      repeatInterval: 60\n    }\n  });\n\n  const { data: alertRules = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/alert-rules', institutionId],\n    queryFn: async () => {\n      if (!institutionId) {\n        throw new Error('No institution ID provided');\n      }\n      const response = await fetch(`/api/admin/alert-rules/${institutionId}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch alert rules: ${response.status}`);\n      }\n      return response.json();\n    },\n    enabled: isOpen && !!institutionId,\n    retry: 2,\n    retryDelay: 1000\n  });\n\n  const createRuleMutation = useMutation({\n    mutationFn: async (data: AlertRule) => {\n      return await apiRequest('POST', '/api/admin/alert-rules', {\n        ...data,\n        institutionId\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Regla creada\" : \"Regla creada\",\n        description: language === \"ca\" ? \"La regla d'alerta s'ha creat correctament\" : \"La regla de alerta se ha creado correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/alert-rules', institutionId] });\n      setIsCreating(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || (language === \"ca\" ? \"Error creant la regla\" : \"Error creando la regla\"),\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const updateRuleMutation = useMutation({\n    mutationFn: async (data: AlertRule) => {\n      return await apiRequest('PUT', `/api/admin/alert-rules/${data.id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Regla actualitzada\" : \"Regla actualizada\",\n        description: language === \"ca\" ? \"La regla d'alerta s'ha actualitzat correctament\" : \"La regla de alerta se ha actualizado correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/alert-rules', institutionId] });\n      setEditingRule(null);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || (language === \"ca\" ? \"Error actualitzant la regla\" : \"Error actualizando la regla\"),\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const deleteRuleMutation = useMutation({\n    mutationFn: async (ruleId: string) => {\n      return await apiRequest('DELETE', `/api/admin/alert-rules/${ruleId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: language === \"ca\" ? \"Regla eliminada\" : \"Regla eliminada\",\n        description: language === \"ca\" ? \"La regla d'alerta s'ha eliminat correctament\" : \"La regla de alerta se ha eliminado correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/alert-rules', institutionId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || (language === \"ca\" ? \"Error eliminant la regla\" : \"Error eliminando la regla\"),\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      type: 'late_arrival',\n      enabled: true,\n      condition: {\n        threshold: 15,\n        unit: 'minutes',\n        comparison: 'greater_than'\n      },\n      notification: {\n        email: true,\n        internal: true,\n        emailTemplate: '',\n        recipients: []\n      },\n      schedule: {\n        immediate: true,\n        delay: 0,\n        repeat: false,\n        repeatInterval: 60\n      }\n    });\n  };\n\n  const handleSubmit = () => {\n    if (editingRule) {\n      updateRuleMutation.mutate({ ...formData, id: editingRule.id });\n    } else {\n      createRuleMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (rule: AlertRule) => {\n    setEditingRule(rule);\n    setFormData(rule);\n    setIsCreating(true);\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'late_arrival': return <Clock className=\"h-4 w-4\" />;\n      case 'absence': return <UserX className=\"h-4 w-4\" />;\n      case 'early_departure': return <AlertTriangle className=\"h-4 w-4\" />;\n      default: return <Bell className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    const labels = {\n      ca: {\n        late_arrival: 'Retard',\n        absence: 'Absència',\n        early_departure: 'Sortida anticipada',\n        custom: 'Personalitzat'\n      },\n      es: {\n        late_arrival: 'Retraso',\n        absence: 'Ausencia',\n        early_departure: 'Salida anticipada',\n        custom: 'Personalizado'\n      }\n    };\n    return labels[language as keyof typeof labels]?.[type as keyof typeof labels.ca] || type;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto modal-content-solid\">\n        <DialogHeader>\n          <DialogTitle className=\"text-foreground\">\n            {language === \"ca\" ? \"Configuració d'Alertes Automàtiques\" : \"Configuración de Alertas Automáticas\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Existing Rules */}\n          {!isCreating && (\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center\">\n                    <Settings className=\"mr-2 h-5 w-5\" />\n                    {language === \"ca\" ? \"Regles Actives\" : \"Reglas Activas\"}\n                  </CardTitle>\n                  <Button onClick={() => setIsCreating(true)} size=\"sm\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    {language === \"ca\" ? \"Afegir Regla\" : \"Añadir Regla\"}\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {isLoading ? (\n                  <div className=\"animate-pulse space-y-4\">\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  </div>\n                ) : alertRules.length === 0 ? (\n                  <p className=\"text-muted-foreground text-center py-8\">\n                    {language === \"ca\" ? \"No hi ha regles configurades\" : \"No hay reglas configuradas\"}\n                  </p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {alertRules.map((rule: AlertRule) => (\n                      <div key={rule.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            {getTypeIcon(rule.type)}\n                            <div>\n                              <h4 className=\"font-medium\">{rule.name}</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {getTypeLabel(rule.type)} - {rule.condition.threshold} {rule.condition.unit}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant={rule.enabled ? \"default\" : \"secondary\"}>\n                              {rule.enabled ? (language === \"ca\" ? \"Activa\" : \"Activa\") : (language === \"ca\" ? \"Inactiva\" : \"Inactiva\")}\n                            </Badge>\n                            <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEdit(rule)}>\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\" onClick={() => rule.id && deleteRuleMutation.mutate(rule.id)}>\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Create/Edit Form */}\n          {isCreating && (\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  {editingRule ? \n                    (language === \"ca\" ? \"Editar Regla\" : \"Editar Regla\") : \n                    (language === \"ca\" ? \"Nova Regla d'Alerta\" : \"Nueva Regla de Alerta\")\n                  }\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"rule-name\">\n                      {language === \"ca\" ? \"Nom de la regla\" : \"Nombre de la regla\"}\n                    </Label>\n                    <Input\n                      id=\"rule-name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                      placeholder={language === \"ca\" ? \"Retard superior a 15 minuts\" : \"Retraso superior a 15 minutos\"}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"rule-type\">\n                      {language === \"ca\" ? \"Tipus\" : \"Tipo\"}\n                    </Label>\n                    <Select value={formData.type} onValueChange={(value: any) => setFormData({ ...formData, type: value })}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"late_arrival\">{getTypeLabel('late_arrival')}</SelectItem>\n                        <SelectItem value=\"absence\">{getTypeLabel('absence')}</SelectItem>\n                        <SelectItem value=\"early_departure\">{getTypeLabel('early_departure')}</SelectItem>\n                        <SelectItem value=\"custom\">{getTypeLabel('custom')}</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"threshold\">\n                      {language === \"ca\" ? \"Llindar\" : \"Umbral\"}\n                    </Label>\n                    <Input\n                      id=\"threshold\"\n                      type=\"number\"\n                      value={formData.condition.threshold}\n                      onChange={(e) => setFormData({ \n                        ...formData, \n                        condition: { \n                          ...formData.condition, \n                          threshold: parseInt(e.target.value) || 0 \n                        } \n                      })}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"unit\">\n                      {language === \"ca\" ? \"Unitat\" : \"Unidad\"}\n                    </Label>\n                    <Select \n                      value={formData.condition.unit} \n                      onValueChange={(value: any) => setFormData({ \n                        ...formData, \n                        condition: { \n                          ...formData.condition, \n                          unit: value \n                        } \n                      })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"minutes\">{language === \"ca\" ? \"Minuts\" : \"Minutos\"}</SelectItem>\n                        <SelectItem value=\"hours\">{language === \"ca\" ? \"Hores\" : \"Horas\"}</SelectItem>\n                        <SelectItem value=\"days\">{language === \"ca\" ? \"Dies\" : \"Días\"}</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"comparison\">\n                      {language === \"ca\" ? \"Comparació\" : \"Comparación\"}\n                    </Label>\n                    <Select \n                      value={formData.condition.comparison} \n                      onValueChange={(value: any) => setFormData({ \n                        ...formData, \n                        condition: { \n                          ...formData.condition, \n                          comparison: value \n                        } \n                      })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"greater_than\">{language === \"ca\" ? \"Superior a\" : \"Superior a\"}</SelectItem>\n                        <SelectItem value=\"less_than\">{language === \"ca\" ? \"Inferior a\" : \"Inferior a\"}</SelectItem>\n                        <SelectItem value=\"equals\">{language === \"ca\" ? \"Igual a\" : \"Igual a\"}</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"email-template\">\n                    {language === \"ca\" ? \"Plantilla d'email\" : \"Plantilla de email\"}\n                  </Label>\n                  <Textarea\n                    id=\"email-template\"\n                    value={formData.notification.emailTemplate}\n                    onChange={(e) => setFormData({ \n                      ...formData, \n                      notification: { \n                        ...formData.notification, \n                        emailTemplate: e.target.value \n                      } \n                    })}\n                    placeholder={language === \"ca\" ? \n                      \"Estimat/da {employeeName}, has arribat {delayMinutes} minuts tard avui...\" : \n                      \"Estimado/a {employeeName}, has llegado {delayMinutes} minutos tarde hoy...\"\n                    }\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      checked={formData.enabled}\n                      onCheckedChange={(enabled) => setFormData({ ...formData, enabled })}\n                    />\n                    <Label>{language === \"ca\" ? \"Activa\" : \"Activa\"}</Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      checked={formData.notification.email}\n                      onCheckedChange={(email) => setFormData({ \n                        ...formData, \n                        notification: { \n                          ...formData.notification, \n                          email \n                        } \n                      })}\n                    />\n                    <Label>{language === \"ca\" ? \"Enviar email\" : \"Enviar email\"}</Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      checked={formData.schedule.immediate}\n                      onCheckedChange={(immediate) => setFormData({ \n                        ...formData, \n                        schedule: { \n                          ...formData.schedule, \n                          immediate \n                        } \n                      })}\n                    />\n                    <Label>{language === \"ca\" ? \"Immediat\" : \"Inmediato\"}</Label>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => {\n                      setIsCreating(false);\n                      setEditingRule(null);\n                      resetForm();\n                    }}\n                  >\n                    {language === \"ca\" ? \"Cancel·lar\" : \"Cancelar\"}\n                  </Button>\n                  <Button \n                    onClick={handleSubmit}\n                    disabled={createRuleMutation.isPending || updateRuleMutation.isPending}\n                  >\n                    {editingRule ? \n                      (language === \"ca\" ? \"Actualitzar\" : \"Actualizar\") : \n                      (language === \"ca\" ? \"Crear\" : \"Crear\")\n                    }\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":19030},"client/src/components/MobileHeader.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { t } from \"@/lib/i18n\";\nimport { Activity, Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MobileHeaderProps {\n  isMobileMenuOpen: boolean;\n  setIsMobileMenuOpen: (open: boolean) => void;\n  onLogout: () => void;\n}\n\nexport default function MobileHeader({ isMobileMenuOpen, setIsMobileMenuOpen, onLogout }: MobileHeaderProps) {\n  const { user } = useAuth();\n  const { language } = useLanguage();\n  \n  const userInitials = user ? `${user.firstName?.[0] || ''}${user.lastName?.[0] || ''}` : 'U';\n\n  return (\n    <div className=\"fixed top-0 left-0 right-0 z-[60] md:hidden bg-white dark:bg-gray-900 border-b border-border shadow-sm\">\n      <div className=\"flex items-center justify-between px-3 py-2.5\">\n        {/* App Logo and Name */}\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center shadow-sm\">\n            <span className=\"text-sm font-bold text-white\">F</span>\n          </div>\n          <div>\n            <h1 className=\"text-sm font-semibold text-foreground\">fich.ai</h1>\n            <p className=\"text-xs text-muted-foreground\">Sistema Inteligent de Fitxatge</p>\n          </div>\n        </div>\n\n        {/* User Profile and Menu Button */}\n        <div className=\"flex items-center gap-2\">\n          {/* User Profile */}\n          <div className=\"flex items-center gap-2\">\n            <Avatar className=\"w-8 h-8 bg-gradient-to-br from-rose-400 to-pink-500\">\n              <AvatarFallback className=\"text-white font-semibold text-xs bg-transparent\">\n                {userInitials}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex flex-col items-start min-w-0\">\n              <p className=\"text-xs font-medium text-foreground truncate max-w-16 sm:max-w-20\">\n                {user?.firstName}\n              </p>\n              <Badge variant=\"outline\" className=\"text-[10px] px-1 py-0 leading-3 h-auto\">\n                {user?.role === 'superadmin' ? t(\"superadmin_short\", language) : \n                 user?.role === 'admin' ? t(\"admin_short\", language) : t(\"employee_short\", language)}\n              </Badge>\n            </div>\n          </div>\n\n          {/* Menu Toggle Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            className=\"p-2\"\n            data-testid=\"mobile-menu-button\"\n          >\n            {isMobileMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2948},"client/src/pages/AlertConfig.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Clock, \n  UserX, \n  AlertTriangle, \n  Mail, \n  Settings, \n  Plus,\n  Trash2,\n  Edit,\n  Bell,\n  CheckCircle\n} from \"lucide-react\";\n\ninterface AlertRule {\n  id: string;\n  name: string;\n  type: 'late_arrival' | 'absence' | 'early_departure' | 'custom';\n  enabled: boolean;\n  condition: {\n    threshold: number;\n    unit: 'minutes' | 'hours' | 'days';\n    comparison: 'greater_than' | 'less_than' | 'equals';\n  };\n  notification: {\n    email: boolean;\n    internal: boolean;\n    emailTemplate: string;\n    recipients: string[];\n  };\n  schedule: {\n    immediate: boolean;\n    delay: number; // minutes\n    repeat: boolean;\n    repeatInterval: number; // minutes\n  };\n}\n\nexport default function AlertConfig() {\n  const { language } = useLanguage();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [selectedRule, setSelectedRule] = useState<AlertRule | null>(null);\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Fetch alert rules\n  const { data: alertRules = [], isLoading } = useQuery({\n    queryKey: [\"/api/admin/alert-rules\", user?.institutionId],\n    queryFn: async () => {\n      if (!user?.institutionId) return [];\n      const response = await fetch(`/api/admin/alert-rules/${user.institutionId}`);\n      if (!response.ok) throw new Error('Failed to fetch alert rules');\n      return response.json();\n    },\n    enabled: !!user?.institutionId,\n  });\n\n  // Create/Update alert rule\n  const saveRuleMutation = useMutation({\n    mutationFn: async (rule: Partial<AlertRule>) => {\n      const url = rule.id \n        ? `/api/admin/alert-rules/${rule.id}` \n        : `/api/admin/alert-rules`;\n      const method = rule.id ? 'PUT' : 'POST';\n      \n      return apiRequest(method, url, { ...rule, institutionId: user?.institutionId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/alert-rules\"] });\n      toast({\n        title: language === \"ca\" ? \"Regla guardada\" : \"Regla guardada\",\n        description: language === \"ca\" ? \n          \"La regla d'alerta s'ha configurat correctament\" : \n          \"La regla de alerta se ha configurado correctamente\"\n      });\n      setSelectedRule(null);\n      setIsEditing(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: language === \"ca\" ? \n          \"No s'ha pogut guardar la regla\" : \n          \"No se pudo guardar la regla\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Delete alert rule\n  const deleteRuleMutation = useMutation({\n    mutationFn: async (ruleId: string) => {\n      return apiRequest('DELETE', `/api/admin/alert-rules/${ruleId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/alert-rules\"] });\n      toast({\n        title: language === \"ca\" ? \"Regla eliminada\" : \"Regla eliminada\",\n        description: language === \"ca\" ? \n          \"La regla d'alerta s'ha eliminat correctament\" : \n          \"La regla de alerta se ha eliminado correctamente\"\n      });\n    }\n  });\n\n  const getAlertTypeIcon = (type: string) => {\n    switch (type) {\n      case 'late_arrival':\n        return <Clock className=\"h-4 w-4\" />;\n      case 'absence':\n        return <UserX className=\"h-4 w-4\" />;\n      case 'early_departure':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      default:\n        return <Settings className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getAlertTypeName = (type: string) => {\n    switch (type) {\n      case 'late_arrival':\n        return language === \"ca\" ? \"Arribada tardana\" : \"Llegada tardía\";\n      case 'absence':\n        return language === \"ca\" ? \"Absència\" : \"Ausencia\";\n      case 'early_departure':\n        return language === \"ca\" ? \"Sortida anticipada\" : \"Salida anticipada\";\n      default:\n        return language === \"ca\" ? \"Personalitzada\" : \"Personalizada\";\n    }\n  };\n\n  const createNewRule = () => {\n    const newRule: AlertRule = {\n      id: '',\n      name: '',\n      type: 'late_arrival',\n      enabled: true,\n      condition: {\n        threshold: 15,\n        unit: 'minutes',\n        comparison: 'greater_than'\n      },\n      notification: {\n        email: true,\n        internal: true,\n        emailTemplate: '',\n        recipients: []\n      },\n      schedule: {\n        immediate: true,\n        delay: 0,\n        repeat: false,\n        repeatInterval: 60\n      }\n    };\n    setSelectedRule(newRule);\n    setIsEditing(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-32 bg-gray-200 rounded-lg\"></div>\n          <div className=\"h-96 bg-gray-200 rounded-lg\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <main className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-rose-600 to-purple-600 bg-clip-text text-transparent\">\n            {language === \"ca\" ? \"Configuració d'Alertes Automàtiques\" : \"Configuración de Alertas Automáticas\"}\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            {language === \"ca\" ? \n              \"Configura regles d'alertes per notificar automàticament als usuaris sobre esdeveniments importants\" :\n              \"Configura reglas de alertas para notificar automáticamente a los usuarios sobre eventos importantes\"\n            }\n          </p>\n        </div>\n        <Button onClick={createNewRule} className=\"bg-gradient-to-r from-rose-400 to-pink-500\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          {language === \"ca\" ? \"Nova Regla\" : \"Nueva Regla\"}\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Alert Rules List */}\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              {language === \"ca\" ? \"Regles d'Alerta\" : \"Reglas de Alerta\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {alertRules.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Settings className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>{language === \"ca\" ? \"No hi ha regles configurades\" : \"No hay reglas configuradas\"}</p>\n              </div>\n            ) : (\n              alertRules.map((rule: AlertRule) => (\n                <div key={rule.id} className=\"border rounded-lg p-4 space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      {getAlertTypeIcon(rule.type)}\n                      <span className=\"font-medium\">{rule.name}</span>\n                      <Badge variant={rule.enabled ? 'default' : 'secondary'}>\n                        {rule.enabled ? \n                          (language === \"ca\" ? \"Activa\" : \"Activa\") : \n                          (language === \"ca\" ? \"Desactivada\" : \"Desactivada\")\n                        }\n                      </Badge>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedRule(rule);\n                          setIsEditing(true);\n                        }}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => deleteRuleMutation.mutate(rule.id)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-sm text-muted-foreground\">\n                    <p>{getAlertTypeName(rule.type)}</p>\n                    <p>\n                      {language === \"ca\" ? \"Llindar:\" : \"Umbral:\"} {rule.condition.threshold} {rule.condition.unit}\n                    </p>\n                    <p>\n                      {language === \"ca\" ? \"Notificacions:\" : \"Notificaciones:\"}{' '}\n                      {rule.notification.email && <Mail className=\"inline h-3 w-3 mr-1\" />}\n                      {rule.notification.internal && <Bell className=\"inline h-3 w-3\" />}\n                    </p>\n                  </div>\n                </div>\n              ))\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Rule Editor */}\n        {isEditing && selectedRule && (\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                {selectedRule.id ? \n                  (language === \"ca\" ? \"Editar Regla\" : \"Editar Regla\") :\n                  (language === \"ca\" ? \"Nova Regla\" : \"Nueva Regla\")\n                }\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label>{language === \"ca\" ? \"Nom de la regla\" : \"Nombre de la regla\"}</Label>\n                <Input\n                  value={selectedRule.name}\n                  onChange={(e) => setSelectedRule({\n                    ...selectedRule,\n                    name: e.target.value\n                  })}\n                  placeholder={language === \"ca\" ? \"Nom descriptiu\" : \"Nombre descriptivo\"}\n                />\n              </div>\n\n              <div>\n                <Label>{language === \"ca\" ? \"Tipus d'alerta\" : \"Tipo de alerta\"}</Label>\n                <Select\n                  value={selectedRule.type}\n                  onValueChange={(value) => setSelectedRule({\n                    ...selectedRule,\n                    type: value as AlertRule['type']\n                  })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"late_arrival\">\n                      {language === \"ca\" ? \"Arribada tardana\" : \"Llegada tardía\"}\n                    </SelectItem>\n                    <SelectItem value=\"absence\">\n                      {language === \"ca\" ? \"Absència\" : \"Ausencia\"}\n                    </SelectItem>\n                    <SelectItem value=\"early_departure\">\n                      {language === \"ca\" ? \"Sortida anticipada\" : \"Salida anticipada\"}\n                    </SelectItem>\n                    <SelectItem value=\"custom\">\n                      {language === \"ca\" ? \"Personalitzada\" : \"Personalizada\"}\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>{language === \"ca\" ? \"Llindar\" : \"Umbral\"}</Label>\n                  <Input\n                    type=\"number\"\n                    value={selectedRule.condition.threshold}\n                    onChange={(e) => setSelectedRule({\n                      ...selectedRule,\n                      condition: {\n                        ...selectedRule.condition,\n                        threshold: Number(e.target.value)\n                      }\n                    })}\n                  />\n                </div>\n                <div>\n                  <Label>{language === \"ca\" ? \"Unitat\" : \"Unidad\"}</Label>\n                  <Select\n                    value={selectedRule.condition.unit}\n                    onValueChange={(value) => setSelectedRule({\n                      ...selectedRule,\n                      condition: {\n                        ...selectedRule.condition,\n                        unit: value as 'minutes' | 'hours' | 'days'\n                      }\n                    })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"minutes\">\n                        {language === \"ca\" ? \"Minuts\" : \"Minutos\"}\n                      </SelectItem>\n                      <SelectItem value=\"hours\">\n                        {language === \"ca\" ? \"Hores\" : \"Horas\"}\n                      </SelectItem>\n                      <SelectItem value=\"days\">\n                        {language === \"ca\" ? \"Dies\" : \"Días\"}\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-3\">\n                <Label>{language === \"ca\" ? \"Notificacions\" : \"Notificaciones\"}</Label>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">\n                    {language === \"ca\" ? \"Notificació interna\" : \"Notificación interna\"}\n                  </span>\n                  <Switch\n                    checked={selectedRule.notification.internal}\n                    onCheckedChange={(checked) => setSelectedRule({\n                      ...selectedRule,\n                      notification: {\n                        ...selectedRule.notification,\n                        internal: checked\n                      }\n                    })}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">\n                    {language === \"ca\" ? \"Notificació per email\" : \"Notificación por email\"}\n                  </span>\n                  <Switch\n                    checked={selectedRule.notification.email}\n                    onCheckedChange={(checked) => setSelectedRule({\n                      ...selectedRule,\n                      notification: {\n                        ...selectedRule.notification,\n                        email: checked\n                      }\n                    })}\n                  />\n                </div>\n              </div>\n\n              {selectedRule.notification.email && (\n                <div>\n                  <Label>{language === \"ca\" ? \"Plantilla d'email\" : \"Plantilla de email\"}</Label>\n                  <Textarea\n                    value={selectedRule.notification.emailTemplate}\n                    onChange={(e) => setSelectedRule({\n                      ...selectedRule,\n                      notification: {\n                        ...selectedRule.notification,\n                        emailTemplate: e.target.value\n                      }\n                    })}\n                    placeholder={language === \"ca\" ? \n                      \"Plantilla del missatge d'email...\" : \n                      \"Plantilla del mensaje de email...\"\n                    }\n                  />\n                </div>\n              )}\n\n              <Separator />\n\n              <div className=\"space-y-3\">\n                <Label>{language === \"ca\" ? \"Programació\" : \"Programación\"}</Label>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">\n                    {language === \"ca\" ? \"Notificar immediatament\" : \"Notificar inmediatamente\"}\n                  </span>\n                  <Switch\n                    checked={selectedRule.schedule.immediate}\n                    onCheckedChange={(checked) => setSelectedRule({\n                      ...selectedRule,\n                      schedule: {\n                        ...selectedRule.schedule,\n                        immediate: checked\n                      }\n                    })}\n                  />\n                </div>\n\n                {!selectedRule.schedule.immediate && (\n                  <div>\n                    <Label>\n                      {language === \"ca\" ? \"Retard (minuts)\" : \"Retraso (minutos)\"}\n                    </Label>\n                    <Input\n                      type=\"number\"\n                      value={selectedRule.schedule.delay}\n                      onChange={(e) => setSelectedRule({\n                        ...selectedRule,\n                        schedule: {\n                          ...selectedRule.schedule,\n                          delay: Number(e.target.value)\n                        }\n                      })}\n                    />\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex gap-4 pt-4\">\n                <Button\n                  onClick={() => saveRuleMutation.mutate(selectedRule)}\n                  disabled={saveRuleMutation.isPending}\n                  className=\"bg-gradient-to-r from-rose-400 to-pink-500\"\n                >\n                  {language === \"ca\" ? \"Guardar\" : \"Guardar\"}\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSelectedRule(null);\n                    setIsEditing(false);\n                  }}\n                >\n                  {language === \"ca\" ? \"Cancel·lar\" : \"Cancelar\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </main>\n  );\n}","size_bytes":18064},"client/src/pages/AcademicDataMigration.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { t } from '@/lib/i18n';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { \n  Database, \n  ArrowRight, \n  Copy, \n  Check, \n  AlertTriangle, \n  RefreshCw, \n  Download,\n  Upload,\n  FileText,\n  Users,\n  Calendar,\n  Building2,\n  Clock,\n  BookOpen,\n  Settings,\n  Trash2,\n  Eye\n} from 'lucide-react';\n\ninterface AcademicYear {\n  id: string;\n  name: string;\n  startDate: string;\n  endDate: string;\n  isActive: boolean;\n  status: string;\n}\n\ninterface MigrationJob {\n  id: string;\n  sourceYearId: string;\n  targetYearId: string;\n  migrationType: string;\n  status: string;\n  totalRecords: number;\n  migratedRecords: number;\n  failedRecords: number;\n  errors: any[];\n  createdAt: string;\n  completedAt?: string;\n}\n\nexport default function AcademicDataMigration() {\n  const { user } = useAuth();\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [sourceYearId, setSourceYearId] = useState<string>('');\n  const [targetYearId, setTargetYearId] = useState<string>('');\n  const [migrationType, setMigrationType] = useState<string>('employees');\n  const [selectedMigrationTypes, setSelectedMigrationTypes] = useState<string[]>(['employees']);\n  const [migrationDescription, setMigrationDescription] = useState<string>('');\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n\n  const institutionId = user?.institutionId;\n\n  // Fetch academic years\n  const { data: academicYears = [], isLoading: loadingYears } = useQuery<AcademicYear[]>({\n    queryKey: [\"/api/academic-years\", institutionId],\n    enabled: !!institutionId && (user?.role === \"admin\" || user?.role === \"superadmin\"),\n  });\n\n  // Fetch migration history\n  const { data: migrationHistory = [], isLoading: loadingHistory } = useQuery<MigrationJob[]>({\n    queryKey: [\"/api/academic-years/migrations\", institutionId],\n    enabled: !!institutionId && (user?.role === \"admin\" || user?.role === \"superadmin\"),\n    refetchInterval: 5000, // Auto-refresh every 5 seconds\n  });\n\n  // Migration mutation\n  const migrationMutation = useMutation({\n    mutationFn: async (data: {\n      sourceYearId: string;\n      targetYearId: string;\n      migrationTypes: string[];\n      description?: string;\n    }) => {\n      return await apiRequest(\"POST\", \"/api/academic-years/migrate\", data);\n    },\n    onSuccess: (data) => {\n      toast({\n        title: t(\"success\", language),\n        description: language === \"ca\" ? \"Migració iniciada correctament\" : \"Migración iniciada correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/academic-years/migrations\"] });\n      setShowConfirmDialog(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: t(\"error\", language),\n        description: error.message || (language === \"ca\" ? 'Error a l\\'iniciar la migració' : 'Error al iniciar la migración'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete migration mutation\n  const deleteMigrationMutation = useMutation({\n    mutationFn: async (migrationId: string) => {\n      return await apiRequest(\"DELETE\", `/api/academic-years/migrations/${migrationId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"success\", language),\n        description: language === \"ca\" ? \"Registre de migració eliminat\" : \"Registro de migración eliminado\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/academic-years/migrations\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: t(\"error\", language),\n        description: error.message || (language === \"ca\" ? 'Error a l\\'eliminar el registre' : 'Error al eliminar el registro'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setSourceYearId('');\n    setTargetYearId('');\n    setSelectedMigrationTypes(['employees']);\n    setMigrationDescription('');\n  };\n\n  const handleMigrationTypeChange = (type: string, checked: boolean) => {\n    if (checked) {\n      setSelectedMigrationTypes(prev => [...prev, type]);\n    } else {\n      setSelectedMigrationTypes(prev => prev.filter(t => t !== type));\n    }\n  };\n\n  const startMigration = () => {\n    if (!sourceYearId || !targetYearId || selectedMigrationTypes.length === 0) {\n      toast({\n        title: t(\"error\", language),\n        description: language === \"ca\" ? \"Si us plau completa tots els camps requerits\" : \"Por favor completa todos los campos requeridos\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (sourceYearId === targetYearId) {\n      toast({\n        title: t(\"error\", language),\n        description: language === \"ca\" ? \"Els cursos acadèmics d'origen i destí han de ser diferents\" : \"Los cursos académicos de origen y destino deben ser diferentes\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    migrationMutation.mutate({\n      sourceYearId,\n      targetYearId,\n      migrationTypes: selectedMigrationTypes,\n      description: migrationDescription\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-100 text-green-800';\n      case 'in_progress': return 'bg-blue-100 text-blue-800';\n      case 'failed': return 'bg-red-100 text-red-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const migrationTypeOptions = [\n    { \n      id: 'employees', \n      label: language === \"ca\" ? 'Personal/Empleats' : 'Personal/Empleados', \n      icon: Users, \n      description: language === \"ca\" ? 'Migrar dades d\\'empleats i contractes' : 'Migrar datos de empleados y contratos' \n    },\n    { \n      id: 'departments', \n      label: language === \"ca\" ? 'Departaments' : 'Departamentos', \n      icon: Building2, \n      description: language === \"ca\" ? 'Migrar estructura de departaments' : 'Migrar estructura de departamentos' \n    },\n    { \n      id: 'schedules', \n      label: language === \"ca\" ? 'Horaris' : 'Horarios', \n      icon: Calendar, \n      description: language === \"ca\" ? 'Migrar horaris i programacions' : 'Migrar horarios y programaciones' \n    },\n    { \n      id: 'subjects', \n      label: language === \"ca\" ? 'Assignatures' : 'Asignaturas', \n      icon: BookOpen, \n      description: language === \"ca\" ? 'Migrar matèries i programes' : 'Migrar materias y programas' \n    },\n    { \n      id: 'groups', \n      label: language === \"ca\" ? 'Grups/Classes' : 'Grupos/Clases', \n      icon: Users, \n      description: language === \"ca\" ? 'Migrar grups d\\'estudiants' : 'Migrar grupos de estudiantes' \n    },\n    { \n      id: 'attendance', \n      label: language === \"ca\" ? 'Registres d\\'Assistència' : 'Registros de Asistencia', \n      icon: Clock, \n      description: language === \"ca\" ? 'Migrar dades històriques d\\'assistència' : 'Migrar datos históricos de asistencia' \n    },\n  ];\n\n  if (loadingYears) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\">\n            {language === \"ca\" ? \"Migració de Dades Acadèmiques\" : \"Migración de Datos Académicos\"}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {language === \"ca\" ? \"Transfereix dades entre cursos acadèmics de forma segura i controlada\" : \"Transfiere datos entre cursos académicos de forma segura y controlada\"}\n          </p>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"migrate\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"migrate\">{language === \"ca\" ? \"Nova Migració\" : \"Nueva Migración\"}</TabsTrigger>\n          <TabsTrigger value=\"history\">{language === \"ca\" ? \"Historial\" : \"Historial\"}</TabsTrigger>\n        </TabsList>\n\n        {/* New Migration Tab */}\n        <TabsContent value=\"migrate\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Database className=\"h-5 w-5\" />\n                {language === \"ca\" ? \"Configurar Migració\" : \"Configurar Migración\"}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Source and Target Year Selection */}\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"source-year\">{language === \"ca\" ? \"Curs Acadèmic d'Origen\" : \"Curso Académico de Origen\"}</Label>\n                  <Select value={sourceYearId} onValueChange={setSourceYearId}>\n                    <SelectTrigger id=\"source-year\">\n                      <SelectValue placeholder={language === \"ca\" ? \"Selecciona curs origen\" : \"Selecciona curso origen\"} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {academicYears.map((year) => (\n                        <SelectItem key={year.id} value={year.id}>\n                          <div className=\"flex items-center gap-2\">\n                            {year.name}\n                            {year.isActive && <Badge variant=\"default\" className=\"text-xs\">{language === \"ca\" ? \"Actiu\" : \"Activo\"}</Badge>}\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"target-year\">{language === \"ca\" ? \"Curs Acadèmic de Destí\" : \"Curso Académico de Destino\"}</Label>\n                  <Select value={targetYearId} onValueChange={setTargetYearId}>\n                    <SelectTrigger id=\"target-year\">\n                      <SelectValue placeholder={language === \"ca\" ? \"Selecciona curs destí\" : \"Selecciona curso destino\"} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {academicYears.map((year) => (\n                        <SelectItem key={year.id} value={year.id}>\n                          <div className=\"flex items-center gap-2\">\n                            {year.name}\n                            {year.isActive && <Badge variant=\"default\" className=\"text-xs\">{language === \"ca\" ? \"Actiu\" : \"Activo\"}</Badge>}\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Migration Arrow */}\n              {sourceYearId && targetYearId && (\n                <div className=\"flex items-center justify-center py-4\">\n                  <div className=\"flex items-center gap-4 p-4 bg-blue-50 rounded-lg border-2 border-blue-200\">\n                    <div className=\"text-center\">\n                      <div className=\"font-semibold text-blue-900\">\n                        {academicYears.find(y => y.id === sourceYearId)?.name}\n                      </div>\n                      <div className=\"text-xs text-blue-600\">{language === \"ca\" ? \"Origen\" : \"Origen\"}</div>\n                    </div>\n                    <ArrowRight className=\"h-6 w-6 text-blue-600\" />\n                    <div className=\"text-center\">\n                      <div className=\"font-semibold text-blue-900\">\n                        {academicYears.find(y => y.id === targetYearId)?.name}\n                      </div>\n                      <div className=\"text-xs text-blue-600\">{language === \"ca\" ? \"Destí\" : \"Destino\"}</div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Migration Type Selection */}\n              <div className=\"space-y-4\">\n                <Label>{language === \"ca\" ? \"Tipus de Dades a Migrar\" : \"Tipos de Datos a Migrar\"}</Label>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  {migrationTypeOptions.map((option) => {\n                    const IconComponent = option.icon;\n                    return (\n                      <div key={option.id} className=\"flex items-start space-x-3 p-4 border rounded-lg hover:bg-gray-50\">\n                        <Checkbox\n                          id={option.id}\n                          checked={selectedMigrationTypes.includes(option.id)}\n                          onCheckedChange={(checked) => handleMigrationTypeChange(option.id, !!checked)}\n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <IconComponent className=\"h-4 w-4 text-gray-600\" />\n                            <Label htmlFor={option.id} className=\"font-medium cursor-pointer\">\n                              {option.label}\n                            </Label>\n                          </div>\n                          <p className=\"text-sm text-gray-600 mt-1\">{option.description}</p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Description */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Descripción de la Migración (Opcional)</Label>\n                <Textarea\n                  id=\"description\"\n                  value={migrationDescription}\n                  onChange={(e) => setMigrationDescription(e.target.value)}\n                  placeholder=\"Describe el propósito de esta migración...\"\n                  rows={3}\n                />\n              </div>\n\n              {/* Warning Alert */}\n              <Alert>\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>Importante:</strong> La migración copiará los datos seleccionados del curso origen al curso destino.\n                  Los datos existentes en el curso destino no se eliminarán. Asegúrate de revisar los datos antes de confirmar.\n                </AlertDescription>\n              </Alert>\n\n              {/* Action Buttons */}\n              <div className=\"flex gap-4 pt-4\">\n                <Dialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n                  <DialogTrigger asChild>\n                    <Button \n                      disabled={!sourceYearId || !targetYearId || selectedMigrationTypes.length === 0}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Copy className=\"h-4 w-4\" />\n                      Iniciar Migración\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>Confirmar Migración</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <p className=\"text-sm text-gray-600\">\n                        ¿Estás seguro de que quieres migrar los siguientes datos?\n                      </p>\n                      \n                      <div className=\"bg-gray-50 p-4 rounded-lg space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"font-medium\">Origen:</span>\n                          <span>{academicYears.find(y => y.id === sourceYearId)?.name}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"font-medium\">Destino:</span>\n                          <span>{academicYears.find(y => y.id === targetYearId)?.name}</span>\n                        </div>\n                        <div className=\"mt-2\">\n                          <span className=\"font-medium\">Datos:</span>\n                          <ul className=\"text-sm text-gray-600 mt-1\">\n                            {selectedMigrationTypes.map(type => (\n                              <li key={type}>• {migrationTypeOptions.find(opt => opt.id === type)?.label}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      </div>\n\n                      <div className=\"flex gap-2\">\n                        <Button \n                          onClick={startMigration}\n                          disabled={migrationMutation.isPending}\n                          className=\"flex-1\"\n                        >\n                          {migrationMutation.isPending ? (\n                            <>\n                              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                              Iniciando...\n                            </>\n                          ) : (\n                            <>\n                              <Check className=\"h-4 w-4 mr-2\" />\n                              Confirmar\n                            </>\n                          )}\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          onClick={() => setShowConfirmDialog(false)}\n                          className=\"flex-1\"\n                        >\n                          Cancelar\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n\n                <Button variant=\"outline\" onClick={resetForm}>\n                  Limpiar\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Migration History Tab */}\n        <TabsContent value=\"history\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                {language === \"ca\" ? \"Historial de Migracions\" : \"Historial de Migraciones\"}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {loadingHistory ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"h-20 bg-gray-200 rounded\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : migrationHistory.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Database className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n                  <p className=\"text-gray-500\">{language === \"ca\" ? \"No hi ha migracions registrades\" : \"No hay migraciones registradas\"}</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {migrationHistory.map((migration) => {\n                    const sourceYear = academicYears.find(y => y.id === migration.sourceYearId);\n                    const targetYear = academicYears.find(y => y.id === migration.targetYearId);\n                    const progressPercentage = migration.totalRecords > 0 \n                      ? (migration.migratedRecords / migration.totalRecords) * 100 \n                      : 0;\n\n                    return (\n                      <div key={migration.id} className=\"border rounded-lg p-4 space-y-3\">\n                        <div className=\"flex justify-between items-start\">\n                          <div className=\"space-y-1\">\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"font-medium\">\n                                {sourceYear?.name} → {targetYear?.name}\n                              </span>\n                              <Badge className={getStatusColor(migration.status)}>\n                                {migration.status === 'completed' && (language === \"ca\" ? 'Completada' : 'Completada')}\n                                {migration.status === 'in_progress' && (language === \"ca\" ? 'En Progrés' : 'En Progreso')}\n                                {migration.status === 'failed' && (language === \"ca\" ? 'Fallida' : 'Fallida')}\n                                {migration.status === 'pending' && (language === \"ca\" ? 'Pendent' : 'Pendiente')}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-gray-600\">\n                              {language === \"ca\" ? \"Tipus: \" : \"Tipo: \"}{migrationTypeOptions.find(opt => opt.id === migration.migrationType)?.label || migration.migrationType}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              {language === \"ca\" ? \"Iniciada: \" : \"Iniciada: \"}{new Date(migration.createdAt).toLocaleString('es-ES')}\n                              {migration.completedAt && (\n                                <> • {language === \"ca\" ? \"Completada: \" : \"Completada: \"}{new Date(migration.completedAt).toLocaleString('es-ES')}</>\n                              )}\n                            </p>\n                          </div>\n\n                          <div className=\"flex gap-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => deleteMigrationMutation.mutate(migration.id)}\n                              disabled={migration.status === 'in_progress' || deleteMigrationMutation.isPending}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n\n                        {migration.status === 'in_progress' && (\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Progreso</span>\n                              <span>{migration.migratedRecords}/{migration.totalRecords} registros</span>\n                            </div>\n                            <Progress value={progressPercentage} className=\"w-full\" />\n                          </div>\n                        )}\n\n                        {migration.status === 'completed' && (\n                          <div className=\"text-sm text-green-600\">\n                            ✓ {migration.migratedRecords} registros migrados exitosamente\n                          </div>\n                        )}\n\n                        {migration.status === 'failed' && migration.errors && migration.errors.length > 0 && (\n                          <div className=\"bg-red-50 border border-red-200 rounded p-3\">\n                            <p className=\"text-sm font-medium text-red-800 mb-2\">Errores:</p>\n                            <ul className=\"text-sm text-red-700 space-y-1\">\n                              {migration.errors.slice(0, 3).map((error, idx) => (\n                                <li key={idx}>• {error.message || error}</li>\n                              ))}\n                              {migration.errors.length > 3 && (\n                                <li>• Y {migration.errors.length - 3} errores más...</li>\n                              )}\n                            </ul>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":24870},"client/src/pages/EmployeeQRGenerator.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  QrCode, \n  Download, \n  Printer, \n  Users, \n  FileText,\n  RefreshCw,\n  User,\n  Building2\n} from 'lucide-react';\n\ninterface Employee {\n  id: string;\n  fullName: string;\n  email: string;\n  position?: string;\n  teacherCode?: string;\n  departmentId?: string;\n}\n\nexport default function EmployeeQRGenerator() {\n  const { user } = useAuth();\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  \n  const [selectedEmployees, setSelectedEmployees] = useState<string[]>([]);\n  const [qrSize, setQrSize] = useState<number>(200);\n  const [includeNames, setIncludeNames] = useState<boolean>(true);\n  const [includePosition, setIncludePosition] = useState<boolean>(true);\n  const [generatedQRs, setGeneratedQRs] = useState<Array<{employeeId: string, qrData: string, canvas?: HTMLCanvasElement}>>([]);\n  \n  const institutionId = user?.institutionId;\n\n  // Fetch employees\n  const { data: employees = [], isLoading } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\", institutionId],\n    enabled: !!institutionId && (user?.role === \"admin\" || user?.role === \"superadmin\"),\n  });\n\n  const generateQRCode = async (employeeId: string, employeeName: string) => {\n    try {\n      const QRCode = await import('qrcode');\n      const canvas = document.createElement('canvas');\n      \n      // QR data contains only employee ID for security\n      const qrData = employeeId;\n      \n      await QRCode.toCanvas(canvas, qrData, {\n        width: qrSize,\n        margin: 2,\n        color: {\n          dark: '#000000',\n          light: '#FFFFFF'\n        }\n      });\n      \n      return { employeeId, qrData, canvas };\n    } catch (error) {\n      console.error('Error generating QR code:', error);\n      throw error;\n    }\n  };\n\n  const generateAllQRs = async () => {\n    if (selectedEmployees.length === 0) {\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: language === \"ca\" ? \"Selecciona almenys un empleat\" : \"Selecciona al menos un empleado\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const qrs = [];\n      for (const employeeId of selectedEmployees) {\n        const employee = employees.find(e => e.id === employeeId);\n        if (employee) {\n          const qr = await generateQRCode(employeeId, employee.fullName);\n          qrs.push(qr);\n        }\n      }\n      setGeneratedQRs(qrs);\n      \n      toast({\n        title: language === \"ca\" ? \"Èxit\" : \"Éxito\",\n        description: language === \"ca\" ? \n          `${qrs.length} codis QR generats correctament` : \n          `${qrs.length} códigos QR generados correctamente`,\n      });\n    } catch (error) {\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: language === \"ca\" ? \n          \"Error generant els codis QR\" : \n          \"Error generando los códigos QR\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const downloadPrintablePDF = async () => {\n    if (generatedQRs.length === 0) return;\n\n    try {\n      const jsPDF = (await import('jspdf')).default;\n      const pdf = new jsPDF('p', 'mm', 'a4');\n      \n      const pageWidth = 210; // A4 width in mm\n      const pageHeight = 297; // A4 height in mm\n      const margin = 20;\n      const qrWidth = 60;\n      const qrHeight = includeNames ? 80 : 60;\n      const cols = 2;\n      const rows = Math.floor((pageHeight - 2 * margin) / qrHeight);\n      \n      let x = margin;\n      let y = margin;\n      let currentPage = 0;\n      \n      // Add title\n      pdf.setFontSize(16);\n      pdf.text('Codis QR de Fitxatge - fich.ai', pageWidth / 2, y, { align: 'center' });\n      y += 15;\n      \n      pdf.setFontSize(10);\n      pdf.text(`Data de generació: ${new Date().toLocaleDateString('ca-ES')}`, pageWidth / 2, y, { align: 'center' });\n      y += 15;\n\n      for (let i = 0; i < generatedQRs.length; i++) {\n        const qr = generatedQRs[i];\n        const employee = employees.find(e => e.id === qr.employeeId);\n        \n        if (!employee) continue;\n\n        // Check if we need a new page\n        if (i > 0 && i % (cols * rows) === 0) {\n          pdf.addPage();\n          y = margin;\n          \n          // Add title to new page\n          pdf.setFontSize(16);\n          pdf.text('Codis QR de Fitxatge - fich.ai', pageWidth / 2, y, { align: 'center' });\n          y += 15;\n          \n          pdf.setFontSize(10);\n          pdf.text(`Data de generació: ${new Date().toLocaleDateString('ca-ES')}`, pageWidth / 2, y, { align: 'center' });\n          y += 15;\n        }\n\n        // Calculate position\n        const col = i % cols;\n        const row = Math.floor((i % (cols * rows)) / cols);\n        x = margin + col * (qrWidth + 10);\n        y = margin + 30 + row * (qrHeight + 10);\n\n        // Add QR code\n        if (qr.canvas) {\n          const imgData = qr.canvas.toDataURL('image/png');\n          pdf.addImage(imgData, 'PNG', x, y, qrWidth, qrWidth);\n        }\n\n        // Add employee info\n        if (includeNames) {\n          pdf.setFontSize(8);\n          pdf.text(employee.fullName, x + qrWidth/2, y + qrWidth + 5, { align: 'center' });\n          \n          if (includePosition && employee.position) {\n            pdf.text(employee.position, x + qrWidth/2, y + qrWidth + 10, { align: 'center' });\n          }\n          \n          if (employee.teacherCode) {\n            pdf.text(`Codi: ${employee.teacherCode}`, x + qrWidth/2, y + qrWidth + 15, { align: 'center' });\n          }\n        }\n\n        // Add employee ID (small text)\n        pdf.setFontSize(6);\n        pdf.text(`ID: ${employee.id.substring(0, 8)}`, x, y + qrWidth + (includeNames ? 20 : 5));\n      }\n      \n      // Save PDF\n      pdf.save(`qr-codes-fitxatge-${new Date().toISOString().split('T')[0]}.pdf`);\n      \n      toast({\n        title: language === \"ca\" ? \"Èxit\" : \"Éxito\",\n        description: language === \"ca\" ? \"PDF descarregat correctament\" : \"PDF descargado correctamente\",\n      });\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: language === \"ca\" ? \"Error generant el PDF\" : \"Error generando el PDF\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const toggleEmployeeSelection = (employeeId: string) => {\n    setSelectedEmployees(prev => \n      prev.includes(employeeId) \n        ? prev.filter(id => id !== employeeId)\n        : [...prev, employeeId]\n    );\n  };\n\n  const selectAllEmployees = () => {\n    setSelectedEmployees(employees.map(e => e.id));\n  };\n\n  const clearSelection = () => {\n    setSelectedEmployees([]);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\">\n            {language === \"ca\" ? \"Generador de Codis QR\" : \"Generador de Códigos QR\"}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {language === \"ca\" ? \n              \"Genera codis QR únics per a cada empleat per al sistema de fitxatge\" : \n              \"Genera códigos QR únicos para cada empleado para el sistema de fichaje\"}\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 gap-6\">\n        {/* Configuration */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <QrCode className=\"h-5 w-5\" />\n              {language === \"ca\" ? \"Configuració\" : \"Configuración\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* QR Size */}\n            <div className=\"space-y-2\">\n              <Label>{language === \"ca\" ? \"Mida del QR (pixels)\" : \"Tamaño del QR (píxeles)\"}</Label>\n              <Select value={qrSize.toString()} onValueChange={(value) => setQrSize(parseInt(value))}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"150\">150px - {language === \"ca\" ? \"Petit\" : \"Pequeño\"}</SelectItem>\n                  <SelectItem value=\"200\">200px - {language === \"ca\" ? \"Mitjà\" : \"Medio\"}</SelectItem>\n                  <SelectItem value=\"250\">250px - {language === \"ca\" ? \"Gran\" : \"Grande\"}</SelectItem>\n                  <SelectItem value=\"300\">300px - {language === \"ca\" ? \"Extra Gran\" : \"Extra Grande\"}</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Options */}\n            <div className=\"space-y-3\">\n              <Label>{language === \"ca\" ? \"Opcions d'impressió\" : \"Opciones de impresión\"}</Label>\n              <div className=\"space-y-2\">\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={includeNames}\n                    onChange={(e) => setIncludeNames(e.target.checked)}\n                    className=\"rounded\"\n                  />\n                  <span className=\"text-sm\">{language === \"ca\" ? \"Incloure noms\" : \"Incluir nombres\"}</span>\n                </label>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={includePosition}\n                    onChange={(e) => setIncludePosition(e.target.checked)}\n                    className=\"rounded\"\n                  />\n                  <span className=\"text-sm\">{language === \"ca\" ? \"Incloure càrrec\" : \"Incluir cargo\"}</span>\n                </label>\n              </div>\n            </div>\n\n            {/* Selection Controls */}\n            <div className=\"space-y-2\">\n              <Label>{language === \"ca\" ? \"Selecció d'empleats\" : \"Selección de empleados\"}</Label>\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" onClick={selectAllEmployees} size=\"sm\">\n                  {language === \"ca\" ? \"Seleccionar tots\" : \"Seleccionar todos\"}\n                </Button>\n                <Button variant=\"outline\" onClick={clearSelection} size=\"sm\">\n                  {language === \"ca\" ? \"Netejar selecció\" : \"Limpiar selección\"}\n                </Button>\n              </div>\n              <p className=\"text-sm text-gray-600\">\n                {selectedEmployees.length} de {employees.length} empleats seleccionats\n              </p>\n            </div>\n\n            {/* Actions */}\n            <div className=\"space-y-2\">\n              <Button \n                onClick={generateAllQRs}\n                disabled={selectedEmployees.length === 0}\n                className=\"w-full\"\n              >\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                {language === \"ca\" ? \"Generar Codis QR\" : \"Generar Códigos QR\"}\n              </Button>\n              \n              {generatedQRs.length > 0 && (\n                <Button \n                  onClick={downloadPrintablePDF}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  {language === \"ca\" ? \"Descarregar PDF Imprimible\" : \"Descargar PDF Imprimible\"}\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Employee List */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              {language === \"ca\" ? \"Empleats\" : \"Empleados\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"max-h-96 overflow-y-auto space-y-2\">\n              {employees.map((employee) => (\n                <div\n                  key={employee.id}\n                  className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                    selectedEmployees.includes(employee.id)\n                      ? 'bg-blue-50 border-blue-200'\n                      : 'hover:bg-gray-50'\n                  }`}\n                  onClick={() => toggleEmployeeSelection(employee.id)}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedEmployees.includes(employee.id)}\n                      onChange={() => toggleEmployeeSelection(employee.id)}\n                      className=\"rounded\"\n                    />\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\">{employee.fullName}</p>\n                      <p className=\"text-sm text-gray-600\">{employee.email}</p>\n                      {employee.position && (\n                        <p className=\"text-xs text-gray-500\">{employee.position}</p>\n                      )}\n                      {employee.teacherCode && (\n                        <Badge variant=\"outline\" className=\"text-xs mt-1\">\n                          Codi: {employee.teacherCode}\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Generated QRs Preview */}\n      {generatedQRs.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5\" />\n              {language === \"ca\" ? \"Vista prèvia dels Codis QR\" : \"Vista previa de los Códigos QR\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n              {generatedQRs.map((qr) => {\n                const employee = employees.find(e => e.id === qr.employeeId);\n                return (\n                  <div key={qr.employeeId} className=\"text-center p-4 border rounded-lg\">\n                    {qr.canvas && (\n                      <img \n                        src={qr.canvas.toDataURL()} \n                        alt={`QR for ${employee?.fullName}`}\n                        className=\"w-full max-w-32 mx-auto mb-2\"\n                      />\n                    )}\n                    {includeNames && employee && (\n                      <div className=\"text-sm\">\n                        <p className=\"font-medium\">{employee.fullName}</p>\n                        {includePosition && employee.position && (\n                          <p className=\"text-gray-600\">{employee.position}</p>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n            \n            <Alert className=\"mt-4\">\n              <Printer className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>{language === \"ca\" ? \"Consell d'impressió:\" : \"Consejo de impresión:\"}</strong>{\" \"}\n                {language === \"ca\" ? \n                  \"Imprimeix en qualitat alta per assegurar que els codis QR siguin llegibles. Recomana paper A4 blanc.\" :\n                  \"Imprime en calidad alta para asegurar que los códigos QR sean legibles. Se recomienda papel A4 blanco.\"}\n              </AlertDescription>\n            </Alert>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":16323},"client/src/pages/PublicQRAttendance.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Link } from 'wouter';\nimport { \n  QrCode, \n  Camera, \n  Scan, \n  Clock, \n  CheckCircle, \n  XCircle,\n  Timer,\n  User,\n  Smartphone,\n  AlertTriangle,\n  LogIn,\n  LogOut\n} from 'lucide-react';\n\nexport default function PublicQRAttendance() {\n  console.log(\"🚀 PublicQRAttendance component mounted/re-rendered at:\", new Date().toISOString());\n  \n  const { toast } = useToast();\n  \n  const [qrInput, setQrInput] = useState('');\n  const [processing, setProcessing] = useState(false);\n  const [lastResult, setLastResult] = useState<any>(null);\n  const [showResult, setShowResult] = useState(false);\n  const [displayTime, setDisplayTime] = useState(new Date());\n  \n  // Add a timer like in App.tsx for the clock\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  \n  useEffect(() => {\n    console.log(\"🕐 CLOCK EFFECT: Setting up timer\");\n    // Start the clock timer\n    timerRef.current = setInterval(() => {\n      const newTime = new Date();\n      // TEMPORALLY DISABLE CLOCK LOGS TO REDUCE CONSOLE SPAM\n      // console.log(\"⏰ CLOCK UPDATE:\", newTime.toLocaleTimeString());\n      setDisplayTime(newTime);\n    }, 1000);\n    \n    return () => {\n      console.log(\"🕐 CLOCK EFFECT: Cleaning up timer\");\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, []);\n\n  // QR Processing mutation\n  const processQRMutation = useMutation({\n    mutationFn: async (qrData: string) => {\n      const currentTimestamp = new Date();\n      console.log(\"🕐 FRONTEND QR TIMESTAMP DEBUG:\");\n      console.log(\"  Frontend current time:\", currentTimestamp.toISOString());\n      console.log(\"  Frontend local time:\", currentTimestamp.toLocaleString('es-ES', { timeZone: 'Europe/Madrid' }));\n      console.log(\"  QR Data:\", qrData.trim());\n      \n      const response = await apiRequest(\"POST\", \"/api/attendance/qr-process\", {\n        qrData: qrData.trim(),\n        timestamp: currentTimestamp.toISOString(),\n        location: window.location.origin\n      });\n      \n      // Parse JSON if it's a Response object\n      const data = response instanceof Response ? await response.json() : response;\n      console.log(\"✅ QR RESPONSE PARSED:\", data);\n      return data;\n    },\n    onSuccess: (data) => {\n      console.log(\"🎉 QR SUCCESS DATA:\", JSON.stringify(data, null, 2));\n      setLastResult(data);\n      setShowResult(true);\n      \n      // DEBUG LOGS FOR MODAL ISSUE\n      console.log(\"🔍 TOAST DEBUG - Success toast about to show\");\n      console.log(\"🔍 TOAST DEBUG - data.type:\", data.type);\n      console.log(\"🔍 TOAST DEBUG - data.employeeName:\", data.employeeName);\n      \n      toast({\n        title: \"Fitxatge registrat\",\n        description: `${data.type === 'check_in' ? 'Entrada' : 'Sortida'} registrada correctament per ${data.employeeName}`,\n      });\n      \n      console.log(\"🔍 TOAST DEBUG - Toast called, clearing form\");\n      setQrInput('');\n      setProcessing(false);\n      \n      // Hide result after 5 seconds\n      setTimeout(() => {\n        console.log(\"🔍 TIMEOUT DEBUG - Hiding result after 5 seconds\");\n        setShowResult(false);\n      }, 5000);\n    },\n    onError: (error: any) => {\n      console.log(\"❌ QR ERROR:\", error);\n      console.log(\"❌ Error details:\", JSON.stringify(error, null, 2));\n      \n      // DEBUG LOGS FOR MODAL ISSUE  \n      console.log(\"🔍 TOAST DEBUG - Error toast about to show\");\n      console.log(\"🔍 TOAST DEBUG - error.message:\", error.message);\n      \n      setLastResult({ error: true, message: error.message });\n      setShowResult(true);\n      toast({\n        title: \"Error\",\n        description: error.message || 'Error al processar el codi QR',\n        variant: \"destructive\",\n      });\n      setProcessing(false);\n      \n      // Hide error after 5 seconds\n      setTimeout(() => {\n        console.log(\"🔍 TIMEOUT DEBUG - Hiding error after 5 seconds\");\n        setShowResult(false);\n      }, 5000);\n    },\n  });\n\n  const handleQRSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"🎯 QR FORM SUBMITTED!\");\n    console.log(\"🎯 QR Input:\", qrInput);\n    \n    if (!qrInput.trim()) {\n      console.log(\"🎯 Empty QR input!\");\n      toast({\n        title: \"Error\",\n        description: \"Introdueix un codi QR vàlid\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    console.log(\"🎯 Starting QR processing...\");\n    setProcessing(true);\n    // Update display time when processing starts\n    setDisplayTime(new Date());\n    processQRMutation.mutate(qrInput);\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString('ca-ES', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n\n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString('ca-ES', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">fich.ai</h1>\n          <h2 className=\"text-xl font-semibold text-gray-700 mb-1\">Fitxatge per Codi QR</h2>\n          <p className=\"text-sm text-gray-600\">Sistema de control d'assistència</p>\n        </div>\n\n        {/* Current Time Display - FIXED */}\n        <Card className=\"bg-white/80 backdrop-blur-sm border-2 border-blue-200\">\n          <CardContent className=\"text-center p-6\">\n            <Clock className=\"h-8 w-8 text-blue-600 mx-auto mb-3\" />\n            <div className=\"text-2xl font-mono font-bold text-blue-800 mb-1\">\n              {formatTime(displayTime)}\n            </div>\n            <div className=\"text-sm text-blue-600\">\n              {formatDate(displayTime)}\n            </div>\n            <div className=\"text-xs text-gray-500 mt-2\">\n              Últma actualització: {displayTime.toISOString()}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* QR Scanner */}\n        <Card className=\"bg-white/80 backdrop-blur-sm border-2 border-blue-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-lg\">\n              <Scan className=\"h-5 w-5 text-blue-600\" />\n              Escanejar Codi QR Personal\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <form onSubmit={handleQRSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"qr-input\" className=\"text-sm font-medium\">\n                  Introdueix el teu codi QR personal únic:\n                </Label>\n                <div className=\"text-xs text-orange-600 mb-2 font-medium\">\n                  ⚠️ Només pots introduir el teu propi codi QR personal. El fitxatge és únic i intransferible.\n                </div>\n                <Input\n                  id=\"qr-input\"\n                  type=\"text\"\n                  value={qrInput}\n                  onChange={(e) => setQrInput(e.target.value)}\n                  placeholder=\"Escaneja o introdueix el codi...\"\n                  className=\"text-center font-mono\"\n                  disabled={processing}\n                  autoFocus\n                />\n              </div>\n              \n              <Button \n                type=\"submit\"\n                disabled={!qrInput.trim() || processing}\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-3\"\n                size=\"lg\"\n              >\n                {processing ? (\n                  <>\n                    <Timer className=\"h-5 w-5 mr-2 animate-spin\" />\n                    Processant...\n                  </>\n                ) : (\n                  <>\n                    <QrCode className=\"h-5 w-5 mr-2\" />\n                    Processar Fitxatge\n                  </>\n                )}\n              </Button>\n            </form>\n\n            {/* Instructions */}\n            <Alert className=\"border-orange-200 bg-orange-50\">\n              <Smartphone className=\"h-4 w-4\" />\n              <AlertDescription className=\"text-orange-800\">\n                <strong>Important:</strong> Només pots utilitzar el teu propi codi QR personal. El fitxatge és únic i intransferible per empleat segons la normativa vigent.\n              </AlertDescription>\n            </Alert>\n          </CardContent>\n        </Card>\n\n        {/* Last Result - Only show when showResult is true */}\n        {showResult && lastResult && (\n          <Card className={`bg-white/80 backdrop-blur-sm border-2 ${\n            lastResult.error ? 'border-red-200' : 'border-green-200'\n          }`}>\n            <CardContent className=\"p-4\">\n              {lastResult.error ? (\n                <div className=\"flex items-center gap-3 text-red-700\">\n                  <XCircle className=\"h-6 w-6 flex-shrink-0\" />\n                  <div>\n                    <p className=\"font-medium\">Error de fitxatge</p>\n                    <p className=\"text-sm\">{lastResult.message}</p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"flex items-center gap-3 text-green-700\">\n                  <CheckCircle className=\"h-6 w-6 flex-shrink-0\" />\n                  <div>\n                    <p className=\"font-medium\">\n                      {lastResult.type === 'check_in' ? '✓ Entrada registrada' : '✓ Sortida registrada'}\n                    </p>\n                    <p className=\"text-sm\">\n                      {lastResult.employeeName} - {new Date(lastResult.timestamp).toLocaleTimeString('ca-ES')}\n                    </p>\n                    {lastResult.isLate && (\n                      <p className=\"text-sm text-orange-600\">\n                        ⚠️ Arribada amb retard ({lastResult.lateMinutes} min)\n                      </p>\n                    )}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Instructions */}\n        <Card className=\"bg-white/80 backdrop-blur-sm border-2 border-gray-200\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Instruccions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3 text-sm\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0\">1</div>\n              <div>\n                <p className=\"font-medium\">Codi QR personal</p>\n                <p className=\"text-gray-600\">Cada treballador té un codi QR únic i personal</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0\">2</div>\n              <div>\n                <p className=\"font-medium\">Fitxatge automàtic</p>\n                <p className=\"text-gray-600\">El sistema detecta automàticament entrada o sortida</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0\">3</div>\n              <div>\n                <p className=\"font-medium\">Unipersonal</p>\n                <p className=\"text-gray-600\">Cada persona només pot fitxar per si mateixa</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Navigation back to login */}\n        <div className=\"text-center\">\n          <Link to=\"/\">\n            <Button variant=\"outline\" className=\"text-blue-600 border-blue-600 hover:bg-blue-50\">\n              ← Tornar a la pàgina principal\n            </Button>\n          </Link>\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center text-xs text-gray-500\">\n          <p>Sistema de Control d'Assistència fich.ai</p>\n          <p>Compleix la normativa de protecció de dades</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12716},"client/src/pages/MyQRCode.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { useToast } from '@/hooks/use-toast';\nimport { t } from '@/lib/i18n';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  QrCode, \n  Download, \n  Printer, \n  User,\n  Building2,\n  Info,\n  Copy,\n  ExternalLink,\n  Clock,\n  UserCheck\n} from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function MyQRCode() {\n  const { user } = useAuth();\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  \n  const [qrCanvas, setQrCanvas] = useState<HTMLCanvasElement | null>(null);\n  const [qrSize] = useState<number>(256);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  const generateMyQR = async () => {\n    if (!user?.id) return;\n    \n    try {\n      const QRCode = await import('qrcode');\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      \n      // QR data amb data actual per complir normativa vigent (regeneració diària)\n      const today = new Date().toISOString().split('T')[0]; // Format: YYYY-MM-DD\n      const qrData = `${user.id}-${today}`;\n      \n      await QRCode.toCanvas(canvas, qrData, {\n        width: qrSize,\n        margin: 2,\n        color: {\n          dark: '#000000',\n          light: '#FFFFFF'\n        }\n      });\n      \n      setQrCanvas(canvas);\n      \n      // Comentem el toast \"Èxit\" que causa problemes de modal\n      // toast({\n      //   title: language === \"ca\" ? \"Èxit\" : \"Éxito\",\n      //   description: language === \"ca\" ? \n      //     \"El teu codi QR s'ha generat correctament\" : \n      //     \"Tu código QR se ha generado correctamente\",\n      // });\n    } catch (error) {\n      console.error('Error generating QR code:', error);\n      toast({\n        title: language === \"ca\" ? \"Error\" : \"Error\",\n        description: language === \"ca\" ? \n          \"Error generant el codi QR\" : \n          \"Error generando el código QR\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const downloadQR = () => {\n    if (!qrCanvas || !user) return;\n    \n    const link = document.createElement('a');\n    link.download = `QR_${user.firstName}_${user.lastName}.png`;\n    link.href = qrCanvas.toDataURL();\n    link.click();\n  };\n\n  const printQR = () => {\n    if (!qrCanvas || !user) return;\n    \n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n    \n    const imgData = qrCanvas.toDataURL();\n    printWindow.document.write(`\n      <html>\n        <head>\n          <title>Codi QR - ${user.firstName} ${user.lastName}</title>\n          <style>\n            body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }\n            .qr-container { margin: 20px auto; }\n            .employee-info { margin-bottom: 20px; }\n            h1 { color: #1f2937; }\n            p { margin: 5px 0; }\n            @media print {\n              body { margin: 0; }\n            }\n          </style>\n        </head>\n        <body>\n          <h1>Codi QR Personal</h1>\n          <div class=\"employee-info\">\n            <p><strong>Nom:</strong> ${user.firstName} ${user.lastName}</p>\n            <p><strong>Email:</strong> ${user.email}</p>\n            <p><strong>ID:</strong> ${user.id}</p>\n          </div>\n          <div class=\"qr-container\">\n            <img src=\"${imgData}\" alt=\"Codi QR Personal\" />\n          </div>\n          <p><small>Sistema fich.ai - Control d'Assistència</small></p>\n        </body>\n      </html>\n    `);\n    printWindow.document.close();\n    printWindow.print();\n  };\n\n  const copyMyId = () => {\n    if (!user?.id) return;\n    \n    navigator.clipboard.writeText(user.id).then(() => {\n      toast({\n        title: language === \"ca\" ? \"Copiat\" : \"Copiado\",\n        description: language === \"ca\" ? \n          \"El teu ID s'ha copiat al portapapers\" : \n          \"Tu ID se ha copiado al portapapeles\",\n      });\n    });\n  };\n\n  useEffect(() => {\n    if (user?.id) {\n      generateMyQR();\n    }\n  }, [user?.id]);\n\n  // Clock timer\n  useEffect(() => {\n    timerRef.current = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    \n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, []);\n\n  if (!user) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-md mx-auto\">\n          <Alert className=\"border-orange-200 bg-orange-50\">\n            <Info className=\"h-4 w-4\" />\n            <AlertDescription className=\"text-orange-800\">\n              Has d'estar autenticat per veure el teu codi QR personal.\n            </AlertDescription>\n          </Alert>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            {language === \"ca\" ? \"El Meu Codi QR\" : \"Mi Código QR\"}\n          </h1>\n          <p className=\"text-gray-600\">\n            {language === \"ca\" \n              ? \"El teu codi QR personal per al fitxatge d'assistència\"\n              : \"Tu código QR personal para el fichaje de asistencia\"}\n          </p>\n        </div>\n\n        {/* Current Time Display */}\n        <Card className=\"mb-6 bg-blue-50 border-blue-200\">\n          <CardContent className=\"text-center p-6\">\n            <Clock className=\"h-8 w-8 text-blue-600 mx-auto mb-3\" />\n            <div className=\"text-2xl font-mono font-bold text-blue-800 mb-1\">\n              {currentTime.toLocaleTimeString('ca-ES', {\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit'\n              })}\n            </div>\n            <div className=\"text-sm text-blue-600\">\n              {currentTime.toLocaleDateString('ca-ES', {\n                weekday: 'long',\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric'\n              })}\n            </div>\n            <div className=\"text-xs text-orange-600 mt-2 font-medium\">\n              ⚖️ QR generat avui - Compleix normativa vigent\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Employee Info */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <User className=\"mr-2 h-5 w-5 text-blue-600\" />\n              {language === \"ca\" ? \"Informació Personal\" : \"Información Personal\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Nom complet</p>\n                <p className=\"font-medium\">{user.firstName} {user.lastName}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Email</p>\n                <p className=\"font-medium\">{user.email}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Rol</p>\n                <Badge variant=\"secondary\">{t(user.role, language)}</Badge>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">ID Personal</p>\n                <div className=\"flex items-center gap-2\">\n                  <code className=\"text-xs bg-gray-100 px-2 py-1 rounded\">{user.id}</code>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={copyMyId}\n                    className=\"p-1 h-6 w-6\"\n                  >\n                    <Copy className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* QR Code Display */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <QrCode className=\"mr-2 h-5 w-5 text-green-600\" />\n                {language === \"ca\" ? \"Codi QR Personal\" : \"Código QR Personal\"}\n              </div>\n              <Badge variant=\"outline\" className=\"text-orange-600 border-orange-300\">\n                Vàlid avui: {new Date().toLocaleDateString('ca-ES')}\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center\">\n              <div className=\"inline-block p-4 bg-white rounded-lg border-2 border-dashed border-gray-300 mb-4\">\n                <canvas \n                  ref={canvasRef}\n                  className=\"mx-auto\"\n                  style={{ imageRendering: 'pixelated' }}\n                />\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                <Button\n                  onClick={downloadQR}\n                  disabled={!qrCanvas}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  {language === \"ca\" ? \"Descarregar PNG\" : \"Descargar PNG\"}\n                </Button>\n                \n                <Button\n                  onClick={printQR}\n                  disabled={!qrCanvas}\n                  variant=\"outline\"\n                  className=\"border-blue-600 text-blue-600 hover:bg-blue-50\"\n                >\n                  <Printer className=\"h-4 w-4 mr-2\" />\n                  {language === \"ca\" ? \"Imprimir\" : \"Imprimir\"}\n                </Button>\n              </div>\n              \n              {/* Quick scanner link */}\n              <div className=\"mt-6 text-center\">\n                <Link href=\"/qr-scanner\">\n                  <Button variant=\"default\" size=\"lg\" className=\"bg-green-600 hover:bg-green-700 text-white\">\n                    <UserCheck className=\"mr-2 h-5 w-5\" />\n                    {language === \"ca\" ? \"Obrir Escàner Mòbil\" : \"Abrir Escáner Móvil\"}\n                  </Button>\n                </Link>\n                <p className=\"text-sm text-green-600 mt-2 font-medium\">\n                  ⚡ {language === \"ca\" ? \"Fitxatge ràpid des del mòbil\" : \"Fichaje rápido desde móvil\"}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* How to Use */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>\n              {language === \"ca\" ? \"Com utilitzar-lo\" : \"Cómo utilizarlo\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0\">1</div>\n              <div>\n                <p className=\"font-medium\">Descarrega o imprimeix</p>\n                <p className=\"text-sm text-gray-600\">\n                  Pots descarregar el QR com a imatge o imprimir-lo. \n                  <strong className=\"text-orange-600\"> Important: Genera un nou QR cada dia per complir la normativa.</strong>\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0\">2</div>\n              <div>\n                <p className=\"font-medium\">Accedeix al fitxatge públic</p>\n                <p className=\"text-sm text-gray-600\">\n                  Ves a la pàgina de fitxatge QR pública (no cal login)\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0\">3</div>\n              <div>\n                <p className=\"font-medium\">Escaneja o introdueix</p>\n                <p className=\"text-sm text-gray-600\">\n                  Escaneja el QR amb el mòbil o introdueix manualment el teu ID personal\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Access */}\n        <Card className=\"bg-green-50 border-green-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium text-green-800\">Accés ràpid al fitxatge</p>\n                <p className=\"text-sm text-green-700\">Vés directament a la pàgina de fitxatge QR</p>\n              </div>\n              <Button\n                asChild\n                className=\"bg-green-600 hover:bg-green-700 text-white\"\n              >\n                <a href=\"/public-qr\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\n                  Obrir fitxatge\n                </a>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13420},"client/src/pages/QRAttendance.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { t } from '@/lib/i18n';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { \n  QrCode, \n  Camera, \n  Scan, \n  Clock, \n  CheckCircle, \n  Timer,\n  User,\n  Smartphone,\n  AlertTriangle,\n  LogIn,\n  LogOut,\n  RefreshCw\n} from 'lucide-react';\n\nexport default function QRAttendancePage() {\n  const { user } = useAuth();\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [qrCodeData, setQrCodeData] = useState<string>('');\n  const [showQRCode, setShowQRCode] = useState(false);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [manualQRCode, setManualQRCode] = useState('');\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  // Update time every second\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Generate QR code data\n  useEffect(() => {\n    if (user && showQRCode) {\n      const qrData = {\n        employeeId: user.id,\n        institutionId: user.institutionId || '',\n        timestamp: Date.now(),\n        location: window.location.origin\n      };\n      setQrCodeData(JSON.stringify(qrData));\n    }\n  }, [user, showQRCode]);\n\n  // Generate QR code for display\n  const generateQRCode = async () => {\n    if (!qrCodeData || !canvasRef.current) return;\n    \n    try {\n      const QRCode = await import('qrcode');\n      await QRCode.toCanvas(canvasRef.current, qrCodeData, {\n        width: 256,\n        margin: 2,\n        color: {\n          dark: '#000000',\n          light: '#FFFFFF'\n        }\n      });\n    } catch (error) {\n      console.error('Error generating QR code:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (showQRCode && qrCodeData) {\n      generateQRCode();\n    }\n  }, [showQRCode, qrCodeData]);\n\n  // Attendance mutation\n  const attendanceMutation = useMutation({\n    mutationFn: async (data: {\n      employeeId: string;\n      type: \"check_in\" | \"check_out\";\n      timestamp: Date;\n      method: \"qr\";\n    }) => {\n      return await apiRequest(\"POST\", \"/api/attendance\", {\n        ...data,\n        location: window.location.origin\n      });\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: t(\"success\", language),\n        description: `${data.type === 'check_in' ? 'Entrada' : 'Sortida'} registrada per QR`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance\"] });\n      setManualQRCode('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: t(\"error\", language),\n        description: error.message || 'Error al registrar l\\'assistència',\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Process manual QR code\n  const processManualQR = async () => {\n    if (!manualQRCode.trim()) {\n      toast({\n        title: t(\"error\", language),\n        description: 'Si us plau introdueix un codi QR vàlid',\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const qrData = JSON.parse(manualQRCode);\n      \n      // Validate QR code structure\n      if (!qrData.employeeId || !qrData.institutionId) {\n        throw new Error('Codi QR invàlid');\n      }\n\n      // Check if QR is not too old (5 minutes max)\n      const qrAge = Date.now() - qrData.timestamp;\n      if (qrAge > 5 * 60 * 1000) {\n        throw new Error('Codi QR expirat (màxim 5 minuts)');\n      }\n\n      // Verify institution matches\n      if (user?.institutionId && qrData.institutionId !== user.institutionId) {\n        throw new Error('Codi QR d\\'una altra institució');\n      }\n\n      // Get last attendance to determine type\n      const attendanceRecords = await apiRequest(\"GET\", `/api/attendance/${qrData.employeeId}`);\n      \n      const today = new Date().toDateString();\n      const todayRecords = Array.isArray(attendanceRecords) \n        ? attendanceRecords.filter((record: any) => \n            new Date(record.timestamp).toDateString() === today\n          )\n        : [];\n      \n      const lastRecord = todayRecords.length > 0 \n        ? todayRecords.sort((a: any, b: any) => \n            new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n          )[0]\n        : null;\n\n      // Determine attendance type\n      const attendanceType: \"check_in\" | \"check_out\" = (!lastRecord || lastRecord.type === 'check_out') \n        ? 'check_in' \n        : 'check_out';\n\n      // Submit attendance\n      await attendanceMutation.mutateAsync({\n        employeeId: qrData.employeeId,\n        type: attendanceType,\n        timestamp: new Date(),\n        method: \"qr\"\n      });\n\n    } catch (error: any) {\n      console.error('Error processing QR:', error);\n      toast({\n        title: t(\"error\", language),\n        description: error.message || 'Error al processar el codi QR',\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString('ca-ES', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">Fitxatge amb Codi QR Personal</h1>\n        <p className=\"text-muted-foreground\">Sistema ràpid i eficient de control d'assistència - Només per a ús personal</p>\n      </div>\n\n      {/* Current Time Display */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"text-center p-6\">\n          <Clock className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n          <div className=\"text-4xl font-mono font-bold text-primary mb-2\">\n            {formatTime(currentTime)}\n          </div>\n          <div className=\"text-sm text-muted-foreground\">\n            {currentTime.toLocaleDateString(language === 'ca' ? 'ca-ES' : 'es-ES', {\n              weekday: 'long',\n              year: 'numeric',\n              month: 'long',\n              day: 'numeric'\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* QR Code Tabs */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <QrCode className=\"h-5 w-5\" />\n            Sistema de Fitxatge QR Personal\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"generate\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-1\">\n              <TabsTrigger value=\"generate\" className=\"flex items-center gap-2\">\n                <QrCode className=\"h-4 w-4\" />\n                El Meu Codi QR Personal\n              </TabsTrigger>\n            </TabsList>\n            \n            {/* Generate QR Tab */}\n            <TabsContent value=\"generate\" className=\"space-y-6\">\n              <div className=\"text-center space-y-4\">\n                <Alert className=\"border-orange-200 bg-orange-50\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription className=\"text-orange-800\">\n                    <strong>Important:</strong> Aquest codi QR és personal i únic per a tu. Només pots utilitzar-lo per al teu propi fitxatge segons la normativa vigent.\n                  </AlertDescription>\n                </Alert>\n                \n                {showQRCode && (\n                  <div className=\"bg-white p-6 rounded-lg border-2 border-dashed border-gray-300 max-w-xs mx-auto\">\n                    <canvas \n                      ref={canvasRef}\n                      className=\"w-full h-auto\"\n                    />\n                  </div>\n                )}\n\n                <div className=\"space-y-4\">\n                  <Button \n                    onClick={() => {\n                      setShowQRCode(!showQRCode);\n                      if (!showQRCode) {\n                        generateQRCode();\n                      }\n                    }}\n                    disabled={!user}\n                    className=\"flex items-center gap-2\"\n                    variant={showQRCode ? \"outline\" : \"default\"}\n                    size=\"lg\"\n                  >\n                    <QrCode className=\"h-5 w-5\" />\n                    {showQRCode ? \"Amagar QR\" : \"Generar el Meu QR\"}\n                  </Button>\n                  \n                  {showQRCode && (\n                    <div className=\"space-y-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        <Timer className=\"h-3 w-3 mr-1\" />\n                        Vàlid per 5 minuts\n                      </Badge>\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground justify-center\">\n                        <User className=\"h-4 w-4\" />\n                        {user?.firstName} {user?.lastName}\n                      </div>\n                      <Alert className=\"border-green-200 bg-green-50\">\n                        <CheckCircle className=\"h-4 w-4\" />\n                        <AlertDescription className=\"text-green-800\">\n                          <strong>Codi generat!</strong> Utilitza aquest QR per fitxar des d'altres dispositius amb la mateixa sessió.\n                        </AlertDescription>\n                      </Alert>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </TabsContent>\n\n\n          </Tabs>\n        </CardContent>\n      </Card>\n\n      {/* Instructions */}\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Instruccions d'Ús</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-primary\">Per generar el teu QR personal:</h4>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0\">1</div>\n                <div>\n                  <p className=\"text-sm\">Fes clic a \"Generar el Meu QR\"</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0\">2</div>\n                <div>\n                  <p className=\"text-sm\">Utilitza el codi QR generat només per al teu propi fitxatge</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0\">3</div>\n                <div>\n                  <p className=\"text-sm\">El codi és vàlid per 5 minuts per seguretat</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <Alert className=\"mt-4 border-orange-200 bg-orange-50\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription className=\"text-orange-800\">\n              <strong>Important:</strong> Els codis QR són vàlids per 5 minuts per seguretat i només per al propi fitxatge.\n              El sistema detecta automàticament si és entrada o sortida segons l'últim registre personal.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12058},"client/src/pages/QRScanner.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Input } from '@/components/ui/input';\nimport { \n  QrCode, \n  Camera, \n  CheckCircle, \n  Clock, \n  User,\n  AlertTriangle,\n  Smartphone,\n  ArrowLeft,\n  FileText\n} from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function QRScanner() {\n  const { user } = useAuth();\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [isScanning, setIsScanning] = useState(false);\n  const [scannedCode, setScannedCode] = useState('');\n  const [lastResult, setLastResult] = useState<any>(null);\n  const [manualInput, setManualInput] = useState('');\n  const [showManualInput, setShowManualInput] = useState(false);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  // Update time every second\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // QR Processing mutation - uses authenticated session\n  const processQRMutation = useMutation({\n    mutationFn: async (qrData: string) => {\n      console.log(\"🔥 PROCESSING QR WITH USER SESSION:\", user?.id);\n      \n      // Extract employee ID from QR code (format: userId-YYYY-MM-DD)\n      const qrParts = qrData.trim().split('-');\n      if (qrParts.length < 4) {\n        throw new Error('Format del codi QR no vàlid');\n      }\n      \n      const userIdParts = qrParts.slice(0, -3);\n      const employeeId = userIdParts.join('-');\n      const qrDate = `${qrParts[qrParts.length-3]}-${qrParts[qrParts.length-2]}-${qrParts[qrParts.length-1]}`;\n      const todayDate = new Date().toISOString().split('T')[0];\n      \n      // Validate QR is from today\n      if (qrDate !== todayDate) {\n        throw new Error('Aquest codi QR ha caducat. Genera un nou codi QR.');\n      }\n      \n      // SECURITY: Only allow user to scan their own QR code\n      if (employeeId !== user?.id) {\n        throw new Error('Només pots utilitzar el teu propi codi QR personal segons la normativa vigent.');\n      }\n      \n      // Process the QR code with the authenticated session\n      return await apiRequest(\"POST\", \"/api/attendance/qr-process\", {\n        qrData: qrData.trim(),\n        timestamp: new Date().toISOString(),\n        location: window.location.origin\n      });\n    },\n    onSuccess: (data: any) => {\n      console.log(\"✅ QR PROCESSED SUCCESSFULLY:\", data);\n      setLastResult(data);\n      \n      toast({\n        title: \"Fitxatge Registrat!\",\n        description: `${data.type === 'check_in' ? 'Entrada' : 'Sortida'} registrada correctament`,\n      });\n      \n      // Invalidate queries to refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance\", user?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      \n      // Clear inputs\n      setScannedCode('');\n      setManualInput('');\n    },\n    onError: (error: any) => {\n      console.error('❌ QR PROCESSING ERROR:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || 'Error processant el codi QR',\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Start camera for scanning\n  const startScanning = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        video: { facingMode: 'environment' } // Use back camera on mobile\n      });\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        setIsScanning(true);\n      }\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n      toast({\n        title: \"Error de Càmera\",\n        description: \"No es pot accedir a la càmera. Utilitza l'entrada manual.\",\n        variant: \"destructive\",\n      });\n      setShowManualInput(true);\n    }\n  };\n\n  // Stop camera\n  const stopScanning = () => {\n    if (videoRef.current?.srcObject) {\n      const stream = videoRef.current.srcObject as MediaStream;\n      stream.getTracks().forEach(track => track.stop());\n      videoRef.current.srcObject = null;\n    }\n    setIsScanning(false);\n  };\n\n  // Process manual input\n  const processManualInput = () => {\n    if (!manualInput.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Introdueix un codi QR vàlid\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    processQRMutation.mutate(manualInput.trim());\n  };\n\n  // Generate today's QR for the current user\n  const generateMyQR = () => {\n    if (!user?.id) return '';\n    const today = new Date().toISOString().split('T')[0];\n    return `${user.id}-${today}`;\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString('ca-ES', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <Link href=\"/dashboard\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Escàner QR Mòbil</h1>\n            <p className=\"text-sm text-muted-foreground\">Apunta al teu codi QR per fitxar</p>\n          </div>\n        </div>\n        \n        {/* Current Time */}\n        <Card className=\"bg-primary/5 border-primary/20\">\n          <CardContent className=\"text-center p-4\">\n            <div className=\"text-2xl font-mono font-bold text-primary\">\n              {formatTime(currentTime)}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">\n              {currentTime.toLocaleDateString('ca-ES', {\n                weekday: 'long',\n                day: 'numeric',\n                month: 'long'\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* User Info */}\n      <Card className=\"mb-4\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center gap-3\">\n            <User className=\"h-5 w-5 text-primary\" />\n            <div>\n              <div className=\"font-medium\">{user?.firstName} {user?.lastName}</div>\n              <div className=\"text-sm text-muted-foreground\">{user?.email}</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Success Result */}\n      {lastResult && (\n        <Alert className=\"mb-4 border-green-200 bg-green-50\">\n          <CheckCircle className=\"h-4 w-4\" />\n          <AlertDescription className=\"text-green-800\">\n            <strong>Fitxatge registrat!</strong> {lastResult.type === 'check_in' ? 'Entrada' : 'Sortida'} a les {new Date(lastResult.timestamp).toLocaleTimeString('ca-ES')}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Scanner Section */}\n      <Card className=\"mb-4\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <QrCode className=\"h-5 w-5\" />\n            Escanejar Codi QR\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Camera Scanner */}\n          {!isScanning ? (\n            <div className=\"text-center space-y-4\">\n              <Button \n                onClick={startScanning}\n                className=\"w-full h-12\"\n                size=\"lg\"\n              >\n                <Camera className=\"mr-2 h-5 w-5\" />\n                Obrir Càmera\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <div className=\"relative\">\n                <video \n                  ref={videoRef}\n                  autoPlay \n                  playsInline\n                  className=\"w-full rounded-lg border-2 border-dashed border-primary\"\n                  style={{ maxHeight: '300px' }}\n                />\n                <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n                  <div className=\"w-48 h-48 border-2 border-primary rounded-lg\"></div>\n                </div>\n              </div>\n              \n              <Button \n                onClick={stopScanning}\n                variant=\"outline\"\n                className=\"w-full\"\n              >\n                Tancar Càmera\n              </Button>\n            </div>\n          )}\n\n          {/* Manual Input Toggle */}\n          <div className=\"text-center\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setShowManualInput(!showManualInput)}\n              className=\"text-sm\"\n            >\n              <FileText className=\"mr-2 h-4 w-4\" />\n              {showManualInput ? 'Amagar entrada manual' : 'Entrada manual'}\n            </Button>\n          </div>\n\n          {/* Manual Input */}\n          {showManualInput && (\n            <div className=\"space-y-3 pt-4 border-t\">\n              <Input\n                placeholder=\"Introdueix o enganxa el codi QR...\"\n                value={manualInput}\n                onChange={(e) => setManualInput(e.target.value)}\n                className=\"font-mono text-sm\"\n              />\n              <Button \n                onClick={processManualInput}\n                disabled={!manualInput.trim() || processQRMutation.isPending}\n                className=\"w-full\"\n              >\n                {processQRMutation.isPending ? 'Processant...' : 'Processar Codi'}\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Instructions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Com utilitzar</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-3\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0\">1</div>\n              <div>\n                <p className=\"text-sm\">Genera el teu codi QR des de l'àrea personal</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0\">2</div>\n              <div>\n                <p className=\"text-sm\">Obre la càmera i apunta al codi QR</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0\">3</div>\n              <div>\n                <p className=\"text-sm\">El sistema detectarà automàticament si és entrada o sortida</p>\n              </div>\n            </div>\n          </div>\n          \n          <Alert className=\"border-orange-200 bg-orange-50\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription className=\"text-orange-800\">\n              <strong>Important:</strong> Només pots utilitzar el teu propi codi QR personal. Els codis caduquen diàriament per complir la normativa vigent.\n            </AlertDescription>\n          </Alert>\n\n          {/* Quick access to generate QR */}\n          <div className=\"pt-4 border-t\">\n            <Link href=\"/my-qr\">\n              <Button variant=\"outline\" className=\"w-full\">\n                <QrCode className=\"mr-2 h-4 w-4\" />\n                Anar a generar el meu QR\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12129},"client/src/pages/UnifiedQR.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Input } from '@/components/ui/input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  QrCode, \n  Camera, \n  Download, \n  Printer, \n  User,\n  Building2,\n  Info,\n  Copy,\n  Clock,\n  UserCheck,\n  ArrowLeft,\n  AlertTriangle,\n  Scan,\n  Eye,\n  EyeOff\n} from 'lucide-react';\nimport { Link } from 'wouter';\nimport QRCodeLib from 'qrcode';\nimport { queryClient } from '@/lib/queryClient';\n\nexport default function UnifiedQR() {\n  const { user } = useAuth();\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  \n  // QR Generation states\n  const [qrDataUrl, setQrDataUrl] = useState<string>('');\n  const [qrCanvas, setQrCanvas] = useState<HTMLCanvasElement | null>(null);\n  \n  // QR Scanning states\n  const [isScanning, setIsScanning] = useState(false);\n  const [showManualInput, setShowManualInput] = useState(false);\n  const [scannedCode, setScannedCode] = useState('');\n  const [manualInput, setManualInput] = useState('');\n  const [lastResult, setLastResult] = useState<any>(null);\n  \n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  // Get current attendance status\n  const { data: attendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance\", user?.id],\n    enabled: !!user?.id,\n    refetchInterval: 30000,\n    refetchOnWindowFocus: true,\n  });\n\n  // Generate today's QR for the current user\n  const generateMyQR = () => {\n    if (!user?.id) return '';\n    const today = new Date().toISOString().split('T')[0];\n    return `${user.id}-${today}`;\n  };\n\n  // Generate QR Code\n  useEffect(() => {\n    const generateQR = async () => {\n      if (!user) return;\n      \n      try {\n        const qrData = generateMyQR();\n        const canvas = document.createElement('canvas');\n        \n        await QRCodeLib.toCanvas(canvas, qrData, {\n          width: 300,\n          margin: 2,\n          color: {\n            dark: '#000000',\n            light: '#FFFFFF'\n          }\n        });\n        \n        const dataUrl = canvas.toDataURL('image/png');\n        setQrDataUrl(dataUrl);\n        setQrCanvas(canvas);\n      } catch (error) {\n        console.error('Error generating QR:', error);\n      }\n    };\n\n    generateQR();\n  }, [user]);\n\n  // Process QR mutation\n  const processQRMutation = useMutation({\n    mutationFn: async (qrCode: string) => {\n      const response = await fetch('/api/attendance/qr-process', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({\n          qrData: qrCode.trim(),\n          timestamp: new Date().toISOString(),\n          location: window.location.origin\n        }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Error processant QR');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      console.log(\"✅ QR PROCESSED SUCCESSFULLY:\", data);\n      setLastResult(data);\n      \n      toast({\n        title: \"Fitxatge Registrat!\",\n        description: `${data.type === 'check_in' ? 'Entrada' : 'Sortida'} registrada correctament a les ${new Date().toLocaleTimeString('ca-ES')}`,\n      });\n      \n      // Invalidate queries to refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance\", user?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      \n      // Clear inputs\n      setScannedCode('');\n      setManualInput('');\n      \n      // Stop camera after successful scan\n      if (isScanning) {\n        stopScanning();\n      }\n    },\n    onError: (error: any) => {\n      console.error('❌ QR PROCESSING ERROR:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || 'Error processant el codi QR',\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Start camera for scanning\n  const startScanning = async () => {\n    try {\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n        throw new Error('Camera not supported');\n      }\n\n      console.log('🎥 Requesting camera access...');\n      \n      // Detect iOS Safari\n      const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\n      const isSafari = /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent);\n      \n      console.log('📱 Device detection:', { isIOS, isSafari });\n      \n      // iOS Safari specific constraints\n      let constraints;\n      if (isIOS && isSafari) {\n        constraints = { \n          video: { \n            facingMode: { ideal: 'environment' },\n            width: { ideal: 640, max: 1920 },\n            height: { ideal: 480, max: 1080 },\n            frameRate: { ideal: 30, max: 30 }\n          },\n          audio: false\n        };\n      } else {\n        constraints = { \n          video: { \n            facingMode: 'environment',\n            width: { ideal: 1280 },\n            height: { ideal: 720 }\n          } \n        };\n      }\n\n      let stream;\n      try {\n        console.log('🎥 Trying with environment camera...');\n        stream = await navigator.mediaDevices.getUserMedia(constraints);\n      } catch (envError) {\n        console.log('🎥 Environment camera failed, trying any camera...', envError);\n        const fallbackConstraints = { \n          video: { \n            width: { ideal: 640 },\n            height: { ideal: 480 }\n          } \n        };\n        stream = await navigator.mediaDevices.getUserMedia(fallbackConstraints);\n      }\n      \n      console.log('🎥 Camera access granted!');\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        setIsScanning(true);\n        \n        // iOS Safari specific handling\n        if (isIOS && isSafari) {\n          videoRef.current.setAttribute('playsinline', 'true');\n          videoRef.current.setAttribute('webkit-playsinline', 'true');\n          videoRef.current.muted = true;\n        }\n        \n        // Wait for video to load\n        videoRef.current.onloadedmetadata = () => {\n          console.log('🎥 Video metadata loaded');\n          if (videoRef.current) {\n            videoRef.current.play().catch(playError => {\n              console.error('Play error:', playError);\n            });\n          }\n        };\n      }\n    } catch (error: any) {\n      console.error('❌ Camera error:', error);\n      let errorMessage = \"No es pot accedir a la càmera.\";\n      \n      if (error.name === 'NotAllowedError') {\n        errorMessage = \"Permisos de càmera denegats. A iOS, ves a Configuració > Safari > Càmera i permet l'accés.\";\n      } else if (error.name === 'NotFoundError') {\n        errorMessage = \"No s'ha trobat cap càmera. Utilitza l'entrada manual.\";\n      } else if (error.name === 'NotSupportedError') {\n        errorMessage = \"Càmera no compatible amb aquest dispositiu.\";\n      } else if (error.name === 'OverconstrainedError') {\n        errorMessage = \"Configuració de càmera no compatible. Provant amb configuració bàsica...\";\n      }\n      \n      toast({\n        title: \"Error de Càmera\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      setShowManualInput(true);\n    }\n  };\n\n  // Stop camera\n  const stopScanning = () => {\n    if (videoRef.current?.srcObject) {\n      const stream = videoRef.current.srcObject as MediaStream;\n      stream.getTracks().forEach(track => track.stop());\n      videoRef.current.srcObject = null;\n    }\n    setIsScanning(false);\n  };\n\n  // Process manual input\n  const processManualInput = () => {\n    if (!manualInput.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Introdueix un codi QR vàlid\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    processQRMutation.mutate(manualInput.trim());\n  };\n\n  // Download QR as PNG\n  const downloadQR = () => {\n    if (!qrCanvas) return;\n    \n    const link = document.createElement('a');\n    link.download = `fitxatge-qr-${new Date().toISOString().split('T')[0]}.png`;\n    link.href = qrCanvas.toDataURL();\n    link.click();\n  };\n\n  // Print QR\n  const printQR = () => {\n    if (!qrDataUrl) return;\n    \n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(`\n        <html>\n          <head>\n            <title>Codi QR - ${user?.firstName} ${user?.lastName}</title>\n            <style>\n              body { \n                font-family: Arial, sans-serif; \n                text-align: center; \n                padding: 20px; \n              }\n              .qr-container { \n                display: inline-block; \n                border: 2px solid #000; \n                padding: 20px; \n                margin: 20px; \n              }\n              .user-info { \n                margin-bottom: 15px; \n                font-weight: bold; \n              }\n              .date-info { \n                margin-top: 15px; \n                font-size: 12px; \n                color: #666; \n              }\n            </style>\n          </head>\n          <body>\n            <div class=\"qr-container\">\n              <div class=\"user-info\">\n                ${user?.firstName} ${user?.lastName}<br/>\n                ${user?.email}\n              </div>\n              <img src=\"${qrDataUrl}\" alt=\"QR Code\" />\n              <div class=\"date-info\">\n                Vàlid per: ${new Date().toLocaleDateString('ca-ES')}<br/>\n                (Renova cada dia)\n              </div>\n            </div>\n          </body>\n        </html>\n      `);\n      printWindow.document.close();\n      printWindow.print();\n    }\n  };\n\n  // Copy QR data to clipboard\n  const copyQRData = () => {\n    const qrData = generateMyQR();\n    navigator.clipboard.writeText(qrData);\n    toast({\n      title: \"Copiat!\",\n      description: \"Codi QR copiat al portapapers\",\n    });\n  };\n\n  // Get last attendance record\n  const lastAttendance = attendance?.[0];\n  const isCheckedIn = lastAttendance?.type === 'check_in';\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString('ca-ES', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n\n  if (!user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <Link href={user?.role === 'employee' ? \"/my-qr\" : \"/dashboard\"}>\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Fitxatge QR Unificat</h1>\n            <p className=\"text-sm text-muted-foreground\">Genera, visualitza i escaneja el teu QR personal</p>\n          </div>\n        </div>\n\n        {/* Current status */}\n        <div className=\"flex items-center gap-2 mb-4\">\n          <Badge variant={isCheckedIn ? \"default\" : \"secondary\"}>\n            {isCheckedIn ? \"Dins del centre\" : \"Fora del centre\"}\n          </Badge>\n          {lastAttendance && (\n            <span className=\"text-sm text-muted-foreground\">\n              Últim registre: {formatTime(new Date(lastAttendance.timestamp))}\n            </span>\n          )}\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"my-qr\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"my-qr\" className=\"flex items-center gap-2\">\n            <Eye className=\"h-4 w-4\" />\n            El Meu QR\n          </TabsTrigger>\n          <TabsTrigger value=\"scanner\" className=\"flex items-center gap-2\">\n            <Scan className=\"h-4 w-4\" />\n            Escanejar\n          </TabsTrigger>\n        </TabsList>\n\n        {/* My QR Tab */}\n        <TabsContent value=\"my-qr\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <QrCode className=\"h-5 w-5\" />\n                El Meu Codi QR Personal\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* User info */}\n              <div className=\"flex items-center gap-4 p-4 bg-muted rounded-lg\">\n                <div className=\"w-12 h-12 bg-primary text-white rounded-full flex items-center justify-center\">\n                  <User className=\"h-6 w-6\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold\">{user.firstName} {user.lastName}</p>\n                  <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                </div>\n              </div>\n\n              {/* QR Code Display */}\n              <div className=\"text-center space-y-4\">\n                {qrDataUrl ? (\n                  <div className=\"inline-block p-4 bg-white rounded-lg border-2 border-dashed border-primary\">\n                    <img \n                      src={qrDataUrl} \n                      alt=\"QR Code\"\n                      className=\"w-64 h-64 mx-auto\"\n                    />\n                  </div>\n                ) : (\n                  <div className=\"w-64 h-64 mx-auto bg-gray-100 rounded-lg border-2 border-dashed border-gray-300 flex items-center justify-center\">\n                    <p className=\"text-gray-500\">Generant QR...</p>\n                  </div>\n                )}\n                \n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Codi QR vàlid per avui: {new Date().toLocaleDateString('ca-ES')}\n                  </p>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    <Clock className=\"h-3 w-3 mr-1\" />\n                    Renova automàticament cada dia\n                  </Badge>\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex flex-wrap gap-3 justify-center\">\n                <Button\n                  onClick={copyQRData}\n                  variant=\"outline\"\n                  className=\"border-green-600 text-green-600 hover:bg-green-50\"\n                >\n                  <Copy className=\"h-4 w-4 mr-2\" />\n                  Copiar Codi\n                </Button>\n                \n                <Button\n                  onClick={downloadQR}\n                  disabled={!qrCanvas}\n                  variant=\"outline\"\n                  className=\"border-blue-600 text-blue-600 hover:bg-blue-50\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Descarregar PNG\n                </Button>\n                \n                <Button\n                  onClick={printQR}\n                  disabled={!qrCanvas}\n                  variant=\"outline\"\n                  className=\"border-purple-600 text-purple-600 hover:bg-purple-50\"\n                >\n                  <Printer className=\"h-4 w-4 mr-2\" />\n                  Imprimir\n                </Button>\n              </div>\n\n              {/* Quick scan button */}\n              <div className=\"pt-4 border-t\">\n                <p className=\"text-center text-sm text-muted-foreground mb-3\">\n                  Ja tens el QR? Escaneja'l directament:\n                </p>\n                <Button\n                  onClick={() => {\n                    const qrData = generateMyQR();\n                    processQRMutation.mutate(qrData);\n                  }}\n                  className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                  size=\"lg\"\n                  disabled={processQRMutation.isPending}\n                >\n                  <UserCheck className=\"mr-2 h-5 w-5\" />\n                  {processQRMutation.isPending ? \"Processant...\" : \"Fitxar Ara amb el Meu QR\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Scanner Tab */}\n        <TabsContent value=\"scanner\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Camera className=\"h-5 w-5\" />\n                Escanejar Codi QR\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Camera Scanner */}\n              {!isScanning ? (\n                <div className=\"text-center space-y-4\">\n                  <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200 mb-4\">\n                    <p className=\"text-sm text-blue-800 mb-2\">\n                      📱 <strong>Per iPhone/iPad:</strong>\n                    </p>\n                    <p className=\"text-xs text-blue-700\">\n                      • Assegura't que Safari té permisos de càmera<br/>\n                      • Ves a Configuració &gt; Safari &gt; Càmera &gt; Permet<br/>\n                      • Recarrega la pàgina si cal\n                    </p>\n                  </div>\n                  <Button \n                    onClick={startScanning}\n                    className=\"w-full h-12 bg-green-600 hover:bg-green-700\"\n                    size=\"lg\"\n                  >\n                    <Camera className=\"mr-2 h-5 w-5\" />\n                    Obrir Càmera\n                  </Button>\n                  \n                  <Button \n                    onClick={() => setShowManualInput(!showManualInput)}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                  >\n                    {showManualInput ? <EyeOff className=\"mr-2 h-4 w-4\" /> : <Eye className=\"mr-2 h-4 w-4\" />}\n                    {showManualInput ? \"Amagar\" : \"Entrada Manual\"}\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"relative\">\n                    <video \n                      ref={videoRef}\n                      autoPlay \n                      playsInline\n                      muted\n                      webkit-playsinline=\"true\"\n                      className=\"w-full rounded-lg border-2 border-dashed border-primary\"\n                      style={{ maxHeight: '400px', objectFit: 'cover' }}\n                    />\n                    <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n                      <div className=\"w-48 h-48 border-2 border-primary rounded-lg bg-white/10 backdrop-blur-sm\">\n                        <div className=\"w-full h-full border border-primary/50 rounded-lg m-1\"></div>\n                      </div>\n                    </div>\n                    <div className=\"absolute top-2 left-2 bg-black/70 text-white px-2 py-1 rounded text-xs\">\n                      📱 Apunta al QR\n                    </div>\n                    <div className=\"absolute bottom-2 left-2 bg-green-600/80 text-white px-2 py-1 rounded text-xs\">\n                      🟢 Càmera activa\n                    </div>\n                  </div>\n                  \n                  <Button \n                    onClick={stopScanning}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                  >\n                    Aturar Càmera\n                  </Button>\n                </div>\n              )}\n\n              {/* Manual Input */}\n              {showManualInput && (\n                <div className=\"space-y-4 p-4 bg-gray-50 rounded-lg\">\n                  <h4 className=\"font-semibold\">Entrada Manual</h4>\n                  <Input\n                    placeholder=\"Introdueix el codi QR...\"\n                    value={manualInput}\n                    onChange={(e) => setManualInput(e.target.value)}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        processManualInput();\n                      }\n                    }}\n                  />\n                  <Button \n                    onClick={processManualInput}\n                    disabled={!manualInput.trim() || processQRMutation.isPending}\n                    className=\"w-full\"\n                  >\n                    {processQRMutation.isPending ? \"Processant...\" : \"Processar Codi\"}\n                  </Button>\n                </div>\n              )}\n\n              {/* Last result */}\n              {lastResult && (\n                <Alert className=\"border-green-200 bg-green-50\">\n                  <UserCheck className=\"h-4 w-4\" />\n                  <AlertDescription className=\"text-green-800\">\n                    <strong>Últim fitxatge:</strong> {lastResult.type === 'check_in' ? 'Entrada' : 'Sortida'} registrada a les {formatTime(new Date(lastResult.timestamp))}\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              {/* Instructions */}\n              <Alert className=\"border-orange-200 bg-orange-50\">\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription className=\"text-orange-800\">\n                  <strong>Important:</strong> Només pots utilitzar el teu propi codi QR personal. Els codis caduquen diàriament per complir la normativa vigent.\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":21768}}}